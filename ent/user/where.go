// Code generated by ent, DO NOT EDIT.

package user

import (
	"gokit-demo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailVerifiedAt applies equality check predicate on the "email_verified_at" field. It's identical to EmailVerifiedAtEQ.
func EmailVerifiedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailVerifiedAt, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// Password2 applies equality check predicate on the "password2" field. It's identical to Password2EQ.
func Password2(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword2, v))
}

// Password3 applies equality check predicate on the "password3" field. It's identical to Password3EQ.
func Password3(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword3, v))
}

// CountryID applies equality check predicate on the "country_id" field. It's identical to CountryIDEQ.
func CountryID(v uint64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCountryID, v))
}

// ContactCountryID applies equality check predicate on the "contact_country_id" field. It's identical to ContactCountryIDEQ.
func ContactCountryID(v uint64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldContactCountryID, v))
}

// ContactNumber applies equality check predicate on the "contact_number" field. It's identical to ContactNumberEQ.
func ContactNumber(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldContactNumber, v))
}

// FullContactNumber applies equality check predicate on the "full_contact_number" field. It's identical to FullContactNumberEQ.
func FullContactNumber(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFullContactNumber, v))
}

// IntroducerUserID applies equality check predicate on the "introducer_user_id" field. It's identical to IntroducerUserIDEQ.
func IntroducerUserID(v uint64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIntroducerUserID, v))
}

// Lang applies equality check predicate on the "lang" field. It's identical to LangEQ.
func Lang(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLang, v))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatar, v))
}

// Credit1 applies equality check predicate on the "credit_1" field. It's identical to Credit1EQ.
func Credit1(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCredit1, v))
}

// Credit2 applies equality check predicate on the "credit_2" field. It's identical to Credit2EQ.
func Credit2(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCredit2, v))
}

// Credit3 applies equality check predicate on the "credit_3" field. It's identical to Credit3EQ.
func Credit3(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCredit3, v))
}

// Credit4 applies equality check predicate on the "credit_4" field. It's identical to Credit4EQ.
func Credit4(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCredit4, v))
}

// Credit5 applies equality check predicate on the "credit_5" field. It's identical to Credit5EQ.
func Credit5(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCredit5, v))
}

// BankID applies equality check predicate on the "bank_id" field. It's identical to BankIDEQ.
func BankID(v uint64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBankID, v))
}

// BankAccountName applies equality check predicate on the "bank_account_name" field. It's identical to BankAccountNameEQ.
func BankAccountName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBankAccountName, v))
}

// BankAccountNumber applies equality check predicate on the "bank_account_number" field. It's identical to BankAccountNumberEQ.
func BankAccountNumber(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBankAccountNumber, v))
}

// NationalID applies equality check predicate on the "national_id" field. It's identical to NationalIDEQ.
func NationalID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNationalID, v))
}

// FirstLogin applies equality check predicate on the "first_login" field. It's identical to FirstLoginEQ.
func FirstLogin(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstLogin, v))
}

// BanUntil applies equality check predicate on the "ban_until" field. It's identical to BanUntilEQ.
func BanUntil(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBanUntil, v))
}

// NewLoginAt applies equality check predicate on the "new_login_at" field. It's identical to NewLoginAtEQ.
func NewLoginAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNewLoginAt, v))
}

// LastLoginAt applies equality check predicate on the "last_login_at" field. It's identical to LastLoginAtEQ.
func LastLoginAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginAt, v))
}

// Unilevel applies equality check predicate on the "unilevel" field. It's identical to UnilevelEQ.
func Unilevel(v uint64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUnilevel, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameIsNil applies the IsNil predicate on the "username" field.
func UsernameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUsername))
}

// UsernameNotNil applies the NotNil predicate on the "username" field.
func UsernameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUsername))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// EmailVerifiedAtEQ applies the EQ predicate on the "email_verified_at" field.
func EmailVerifiedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailVerifiedAt, v))
}

// EmailVerifiedAtNEQ applies the NEQ predicate on the "email_verified_at" field.
func EmailVerifiedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmailVerifiedAt, v))
}

// EmailVerifiedAtIn applies the In predicate on the "email_verified_at" field.
func EmailVerifiedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmailVerifiedAt, vs...))
}

// EmailVerifiedAtNotIn applies the NotIn predicate on the "email_verified_at" field.
func EmailVerifiedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmailVerifiedAt, vs...))
}

// EmailVerifiedAtGT applies the GT predicate on the "email_verified_at" field.
func EmailVerifiedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmailVerifiedAt, v))
}

// EmailVerifiedAtGTE applies the GTE predicate on the "email_verified_at" field.
func EmailVerifiedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmailVerifiedAt, v))
}

// EmailVerifiedAtLT applies the LT predicate on the "email_verified_at" field.
func EmailVerifiedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmailVerifiedAt, v))
}

// EmailVerifiedAtLTE applies the LTE predicate on the "email_verified_at" field.
func EmailVerifiedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmailVerifiedAt, v))
}

// EmailVerifiedAtIsNil applies the IsNil predicate on the "email_verified_at" field.
func EmailVerifiedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldEmailVerifiedAt))
}

// EmailVerifiedAtNotNil applies the NotNil predicate on the "email_verified_at" field.
func EmailVerifiedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldEmailVerifiedAt))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// Password2EQ applies the EQ predicate on the "password2" field.
func Password2EQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword2, v))
}

// Password2NEQ applies the NEQ predicate on the "password2" field.
func Password2NEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword2, v))
}

// Password2In applies the In predicate on the "password2" field.
func Password2In(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword2, vs...))
}

// Password2NotIn applies the NotIn predicate on the "password2" field.
func Password2NotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword2, vs...))
}

// Password2GT applies the GT predicate on the "password2" field.
func Password2GT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword2, v))
}

// Password2GTE applies the GTE predicate on the "password2" field.
func Password2GTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword2, v))
}

// Password2LT applies the LT predicate on the "password2" field.
func Password2LT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword2, v))
}

// Password2LTE applies the LTE predicate on the "password2" field.
func Password2LTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword2, v))
}

// Password2Contains applies the Contains predicate on the "password2" field.
func Password2Contains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword2, v))
}

// Password2HasPrefix applies the HasPrefix predicate on the "password2" field.
func Password2HasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword2, v))
}

// Password2HasSuffix applies the HasSuffix predicate on the "password2" field.
func Password2HasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword2, v))
}

// Password2EqualFold applies the EqualFold predicate on the "password2" field.
func Password2EqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword2, v))
}

// Password2ContainsFold applies the ContainsFold predicate on the "password2" field.
func Password2ContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword2, v))
}

// Password3EQ applies the EQ predicate on the "password3" field.
func Password3EQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword3, v))
}

// Password3NEQ applies the NEQ predicate on the "password3" field.
func Password3NEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword3, v))
}

// Password3In applies the In predicate on the "password3" field.
func Password3In(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword3, vs...))
}

// Password3NotIn applies the NotIn predicate on the "password3" field.
func Password3NotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword3, vs...))
}

// Password3GT applies the GT predicate on the "password3" field.
func Password3GT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword3, v))
}

// Password3GTE applies the GTE predicate on the "password3" field.
func Password3GTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword3, v))
}

// Password3LT applies the LT predicate on the "password3" field.
func Password3LT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword3, v))
}

// Password3LTE applies the LTE predicate on the "password3" field.
func Password3LTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword3, v))
}

// Password3Contains applies the Contains predicate on the "password3" field.
func Password3Contains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword3, v))
}

// Password3HasPrefix applies the HasPrefix predicate on the "password3" field.
func Password3HasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword3, v))
}

// Password3HasSuffix applies the HasSuffix predicate on the "password3" field.
func Password3HasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword3, v))
}

// Password3IsNil applies the IsNil predicate on the "password3" field.
func Password3IsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPassword3))
}

// Password3NotNil applies the NotNil predicate on the "password3" field.
func Password3NotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPassword3))
}

// Password3EqualFold applies the EqualFold predicate on the "password3" field.
func Password3EqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword3, v))
}

// Password3ContainsFold applies the ContainsFold predicate on the "password3" field.
func Password3ContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword3, v))
}

// CountryIDEQ applies the EQ predicate on the "country_id" field.
func CountryIDEQ(v uint64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCountryID, v))
}

// CountryIDNEQ applies the NEQ predicate on the "country_id" field.
func CountryIDNEQ(v uint64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCountryID, v))
}

// CountryIDIn applies the In predicate on the "country_id" field.
func CountryIDIn(vs ...uint64) predicate.User {
	return predicate.User(sql.FieldIn(FieldCountryID, vs...))
}

// CountryIDNotIn applies the NotIn predicate on the "country_id" field.
func CountryIDNotIn(vs ...uint64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCountryID, vs...))
}

// CountryIDIsNil applies the IsNil predicate on the "country_id" field.
func CountryIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCountryID))
}

// CountryIDNotNil applies the NotNil predicate on the "country_id" field.
func CountryIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCountryID))
}

// ContactCountryIDEQ applies the EQ predicate on the "contact_country_id" field.
func ContactCountryIDEQ(v uint64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldContactCountryID, v))
}

// ContactCountryIDNEQ applies the NEQ predicate on the "contact_country_id" field.
func ContactCountryIDNEQ(v uint64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldContactCountryID, v))
}

// ContactCountryIDIn applies the In predicate on the "contact_country_id" field.
func ContactCountryIDIn(vs ...uint64) predicate.User {
	return predicate.User(sql.FieldIn(FieldContactCountryID, vs...))
}

// ContactCountryIDNotIn applies the NotIn predicate on the "contact_country_id" field.
func ContactCountryIDNotIn(vs ...uint64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldContactCountryID, vs...))
}

// ContactCountryIDIsNil applies the IsNil predicate on the "contact_country_id" field.
func ContactCountryIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldContactCountryID))
}

// ContactCountryIDNotNil applies the NotNil predicate on the "contact_country_id" field.
func ContactCountryIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldContactCountryID))
}

// ContactNumberEQ applies the EQ predicate on the "contact_number" field.
func ContactNumberEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldContactNumber, v))
}

// ContactNumberNEQ applies the NEQ predicate on the "contact_number" field.
func ContactNumberNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldContactNumber, v))
}

// ContactNumberIn applies the In predicate on the "contact_number" field.
func ContactNumberIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldContactNumber, vs...))
}

// ContactNumberNotIn applies the NotIn predicate on the "contact_number" field.
func ContactNumberNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldContactNumber, vs...))
}

// ContactNumberGT applies the GT predicate on the "contact_number" field.
func ContactNumberGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldContactNumber, v))
}

// ContactNumberGTE applies the GTE predicate on the "contact_number" field.
func ContactNumberGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldContactNumber, v))
}

// ContactNumberLT applies the LT predicate on the "contact_number" field.
func ContactNumberLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldContactNumber, v))
}

// ContactNumberLTE applies the LTE predicate on the "contact_number" field.
func ContactNumberLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldContactNumber, v))
}

// ContactNumberContains applies the Contains predicate on the "contact_number" field.
func ContactNumberContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldContactNumber, v))
}

// ContactNumberHasPrefix applies the HasPrefix predicate on the "contact_number" field.
func ContactNumberHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldContactNumber, v))
}

// ContactNumberHasSuffix applies the HasSuffix predicate on the "contact_number" field.
func ContactNumberHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldContactNumber, v))
}

// ContactNumberIsNil applies the IsNil predicate on the "contact_number" field.
func ContactNumberIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldContactNumber))
}

// ContactNumberNotNil applies the NotNil predicate on the "contact_number" field.
func ContactNumberNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldContactNumber))
}

// ContactNumberEqualFold applies the EqualFold predicate on the "contact_number" field.
func ContactNumberEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldContactNumber, v))
}

// ContactNumberContainsFold applies the ContainsFold predicate on the "contact_number" field.
func ContactNumberContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldContactNumber, v))
}

// FullContactNumberEQ applies the EQ predicate on the "full_contact_number" field.
func FullContactNumberEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFullContactNumber, v))
}

// FullContactNumberNEQ applies the NEQ predicate on the "full_contact_number" field.
func FullContactNumberNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFullContactNumber, v))
}

// FullContactNumberIn applies the In predicate on the "full_contact_number" field.
func FullContactNumberIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldFullContactNumber, vs...))
}

// FullContactNumberNotIn applies the NotIn predicate on the "full_contact_number" field.
func FullContactNumberNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFullContactNumber, vs...))
}

// FullContactNumberGT applies the GT predicate on the "full_contact_number" field.
func FullContactNumberGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldFullContactNumber, v))
}

// FullContactNumberGTE applies the GTE predicate on the "full_contact_number" field.
func FullContactNumberGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFullContactNumber, v))
}

// FullContactNumberLT applies the LT predicate on the "full_contact_number" field.
func FullContactNumberLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldFullContactNumber, v))
}

// FullContactNumberLTE applies the LTE predicate on the "full_contact_number" field.
func FullContactNumberLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFullContactNumber, v))
}

// FullContactNumberContains applies the Contains predicate on the "full_contact_number" field.
func FullContactNumberContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldFullContactNumber, v))
}

// FullContactNumberHasPrefix applies the HasPrefix predicate on the "full_contact_number" field.
func FullContactNumberHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldFullContactNumber, v))
}

// FullContactNumberHasSuffix applies the HasSuffix predicate on the "full_contact_number" field.
func FullContactNumberHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldFullContactNumber, v))
}

// FullContactNumberIsNil applies the IsNil predicate on the "full_contact_number" field.
func FullContactNumberIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldFullContactNumber))
}

// FullContactNumberNotNil applies the NotNil predicate on the "full_contact_number" field.
func FullContactNumberNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldFullContactNumber))
}

// FullContactNumberEqualFold applies the EqualFold predicate on the "full_contact_number" field.
func FullContactNumberEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldFullContactNumber, v))
}

// FullContactNumberContainsFold applies the ContainsFold predicate on the "full_contact_number" field.
func FullContactNumberContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldFullContactNumber, v))
}

// IntroducerUserIDEQ applies the EQ predicate on the "introducer_user_id" field.
func IntroducerUserIDEQ(v uint64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIntroducerUserID, v))
}

// IntroducerUserIDNEQ applies the NEQ predicate on the "introducer_user_id" field.
func IntroducerUserIDNEQ(v uint64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIntroducerUserID, v))
}

// IntroducerUserIDIn applies the In predicate on the "introducer_user_id" field.
func IntroducerUserIDIn(vs ...uint64) predicate.User {
	return predicate.User(sql.FieldIn(FieldIntroducerUserID, vs...))
}

// IntroducerUserIDNotIn applies the NotIn predicate on the "introducer_user_id" field.
func IntroducerUserIDNotIn(vs ...uint64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldIntroducerUserID, vs...))
}

// IntroducerUserIDIsNil applies the IsNil predicate on the "introducer_user_id" field.
func IntroducerUserIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldIntroducerUserID))
}

// IntroducerUserIDNotNil applies the NotNil predicate on the "introducer_user_id" field.
func IntroducerUserIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldIntroducerUserID))
}

// LangEQ applies the EQ predicate on the "lang" field.
func LangEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLang, v))
}

// LangNEQ applies the NEQ predicate on the "lang" field.
func LangNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLang, v))
}

// LangIn applies the In predicate on the "lang" field.
func LangIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLang, vs...))
}

// LangNotIn applies the NotIn predicate on the "lang" field.
func LangNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLang, vs...))
}

// LangGT applies the GT predicate on the "lang" field.
func LangGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLang, v))
}

// LangGTE applies the GTE predicate on the "lang" field.
func LangGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLang, v))
}

// LangLT applies the LT predicate on the "lang" field.
func LangLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLang, v))
}

// LangLTE applies the LTE predicate on the "lang" field.
func LangLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLang, v))
}

// LangContains applies the Contains predicate on the "lang" field.
func LangContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLang, v))
}

// LangHasPrefix applies the HasPrefix predicate on the "lang" field.
func LangHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLang, v))
}

// LangHasSuffix applies the HasSuffix predicate on the "lang" field.
func LangHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLang, v))
}

// LangEqualFold applies the EqualFold predicate on the "lang" field.
func LangEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLang, v))
}

// LangContainsFold applies the ContainsFold predicate on the "lang" field.
func LangContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLang, v))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAvatar, v))
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAvatar, v))
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAvatar, v))
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAvatar, v))
}

// AvatarIsNil applies the IsNil predicate on the "avatar" field.
func AvatarIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAvatar))
}

// AvatarNotNil applies the NotNil predicate on the "avatar" field.
func AvatarNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAvatar))
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAvatar, v))
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAvatar, v))
}

// Credit1EQ applies the EQ predicate on the "credit_1" field.
func Credit1EQ(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCredit1, v))
}

// Credit1NEQ applies the NEQ predicate on the "credit_1" field.
func Credit1NEQ(v float64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCredit1, v))
}

// Credit1In applies the In predicate on the "credit_1" field.
func Credit1In(vs ...float64) predicate.User {
	return predicate.User(sql.FieldIn(FieldCredit1, vs...))
}

// Credit1NotIn applies the NotIn predicate on the "credit_1" field.
func Credit1NotIn(vs ...float64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCredit1, vs...))
}

// Credit1GT applies the GT predicate on the "credit_1" field.
func Credit1GT(v float64) predicate.User {
	return predicate.User(sql.FieldGT(FieldCredit1, v))
}

// Credit1GTE applies the GTE predicate on the "credit_1" field.
func Credit1GTE(v float64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCredit1, v))
}

// Credit1LT applies the LT predicate on the "credit_1" field.
func Credit1LT(v float64) predicate.User {
	return predicate.User(sql.FieldLT(FieldCredit1, v))
}

// Credit1LTE applies the LTE predicate on the "credit_1" field.
func Credit1LTE(v float64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCredit1, v))
}

// Credit2EQ applies the EQ predicate on the "credit_2" field.
func Credit2EQ(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCredit2, v))
}

// Credit2NEQ applies the NEQ predicate on the "credit_2" field.
func Credit2NEQ(v float64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCredit2, v))
}

// Credit2In applies the In predicate on the "credit_2" field.
func Credit2In(vs ...float64) predicate.User {
	return predicate.User(sql.FieldIn(FieldCredit2, vs...))
}

// Credit2NotIn applies the NotIn predicate on the "credit_2" field.
func Credit2NotIn(vs ...float64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCredit2, vs...))
}

// Credit2GT applies the GT predicate on the "credit_2" field.
func Credit2GT(v float64) predicate.User {
	return predicate.User(sql.FieldGT(FieldCredit2, v))
}

// Credit2GTE applies the GTE predicate on the "credit_2" field.
func Credit2GTE(v float64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCredit2, v))
}

// Credit2LT applies the LT predicate on the "credit_2" field.
func Credit2LT(v float64) predicate.User {
	return predicate.User(sql.FieldLT(FieldCredit2, v))
}

// Credit2LTE applies the LTE predicate on the "credit_2" field.
func Credit2LTE(v float64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCredit2, v))
}

// Credit3EQ applies the EQ predicate on the "credit_3" field.
func Credit3EQ(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCredit3, v))
}

// Credit3NEQ applies the NEQ predicate on the "credit_3" field.
func Credit3NEQ(v float64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCredit3, v))
}

// Credit3In applies the In predicate on the "credit_3" field.
func Credit3In(vs ...float64) predicate.User {
	return predicate.User(sql.FieldIn(FieldCredit3, vs...))
}

// Credit3NotIn applies the NotIn predicate on the "credit_3" field.
func Credit3NotIn(vs ...float64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCredit3, vs...))
}

// Credit3GT applies the GT predicate on the "credit_3" field.
func Credit3GT(v float64) predicate.User {
	return predicate.User(sql.FieldGT(FieldCredit3, v))
}

// Credit3GTE applies the GTE predicate on the "credit_3" field.
func Credit3GTE(v float64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCredit3, v))
}

// Credit3LT applies the LT predicate on the "credit_3" field.
func Credit3LT(v float64) predicate.User {
	return predicate.User(sql.FieldLT(FieldCredit3, v))
}

// Credit3LTE applies the LTE predicate on the "credit_3" field.
func Credit3LTE(v float64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCredit3, v))
}

// Credit4EQ applies the EQ predicate on the "credit_4" field.
func Credit4EQ(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCredit4, v))
}

// Credit4NEQ applies the NEQ predicate on the "credit_4" field.
func Credit4NEQ(v float64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCredit4, v))
}

// Credit4In applies the In predicate on the "credit_4" field.
func Credit4In(vs ...float64) predicate.User {
	return predicate.User(sql.FieldIn(FieldCredit4, vs...))
}

// Credit4NotIn applies the NotIn predicate on the "credit_4" field.
func Credit4NotIn(vs ...float64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCredit4, vs...))
}

// Credit4GT applies the GT predicate on the "credit_4" field.
func Credit4GT(v float64) predicate.User {
	return predicate.User(sql.FieldGT(FieldCredit4, v))
}

// Credit4GTE applies the GTE predicate on the "credit_4" field.
func Credit4GTE(v float64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCredit4, v))
}

// Credit4LT applies the LT predicate on the "credit_4" field.
func Credit4LT(v float64) predicate.User {
	return predicate.User(sql.FieldLT(FieldCredit4, v))
}

// Credit4LTE applies the LTE predicate on the "credit_4" field.
func Credit4LTE(v float64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCredit4, v))
}

// Credit5EQ applies the EQ predicate on the "credit_5" field.
func Credit5EQ(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCredit5, v))
}

// Credit5NEQ applies the NEQ predicate on the "credit_5" field.
func Credit5NEQ(v float64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCredit5, v))
}

// Credit5In applies the In predicate on the "credit_5" field.
func Credit5In(vs ...float64) predicate.User {
	return predicate.User(sql.FieldIn(FieldCredit5, vs...))
}

// Credit5NotIn applies the NotIn predicate on the "credit_5" field.
func Credit5NotIn(vs ...float64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCredit5, vs...))
}

// Credit5GT applies the GT predicate on the "credit_5" field.
func Credit5GT(v float64) predicate.User {
	return predicate.User(sql.FieldGT(FieldCredit5, v))
}

// Credit5GTE applies the GTE predicate on the "credit_5" field.
func Credit5GTE(v float64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCredit5, v))
}

// Credit5LT applies the LT predicate on the "credit_5" field.
func Credit5LT(v float64) predicate.User {
	return predicate.User(sql.FieldLT(FieldCredit5, v))
}

// Credit5LTE applies the LTE predicate on the "credit_5" field.
func Credit5LTE(v float64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCredit5, v))
}

// BankIDEQ applies the EQ predicate on the "bank_id" field.
func BankIDEQ(v uint64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBankID, v))
}

// BankIDNEQ applies the NEQ predicate on the "bank_id" field.
func BankIDNEQ(v uint64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBankID, v))
}

// BankIDIn applies the In predicate on the "bank_id" field.
func BankIDIn(vs ...uint64) predicate.User {
	return predicate.User(sql.FieldIn(FieldBankID, vs...))
}

// BankIDNotIn applies the NotIn predicate on the "bank_id" field.
func BankIDNotIn(vs ...uint64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBankID, vs...))
}

// BankIDIsNil applies the IsNil predicate on the "bank_id" field.
func BankIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBankID))
}

// BankIDNotNil applies the NotNil predicate on the "bank_id" field.
func BankIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBankID))
}

// BankAccountNameEQ applies the EQ predicate on the "bank_account_name" field.
func BankAccountNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBankAccountName, v))
}

// BankAccountNameNEQ applies the NEQ predicate on the "bank_account_name" field.
func BankAccountNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBankAccountName, v))
}

// BankAccountNameIn applies the In predicate on the "bank_account_name" field.
func BankAccountNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldBankAccountName, vs...))
}

// BankAccountNameNotIn applies the NotIn predicate on the "bank_account_name" field.
func BankAccountNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBankAccountName, vs...))
}

// BankAccountNameGT applies the GT predicate on the "bank_account_name" field.
func BankAccountNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldBankAccountName, v))
}

// BankAccountNameGTE applies the GTE predicate on the "bank_account_name" field.
func BankAccountNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBankAccountName, v))
}

// BankAccountNameLT applies the LT predicate on the "bank_account_name" field.
func BankAccountNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldBankAccountName, v))
}

// BankAccountNameLTE applies the LTE predicate on the "bank_account_name" field.
func BankAccountNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBankAccountName, v))
}

// BankAccountNameContains applies the Contains predicate on the "bank_account_name" field.
func BankAccountNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldBankAccountName, v))
}

// BankAccountNameHasPrefix applies the HasPrefix predicate on the "bank_account_name" field.
func BankAccountNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldBankAccountName, v))
}

// BankAccountNameHasSuffix applies the HasSuffix predicate on the "bank_account_name" field.
func BankAccountNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldBankAccountName, v))
}

// BankAccountNameIsNil applies the IsNil predicate on the "bank_account_name" field.
func BankAccountNameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBankAccountName))
}

// BankAccountNameNotNil applies the NotNil predicate on the "bank_account_name" field.
func BankAccountNameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBankAccountName))
}

// BankAccountNameEqualFold applies the EqualFold predicate on the "bank_account_name" field.
func BankAccountNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldBankAccountName, v))
}

// BankAccountNameContainsFold applies the ContainsFold predicate on the "bank_account_name" field.
func BankAccountNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldBankAccountName, v))
}

// BankAccountNumberEQ applies the EQ predicate on the "bank_account_number" field.
func BankAccountNumberEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBankAccountNumber, v))
}

// BankAccountNumberNEQ applies the NEQ predicate on the "bank_account_number" field.
func BankAccountNumberNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBankAccountNumber, v))
}

// BankAccountNumberIn applies the In predicate on the "bank_account_number" field.
func BankAccountNumberIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldBankAccountNumber, vs...))
}

// BankAccountNumberNotIn applies the NotIn predicate on the "bank_account_number" field.
func BankAccountNumberNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBankAccountNumber, vs...))
}

// BankAccountNumberGT applies the GT predicate on the "bank_account_number" field.
func BankAccountNumberGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldBankAccountNumber, v))
}

// BankAccountNumberGTE applies the GTE predicate on the "bank_account_number" field.
func BankAccountNumberGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBankAccountNumber, v))
}

// BankAccountNumberLT applies the LT predicate on the "bank_account_number" field.
func BankAccountNumberLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldBankAccountNumber, v))
}

// BankAccountNumberLTE applies the LTE predicate on the "bank_account_number" field.
func BankAccountNumberLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBankAccountNumber, v))
}

// BankAccountNumberContains applies the Contains predicate on the "bank_account_number" field.
func BankAccountNumberContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldBankAccountNumber, v))
}

// BankAccountNumberHasPrefix applies the HasPrefix predicate on the "bank_account_number" field.
func BankAccountNumberHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldBankAccountNumber, v))
}

// BankAccountNumberHasSuffix applies the HasSuffix predicate on the "bank_account_number" field.
func BankAccountNumberHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldBankAccountNumber, v))
}

// BankAccountNumberIsNil applies the IsNil predicate on the "bank_account_number" field.
func BankAccountNumberIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBankAccountNumber))
}

// BankAccountNumberNotNil applies the NotNil predicate on the "bank_account_number" field.
func BankAccountNumberNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBankAccountNumber))
}

// BankAccountNumberEqualFold applies the EqualFold predicate on the "bank_account_number" field.
func BankAccountNumberEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldBankAccountNumber, v))
}

// BankAccountNumberContainsFold applies the ContainsFold predicate on the "bank_account_number" field.
func BankAccountNumberContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldBankAccountNumber, v))
}

// NationalIDEQ applies the EQ predicate on the "national_id" field.
func NationalIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNationalID, v))
}

// NationalIDNEQ applies the NEQ predicate on the "national_id" field.
func NationalIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNationalID, v))
}

// NationalIDIn applies the In predicate on the "national_id" field.
func NationalIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNationalID, vs...))
}

// NationalIDNotIn applies the NotIn predicate on the "national_id" field.
func NationalIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNationalID, vs...))
}

// NationalIDGT applies the GT predicate on the "national_id" field.
func NationalIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNationalID, v))
}

// NationalIDGTE applies the GTE predicate on the "national_id" field.
func NationalIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNationalID, v))
}

// NationalIDLT applies the LT predicate on the "national_id" field.
func NationalIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNationalID, v))
}

// NationalIDLTE applies the LTE predicate on the "national_id" field.
func NationalIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNationalID, v))
}

// NationalIDContains applies the Contains predicate on the "national_id" field.
func NationalIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNationalID, v))
}

// NationalIDHasPrefix applies the HasPrefix predicate on the "national_id" field.
func NationalIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNationalID, v))
}

// NationalIDHasSuffix applies the HasSuffix predicate on the "national_id" field.
func NationalIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNationalID, v))
}

// NationalIDIsNil applies the IsNil predicate on the "national_id" field.
func NationalIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldNationalID))
}

// NationalIDNotNil applies the NotNil predicate on the "national_id" field.
func NationalIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldNationalID))
}

// NationalIDEqualFold applies the EqualFold predicate on the "national_id" field.
func NationalIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNationalID, v))
}

// NationalIDContainsFold applies the ContainsFold predicate on the "national_id" field.
func NationalIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNationalID, v))
}

// FirstLoginEQ applies the EQ predicate on the "first_login" field.
func FirstLoginEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstLogin, v))
}

// FirstLoginNEQ applies the NEQ predicate on the "first_login" field.
func FirstLoginNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFirstLogin, v))
}

// BanUntilEQ applies the EQ predicate on the "ban_until" field.
func BanUntilEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBanUntil, v))
}

// BanUntilNEQ applies the NEQ predicate on the "ban_until" field.
func BanUntilNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBanUntil, v))
}

// BanUntilIn applies the In predicate on the "ban_until" field.
func BanUntilIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldBanUntil, vs...))
}

// BanUntilNotIn applies the NotIn predicate on the "ban_until" field.
func BanUntilNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBanUntil, vs...))
}

// BanUntilGT applies the GT predicate on the "ban_until" field.
func BanUntilGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldBanUntil, v))
}

// BanUntilGTE applies the GTE predicate on the "ban_until" field.
func BanUntilGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBanUntil, v))
}

// BanUntilLT applies the LT predicate on the "ban_until" field.
func BanUntilLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldBanUntil, v))
}

// BanUntilLTE applies the LTE predicate on the "ban_until" field.
func BanUntilLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBanUntil, v))
}

// BanUntilIsNil applies the IsNil predicate on the "ban_until" field.
func BanUntilIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBanUntil))
}

// BanUntilNotNil applies the NotNil predicate on the "ban_until" field.
func BanUntilNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBanUntil))
}

// NewLoginAtEQ applies the EQ predicate on the "new_login_at" field.
func NewLoginAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNewLoginAt, v))
}

// NewLoginAtNEQ applies the NEQ predicate on the "new_login_at" field.
func NewLoginAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNewLoginAt, v))
}

// NewLoginAtIn applies the In predicate on the "new_login_at" field.
func NewLoginAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldNewLoginAt, vs...))
}

// NewLoginAtNotIn applies the NotIn predicate on the "new_login_at" field.
func NewLoginAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNewLoginAt, vs...))
}

// NewLoginAtGT applies the GT predicate on the "new_login_at" field.
func NewLoginAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldNewLoginAt, v))
}

// NewLoginAtGTE applies the GTE predicate on the "new_login_at" field.
func NewLoginAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNewLoginAt, v))
}

// NewLoginAtLT applies the LT predicate on the "new_login_at" field.
func NewLoginAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldNewLoginAt, v))
}

// NewLoginAtLTE applies the LTE predicate on the "new_login_at" field.
func NewLoginAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNewLoginAt, v))
}

// NewLoginAtIsNil applies the IsNil predicate on the "new_login_at" field.
func NewLoginAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldNewLoginAt))
}

// NewLoginAtNotNil applies the NotNil predicate on the "new_login_at" field.
func NewLoginAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldNewLoginAt))
}

// LastLoginAtEQ applies the EQ predicate on the "last_login_at" field.
func LastLoginAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginAt, v))
}

// LastLoginAtNEQ applies the NEQ predicate on the "last_login_at" field.
func LastLoginAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastLoginAt, v))
}

// LastLoginAtIn applies the In predicate on the "last_login_at" field.
func LastLoginAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastLoginAt, vs...))
}

// LastLoginAtNotIn applies the NotIn predicate on the "last_login_at" field.
func LastLoginAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastLoginAt, vs...))
}

// LastLoginAtGT applies the GT predicate on the "last_login_at" field.
func LastLoginAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastLoginAt, v))
}

// LastLoginAtGTE applies the GTE predicate on the "last_login_at" field.
func LastLoginAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastLoginAt, v))
}

// LastLoginAtLT applies the LT predicate on the "last_login_at" field.
func LastLoginAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastLoginAt, v))
}

// LastLoginAtLTE applies the LTE predicate on the "last_login_at" field.
func LastLoginAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastLoginAt, v))
}

// LastLoginAtIsNil applies the IsNil predicate on the "last_login_at" field.
func LastLoginAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastLoginAt))
}

// LastLoginAtNotNil applies the NotNil predicate on the "last_login_at" field.
func LastLoginAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastLoginAt))
}

// UnilevelEQ applies the EQ predicate on the "unilevel" field.
func UnilevelEQ(v uint64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUnilevel, v))
}

// UnilevelNEQ applies the NEQ predicate on the "unilevel" field.
func UnilevelNEQ(v uint64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUnilevel, v))
}

// UnilevelIn applies the In predicate on the "unilevel" field.
func UnilevelIn(vs ...uint64) predicate.User {
	return predicate.User(sql.FieldIn(FieldUnilevel, vs...))
}

// UnilevelNotIn applies the NotIn predicate on the "unilevel" field.
func UnilevelNotIn(vs ...uint64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUnilevel, vs...))
}

// UnilevelGT applies the GT predicate on the "unilevel" field.
func UnilevelGT(v uint64) predicate.User {
	return predicate.User(sql.FieldGT(FieldUnilevel, v))
}

// UnilevelGTE applies the GTE predicate on the "unilevel" field.
func UnilevelGTE(v uint64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUnilevel, v))
}

// UnilevelLT applies the LT predicate on the "unilevel" field.
func UnilevelLT(v uint64) predicate.User {
	return predicate.User(sql.FieldLT(FieldUnilevel, v))
}

// UnilevelLTE applies the LTE predicate on the "unilevel" field.
func UnilevelLTE(v uint64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUnilevel, v))
}

// UnilevelIsNil applies the IsNil predicate on the "unilevel" field.
func UnilevelIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUnilevel))
}

// UnilevelNotNil applies the NotNil predicate on the "unilevel" field.
func UnilevelNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUnilevel))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDeletedAt))
}

// HasCountry applies the HasEdge predicate on the "country" edge.
func HasCountry() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CountryTable, CountryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCountryWith applies the HasEdge predicate on the "country" edge with a given conditions (other predicates).
func HasCountryWith(preds ...predicate.Country) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCountryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContactCountry applies the HasEdge predicate on the "contact_country" edge.
func HasContactCountry() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ContactCountryTable, ContactCountryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContactCountryWith applies the HasEdge predicate on the "contact_country" edge with a given conditions (other predicates).
func HasContactCountryWith(preds ...predicate.Country) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newContactCountryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIntroducer applies the HasEdge predicate on the "introducer" edge.
func HasIntroducer() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, IntroducerTable, IntroducerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIntroducerWith applies the HasEdge predicate on the "introducer" edge with a given conditions (other predicates).
func HasIntroducerWith(preds ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newIntroducerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBank applies the HasEdge predicate on the "bank" edge.
func HasBank() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BankTable, BankColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBankWith applies the HasEdge predicate on the "bank" edge with a given conditions (other predicates).
func HasBankWith(preds ...predicate.Bank) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newBankStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIntroducedUsers applies the HasEdge predicate on the "introduced_users" edge.
func HasIntroducedUsers() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IntroducedUsersTable, IntroducedUsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIntroducedUsersWith applies the HasEdge predicate on the "introduced_users" edge with a given conditions (other predicates).
func HasIntroducedUsersWith(preds ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newIntroducedUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
