// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gokit-demo/ent/bank"
	"gokit-demo/ent/country"
	"gokit-demo/ent/predicate"
	"gokit-demo/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// ClearUsername clears the value of the "username" field.
func (uu *UserUpdate) ClearUsername() *UserUpdate {
	uu.mutation.ClearUsername()
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// ClearName clears the value of the "name" field.
func (uu *UserUpdate) ClearName() *UserUpdate {
	uu.mutation.ClearName()
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// ClearEmail clears the value of the "email" field.
func (uu *UserUpdate) ClearEmail() *UserUpdate {
	uu.mutation.ClearEmail()
	return uu
}

// SetEmailVerifiedAt sets the "email_verified_at" field.
func (uu *UserUpdate) SetEmailVerifiedAt(t time.Time) *UserUpdate {
	uu.mutation.SetEmailVerifiedAt(t)
	return uu
}

// SetNillableEmailVerifiedAt sets the "email_verified_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmailVerifiedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetEmailVerifiedAt(*t)
	}
	return uu
}

// ClearEmailVerifiedAt clears the value of the "email_verified_at" field.
func (uu *UserUpdate) ClearEmailVerifiedAt() *UserUpdate {
	uu.mutation.ClearEmailVerifiedAt()
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// SetPassword2 sets the "password2" field.
func (uu *UserUpdate) SetPassword2(s string) *UserUpdate {
	uu.mutation.SetPassword2(s)
	return uu
}

// SetNillablePassword2 sets the "password2" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword2(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword2(*s)
	}
	return uu
}

// SetCountryID sets the "country_id" field.
func (uu *UserUpdate) SetCountryID(u uint64) *UserUpdate {
	uu.mutation.SetCountryID(u)
	return uu
}

// SetNillableCountryID sets the "country_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCountryID(u *uint64) *UserUpdate {
	if u != nil {
		uu.SetCountryID(*u)
	}
	return uu
}

// ClearCountryID clears the value of the "country_id" field.
func (uu *UserUpdate) ClearCountryID() *UserUpdate {
	uu.mutation.ClearCountryID()
	return uu
}

// SetContactCountryID sets the "contact_country_id" field.
func (uu *UserUpdate) SetContactCountryID(u uint64) *UserUpdate {
	uu.mutation.SetContactCountryID(u)
	return uu
}

// SetNillableContactCountryID sets the "contact_country_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableContactCountryID(u *uint64) *UserUpdate {
	if u != nil {
		uu.SetContactCountryID(*u)
	}
	return uu
}

// ClearContactCountryID clears the value of the "contact_country_id" field.
func (uu *UserUpdate) ClearContactCountryID() *UserUpdate {
	uu.mutation.ClearContactCountryID()
	return uu
}

// SetContactNumber sets the "contact_number" field.
func (uu *UserUpdate) SetContactNumber(s string) *UserUpdate {
	uu.mutation.SetContactNumber(s)
	return uu
}

// SetNillableContactNumber sets the "contact_number" field if the given value is not nil.
func (uu *UserUpdate) SetNillableContactNumber(s *string) *UserUpdate {
	if s != nil {
		uu.SetContactNumber(*s)
	}
	return uu
}

// ClearContactNumber clears the value of the "contact_number" field.
func (uu *UserUpdate) ClearContactNumber() *UserUpdate {
	uu.mutation.ClearContactNumber()
	return uu
}

// SetFullContactNumber sets the "full_contact_number" field.
func (uu *UserUpdate) SetFullContactNumber(s string) *UserUpdate {
	uu.mutation.SetFullContactNumber(s)
	return uu
}

// SetNillableFullContactNumber sets the "full_contact_number" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFullContactNumber(s *string) *UserUpdate {
	if s != nil {
		uu.SetFullContactNumber(*s)
	}
	return uu
}

// ClearFullContactNumber clears the value of the "full_contact_number" field.
func (uu *UserUpdate) ClearFullContactNumber() *UserUpdate {
	uu.mutation.ClearFullContactNumber()
	return uu
}

// SetIntroducerUserID sets the "introducer_user_id" field.
func (uu *UserUpdate) SetIntroducerUserID(u uint64) *UserUpdate {
	uu.mutation.SetIntroducerUserID(u)
	return uu
}

// SetNillableIntroducerUserID sets the "introducer_user_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIntroducerUserID(u *uint64) *UserUpdate {
	if u != nil {
		uu.SetIntroducerUserID(*u)
	}
	return uu
}

// ClearIntroducerUserID clears the value of the "introducer_user_id" field.
func (uu *UserUpdate) ClearIntroducerUserID() *UserUpdate {
	uu.mutation.ClearIntroducerUserID()
	return uu
}

// SetLang sets the "lang" field.
func (uu *UserUpdate) SetLang(s string) *UserUpdate {
	uu.mutation.SetLang(s)
	return uu
}

// SetNillableLang sets the "lang" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLang(s *string) *UserUpdate {
	if s != nil {
		uu.SetLang(*s)
	}
	return uu
}

// SetAvatar sets the "avatar" field.
func (uu *UserUpdate) SetAvatar(s string) *UserUpdate {
	uu.mutation.SetAvatar(s)
	return uu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatar(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatar(*s)
	}
	return uu
}

// ClearAvatar clears the value of the "avatar" field.
func (uu *UserUpdate) ClearAvatar() *UserUpdate {
	uu.mutation.ClearAvatar()
	return uu
}

// SetCredit1 sets the "credit_1" field.
func (uu *UserUpdate) SetCredit1(f float64) *UserUpdate {
	uu.mutation.ResetCredit1()
	uu.mutation.SetCredit1(f)
	return uu
}

// SetNillableCredit1 sets the "credit_1" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCredit1(f *float64) *UserUpdate {
	if f != nil {
		uu.SetCredit1(*f)
	}
	return uu
}

// AddCredit1 adds f to the "credit_1" field.
func (uu *UserUpdate) AddCredit1(f float64) *UserUpdate {
	uu.mutation.AddCredit1(f)
	return uu
}

// SetCredit2 sets the "credit_2" field.
func (uu *UserUpdate) SetCredit2(f float64) *UserUpdate {
	uu.mutation.ResetCredit2()
	uu.mutation.SetCredit2(f)
	return uu
}

// SetNillableCredit2 sets the "credit_2" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCredit2(f *float64) *UserUpdate {
	if f != nil {
		uu.SetCredit2(*f)
	}
	return uu
}

// AddCredit2 adds f to the "credit_2" field.
func (uu *UserUpdate) AddCredit2(f float64) *UserUpdate {
	uu.mutation.AddCredit2(f)
	return uu
}

// SetCredit3 sets the "credit_3" field.
func (uu *UserUpdate) SetCredit3(f float64) *UserUpdate {
	uu.mutation.ResetCredit3()
	uu.mutation.SetCredit3(f)
	return uu
}

// SetNillableCredit3 sets the "credit_3" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCredit3(f *float64) *UserUpdate {
	if f != nil {
		uu.SetCredit3(*f)
	}
	return uu
}

// AddCredit3 adds f to the "credit_3" field.
func (uu *UserUpdate) AddCredit3(f float64) *UserUpdate {
	uu.mutation.AddCredit3(f)
	return uu
}

// SetCredit4 sets the "credit_4" field.
func (uu *UserUpdate) SetCredit4(f float64) *UserUpdate {
	uu.mutation.ResetCredit4()
	uu.mutation.SetCredit4(f)
	return uu
}

// SetNillableCredit4 sets the "credit_4" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCredit4(f *float64) *UserUpdate {
	if f != nil {
		uu.SetCredit4(*f)
	}
	return uu
}

// AddCredit4 adds f to the "credit_4" field.
func (uu *UserUpdate) AddCredit4(f float64) *UserUpdate {
	uu.mutation.AddCredit4(f)
	return uu
}

// SetCredit5 sets the "credit_5" field.
func (uu *UserUpdate) SetCredit5(f float64) *UserUpdate {
	uu.mutation.ResetCredit5()
	uu.mutation.SetCredit5(f)
	return uu
}

// SetNillableCredit5 sets the "credit_5" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCredit5(f *float64) *UserUpdate {
	if f != nil {
		uu.SetCredit5(*f)
	}
	return uu
}

// AddCredit5 adds f to the "credit_5" field.
func (uu *UserUpdate) AddCredit5(f float64) *UserUpdate {
	uu.mutation.AddCredit5(f)
	return uu
}

// SetBankID sets the "bank_id" field.
func (uu *UserUpdate) SetBankID(u uint64) *UserUpdate {
	uu.mutation.SetBankID(u)
	return uu
}

// SetNillableBankID sets the "bank_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBankID(u *uint64) *UserUpdate {
	if u != nil {
		uu.SetBankID(*u)
	}
	return uu
}

// ClearBankID clears the value of the "bank_id" field.
func (uu *UserUpdate) ClearBankID() *UserUpdate {
	uu.mutation.ClearBankID()
	return uu
}

// SetBankAccountName sets the "bank_account_name" field.
func (uu *UserUpdate) SetBankAccountName(s string) *UserUpdate {
	uu.mutation.SetBankAccountName(s)
	return uu
}

// SetNillableBankAccountName sets the "bank_account_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBankAccountName(s *string) *UserUpdate {
	if s != nil {
		uu.SetBankAccountName(*s)
	}
	return uu
}

// ClearBankAccountName clears the value of the "bank_account_name" field.
func (uu *UserUpdate) ClearBankAccountName() *UserUpdate {
	uu.mutation.ClearBankAccountName()
	return uu
}

// SetBankAccountNumber sets the "bank_account_number" field.
func (uu *UserUpdate) SetBankAccountNumber(s string) *UserUpdate {
	uu.mutation.SetBankAccountNumber(s)
	return uu
}

// SetNillableBankAccountNumber sets the "bank_account_number" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBankAccountNumber(s *string) *UserUpdate {
	if s != nil {
		uu.SetBankAccountNumber(*s)
	}
	return uu
}

// ClearBankAccountNumber clears the value of the "bank_account_number" field.
func (uu *UserUpdate) ClearBankAccountNumber() *UserUpdate {
	uu.mutation.ClearBankAccountNumber()
	return uu
}

// SetNationalID sets the "national_id" field.
func (uu *UserUpdate) SetNationalID(s string) *UserUpdate {
	uu.mutation.SetNationalID(s)
	return uu
}

// SetNillableNationalID sets the "national_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNationalID(s *string) *UserUpdate {
	if s != nil {
		uu.SetNationalID(*s)
	}
	return uu
}

// ClearNationalID clears the value of the "national_id" field.
func (uu *UserUpdate) ClearNationalID() *UserUpdate {
	uu.mutation.ClearNationalID()
	return uu
}

// SetFirstLogin sets the "first_login" field.
func (uu *UserUpdate) SetFirstLogin(b bool) *UserUpdate {
	uu.mutation.SetFirstLogin(b)
	return uu
}

// SetNillableFirstLogin sets the "first_login" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFirstLogin(b *bool) *UserUpdate {
	if b != nil {
		uu.SetFirstLogin(*b)
	}
	return uu
}

// SetBanUntil sets the "ban_until" field.
func (uu *UserUpdate) SetBanUntil(t time.Time) *UserUpdate {
	uu.mutation.SetBanUntil(t)
	return uu
}

// SetNillableBanUntil sets the "ban_until" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBanUntil(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetBanUntil(*t)
	}
	return uu
}

// ClearBanUntil clears the value of the "ban_until" field.
func (uu *UserUpdate) ClearBanUntil() *UserUpdate {
	uu.mutation.ClearBanUntil()
	return uu
}

// SetNewLoginAt sets the "new_login_at" field.
func (uu *UserUpdate) SetNewLoginAt(t time.Time) *UserUpdate {
	uu.mutation.SetNewLoginAt(t)
	return uu
}

// SetNillableNewLoginAt sets the "new_login_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNewLoginAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetNewLoginAt(*t)
	}
	return uu
}

// ClearNewLoginAt clears the value of the "new_login_at" field.
func (uu *UserUpdate) ClearNewLoginAt() *UserUpdate {
	uu.mutation.ClearNewLoginAt()
	return uu
}

// SetLastLoginAt sets the "last_login_at" field.
func (uu *UserUpdate) SetLastLoginAt(t time.Time) *UserUpdate {
	uu.mutation.SetLastLoginAt(t)
	return uu
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLoginAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastLoginAt(*t)
	}
	return uu
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (uu *UserUpdate) ClearLastLoginAt() *UserUpdate {
	uu.mutation.ClearLastLoginAt()
	return uu
}

// SetUnilevel sets the "unilevel" field.
func (uu *UserUpdate) SetUnilevel(u uint64) *UserUpdate {
	uu.mutation.ResetUnilevel()
	uu.mutation.SetUnilevel(u)
	return uu
}

// SetNillableUnilevel sets the "unilevel" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUnilevel(u *uint64) *UserUpdate {
	if u != nil {
		uu.SetUnilevel(*u)
	}
	return uu
}

// AddUnilevel adds u to the "unilevel" field.
func (uu *UserUpdate) AddUnilevel(u int64) *UserUpdate {
	uu.mutation.AddUnilevel(u)
	return uu
}

// ClearUnilevel clears the value of the "unilevel" field.
func (uu *UserUpdate) ClearUnilevel() *UserUpdate {
	uu.mutation.ClearUnilevel()
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetDeletedAt sets the "deleted_at" field.
func (uu *UserUpdate) SetDeletedAt(t time.Time) *UserUpdate {
	uu.mutation.SetDeletedAt(t)
	return uu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDeletedAt(*t)
	}
	return uu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uu *UserUpdate) ClearDeletedAt() *UserUpdate {
	uu.mutation.ClearDeletedAt()
	return uu
}

// SetCountry sets the "country" edge to the Country entity.
func (uu *UserUpdate) SetCountry(c *Country) *UserUpdate {
	return uu.SetCountryID(c.ID)
}

// SetContactCountry sets the "contact_country" edge to the Country entity.
func (uu *UserUpdate) SetContactCountry(c *Country) *UserUpdate {
	return uu.SetContactCountryID(c.ID)
}

// SetIntroducerID sets the "introducer" edge to the User entity by ID.
func (uu *UserUpdate) SetIntroducerID(id uint64) *UserUpdate {
	uu.mutation.SetIntroducerID(id)
	return uu
}

// SetNillableIntroducerID sets the "introducer" edge to the User entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableIntroducerID(id *uint64) *UserUpdate {
	if id != nil {
		uu = uu.SetIntroducerID(*id)
	}
	return uu
}

// SetIntroducer sets the "introducer" edge to the User entity.
func (uu *UserUpdate) SetIntroducer(u *User) *UserUpdate {
	return uu.SetIntroducerID(u.ID)
}

// SetBank sets the "bank" edge to the Bank entity.
func (uu *UserUpdate) SetBank(b *Bank) *UserUpdate {
	return uu.SetBankID(b.ID)
}

// AddIntroducedUserIDs adds the "introduced_users" edge to the User entity by IDs.
func (uu *UserUpdate) AddIntroducedUserIDs(ids ...uint64) *UserUpdate {
	uu.mutation.AddIntroducedUserIDs(ids...)
	return uu
}

// AddIntroducedUsers adds the "introduced_users" edges to the User entity.
func (uu *UserUpdate) AddIntroducedUsers(u ...*User) *UserUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddIntroducedUserIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearCountry clears the "country" edge to the Country entity.
func (uu *UserUpdate) ClearCountry() *UserUpdate {
	uu.mutation.ClearCountry()
	return uu
}

// ClearContactCountry clears the "contact_country" edge to the Country entity.
func (uu *UserUpdate) ClearContactCountry() *UserUpdate {
	uu.mutation.ClearContactCountry()
	return uu
}

// ClearIntroducer clears the "introducer" edge to the User entity.
func (uu *UserUpdate) ClearIntroducer() *UserUpdate {
	uu.mutation.ClearIntroducer()
	return uu
}

// ClearBank clears the "bank" edge to the Bank entity.
func (uu *UserUpdate) ClearBank() *UserUpdate {
	uu.mutation.ClearBank()
	return uu
}

// ClearIntroducedUsers clears all "introduced_users" edges to the User entity.
func (uu *UserUpdate) ClearIntroducedUsers() *UserUpdate {
	uu.mutation.ClearIntroducedUsers()
	return uu
}

// RemoveIntroducedUserIDs removes the "introduced_users" edge to User entities by IDs.
func (uu *UserUpdate) RemoveIntroducedUserIDs(ids ...uint64) *UserUpdate {
	uu.mutation.RemoveIntroducedUserIDs(ids...)
	return uu
}

// RemoveIntroducedUsers removes "introduced_users" edges to User entities.
func (uu *UserUpdate) RemoveIntroducedUsers(u ...*User) *UserUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveIntroducedUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Password2(); ok {
		if err := user.Password2Validator(v); err != nil {
			return &ValidationError{Name: "password2", err: fmt.Errorf(`ent: validator failed for field "User.password2": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if uu.mutation.UsernameCleared() {
		_spec.ClearField(user.FieldUsername, field.TypeString)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if uu.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uu.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uu.mutation.EmailVerifiedAt(); ok {
		_spec.SetField(user.FieldEmailVerifiedAt, field.TypeTime, value)
	}
	if uu.mutation.EmailVerifiedAtCleared() {
		_spec.ClearField(user.FieldEmailVerifiedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password2(); ok {
		_spec.SetField(user.FieldPassword2, field.TypeString, value)
	}
	if value, ok := uu.mutation.ContactNumber(); ok {
		_spec.SetField(user.FieldContactNumber, field.TypeString, value)
	}
	if uu.mutation.ContactNumberCleared() {
		_spec.ClearField(user.FieldContactNumber, field.TypeString)
	}
	if value, ok := uu.mutation.FullContactNumber(); ok {
		_spec.SetField(user.FieldFullContactNumber, field.TypeString, value)
	}
	if uu.mutation.FullContactNumberCleared() {
		_spec.ClearField(user.FieldFullContactNumber, field.TypeString)
	}
	if value, ok := uu.mutation.Lang(); ok {
		_spec.SetField(user.FieldLang, field.TypeString, value)
	}
	if value, ok := uu.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if uu.mutation.AvatarCleared() {
		_spec.ClearField(user.FieldAvatar, field.TypeString)
	}
	if value, ok := uu.mutation.Credit1(); ok {
		_spec.SetField(user.FieldCredit1, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.AddedCredit1(); ok {
		_spec.AddField(user.FieldCredit1, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.Credit2(); ok {
		_spec.SetField(user.FieldCredit2, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.AddedCredit2(); ok {
		_spec.AddField(user.FieldCredit2, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.Credit3(); ok {
		_spec.SetField(user.FieldCredit3, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.AddedCredit3(); ok {
		_spec.AddField(user.FieldCredit3, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.Credit4(); ok {
		_spec.SetField(user.FieldCredit4, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.AddedCredit4(); ok {
		_spec.AddField(user.FieldCredit4, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.Credit5(); ok {
		_spec.SetField(user.FieldCredit5, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.AddedCredit5(); ok {
		_spec.AddField(user.FieldCredit5, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.BankAccountName(); ok {
		_spec.SetField(user.FieldBankAccountName, field.TypeString, value)
	}
	if uu.mutation.BankAccountNameCleared() {
		_spec.ClearField(user.FieldBankAccountName, field.TypeString)
	}
	if value, ok := uu.mutation.BankAccountNumber(); ok {
		_spec.SetField(user.FieldBankAccountNumber, field.TypeString, value)
	}
	if uu.mutation.BankAccountNumberCleared() {
		_spec.ClearField(user.FieldBankAccountNumber, field.TypeString)
	}
	if value, ok := uu.mutation.NationalID(); ok {
		_spec.SetField(user.FieldNationalID, field.TypeString, value)
	}
	if uu.mutation.NationalIDCleared() {
		_spec.ClearField(user.FieldNationalID, field.TypeString)
	}
	if value, ok := uu.mutation.FirstLogin(); ok {
		_spec.SetField(user.FieldFirstLogin, field.TypeBool, value)
	}
	if value, ok := uu.mutation.BanUntil(); ok {
		_spec.SetField(user.FieldBanUntil, field.TypeTime, value)
	}
	if uu.mutation.BanUntilCleared() {
		_spec.ClearField(user.FieldBanUntil, field.TypeTime)
	}
	if value, ok := uu.mutation.NewLoginAt(); ok {
		_spec.SetField(user.FieldNewLoginAt, field.TypeTime, value)
	}
	if uu.mutation.NewLoginAtCleared() {
		_spec.ClearField(user.FieldNewLoginAt, field.TypeTime)
	}
	if value, ok := uu.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
	}
	if uu.mutation.LastLoginAtCleared() {
		_spec.ClearField(user.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := uu.mutation.Unilevel(); ok {
		_spec.SetField(user.FieldUnilevel, field.TypeUint64, value)
	}
	if value, ok := uu.mutation.AddedUnilevel(); ok {
		_spec.AddField(user.FieldUnilevel, field.TypeUint64, value)
	}
	if uu.mutation.UnilevelCleared() {
		_spec.ClearField(user.FieldUnilevel, field.TypeUint64)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uu.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if uu.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.CountryTable,
			Columns: []string{user.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.CountryTable,
			Columns: []string{user.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ContactCountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ContactCountryTable,
			Columns: []string{user.ContactCountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ContactCountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ContactCountryTable,
			Columns: []string{user.ContactCountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.IntroducerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.IntroducerTable,
			Columns: []string{user.IntroducerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.IntroducerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.IntroducerTable,
			Columns: []string{user.IntroducerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.BankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BankTable,
			Columns: []string{user.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BankTable,
			Columns: []string{user.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.IntroducedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IntroducedUsersTable,
			Columns: []string{user.IntroducedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedIntroducedUsersIDs(); len(nodes) > 0 && !uu.mutation.IntroducedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IntroducedUsersTable,
			Columns: []string{user.IntroducedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.IntroducedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IntroducedUsersTable,
			Columns: []string{user.IntroducedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// ClearUsername clears the value of the "username" field.
func (uuo *UserUpdateOne) ClearUsername() *UserUpdateOne {
	uuo.mutation.ClearUsername()
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// ClearName clears the value of the "name" field.
func (uuo *UserUpdateOne) ClearName() *UserUpdateOne {
	uuo.mutation.ClearName()
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// ClearEmail clears the value of the "email" field.
func (uuo *UserUpdateOne) ClearEmail() *UserUpdateOne {
	uuo.mutation.ClearEmail()
	return uuo
}

// SetEmailVerifiedAt sets the "email_verified_at" field.
func (uuo *UserUpdateOne) SetEmailVerifiedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetEmailVerifiedAt(t)
	return uuo
}

// SetNillableEmailVerifiedAt sets the "email_verified_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmailVerifiedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetEmailVerifiedAt(*t)
	}
	return uuo
}

// ClearEmailVerifiedAt clears the value of the "email_verified_at" field.
func (uuo *UserUpdateOne) ClearEmailVerifiedAt() *UserUpdateOne {
	uuo.mutation.ClearEmailVerifiedAt()
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// SetPassword2 sets the "password2" field.
func (uuo *UserUpdateOne) SetPassword2(s string) *UserUpdateOne {
	uuo.mutation.SetPassword2(s)
	return uuo
}

// SetNillablePassword2 sets the "password2" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword2(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword2(*s)
	}
	return uuo
}

// SetCountryID sets the "country_id" field.
func (uuo *UserUpdateOne) SetCountryID(u uint64) *UserUpdateOne {
	uuo.mutation.SetCountryID(u)
	return uuo
}

// SetNillableCountryID sets the "country_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCountryID(u *uint64) *UserUpdateOne {
	if u != nil {
		uuo.SetCountryID(*u)
	}
	return uuo
}

// ClearCountryID clears the value of the "country_id" field.
func (uuo *UserUpdateOne) ClearCountryID() *UserUpdateOne {
	uuo.mutation.ClearCountryID()
	return uuo
}

// SetContactCountryID sets the "contact_country_id" field.
func (uuo *UserUpdateOne) SetContactCountryID(u uint64) *UserUpdateOne {
	uuo.mutation.SetContactCountryID(u)
	return uuo
}

// SetNillableContactCountryID sets the "contact_country_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableContactCountryID(u *uint64) *UserUpdateOne {
	if u != nil {
		uuo.SetContactCountryID(*u)
	}
	return uuo
}

// ClearContactCountryID clears the value of the "contact_country_id" field.
func (uuo *UserUpdateOne) ClearContactCountryID() *UserUpdateOne {
	uuo.mutation.ClearContactCountryID()
	return uuo
}

// SetContactNumber sets the "contact_number" field.
func (uuo *UserUpdateOne) SetContactNumber(s string) *UserUpdateOne {
	uuo.mutation.SetContactNumber(s)
	return uuo
}

// SetNillableContactNumber sets the "contact_number" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableContactNumber(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetContactNumber(*s)
	}
	return uuo
}

// ClearContactNumber clears the value of the "contact_number" field.
func (uuo *UserUpdateOne) ClearContactNumber() *UserUpdateOne {
	uuo.mutation.ClearContactNumber()
	return uuo
}

// SetFullContactNumber sets the "full_contact_number" field.
func (uuo *UserUpdateOne) SetFullContactNumber(s string) *UserUpdateOne {
	uuo.mutation.SetFullContactNumber(s)
	return uuo
}

// SetNillableFullContactNumber sets the "full_contact_number" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFullContactNumber(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFullContactNumber(*s)
	}
	return uuo
}

// ClearFullContactNumber clears the value of the "full_contact_number" field.
func (uuo *UserUpdateOne) ClearFullContactNumber() *UserUpdateOne {
	uuo.mutation.ClearFullContactNumber()
	return uuo
}

// SetIntroducerUserID sets the "introducer_user_id" field.
func (uuo *UserUpdateOne) SetIntroducerUserID(u uint64) *UserUpdateOne {
	uuo.mutation.SetIntroducerUserID(u)
	return uuo
}

// SetNillableIntroducerUserID sets the "introducer_user_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIntroducerUserID(u *uint64) *UserUpdateOne {
	if u != nil {
		uuo.SetIntroducerUserID(*u)
	}
	return uuo
}

// ClearIntroducerUserID clears the value of the "introducer_user_id" field.
func (uuo *UserUpdateOne) ClearIntroducerUserID() *UserUpdateOne {
	uuo.mutation.ClearIntroducerUserID()
	return uuo
}

// SetLang sets the "lang" field.
func (uuo *UserUpdateOne) SetLang(s string) *UserUpdateOne {
	uuo.mutation.SetLang(s)
	return uuo
}

// SetNillableLang sets the "lang" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLang(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLang(*s)
	}
	return uuo
}

// SetAvatar sets the "avatar" field.
func (uuo *UserUpdateOne) SetAvatar(s string) *UserUpdateOne {
	uuo.mutation.SetAvatar(s)
	return uuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatar(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatar(*s)
	}
	return uuo
}

// ClearAvatar clears the value of the "avatar" field.
func (uuo *UserUpdateOne) ClearAvatar() *UserUpdateOne {
	uuo.mutation.ClearAvatar()
	return uuo
}

// SetCredit1 sets the "credit_1" field.
func (uuo *UserUpdateOne) SetCredit1(f float64) *UserUpdateOne {
	uuo.mutation.ResetCredit1()
	uuo.mutation.SetCredit1(f)
	return uuo
}

// SetNillableCredit1 sets the "credit_1" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCredit1(f *float64) *UserUpdateOne {
	if f != nil {
		uuo.SetCredit1(*f)
	}
	return uuo
}

// AddCredit1 adds f to the "credit_1" field.
func (uuo *UserUpdateOne) AddCredit1(f float64) *UserUpdateOne {
	uuo.mutation.AddCredit1(f)
	return uuo
}

// SetCredit2 sets the "credit_2" field.
func (uuo *UserUpdateOne) SetCredit2(f float64) *UserUpdateOne {
	uuo.mutation.ResetCredit2()
	uuo.mutation.SetCredit2(f)
	return uuo
}

// SetNillableCredit2 sets the "credit_2" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCredit2(f *float64) *UserUpdateOne {
	if f != nil {
		uuo.SetCredit2(*f)
	}
	return uuo
}

// AddCredit2 adds f to the "credit_2" field.
func (uuo *UserUpdateOne) AddCredit2(f float64) *UserUpdateOne {
	uuo.mutation.AddCredit2(f)
	return uuo
}

// SetCredit3 sets the "credit_3" field.
func (uuo *UserUpdateOne) SetCredit3(f float64) *UserUpdateOne {
	uuo.mutation.ResetCredit3()
	uuo.mutation.SetCredit3(f)
	return uuo
}

// SetNillableCredit3 sets the "credit_3" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCredit3(f *float64) *UserUpdateOne {
	if f != nil {
		uuo.SetCredit3(*f)
	}
	return uuo
}

// AddCredit3 adds f to the "credit_3" field.
func (uuo *UserUpdateOne) AddCredit3(f float64) *UserUpdateOne {
	uuo.mutation.AddCredit3(f)
	return uuo
}

// SetCredit4 sets the "credit_4" field.
func (uuo *UserUpdateOne) SetCredit4(f float64) *UserUpdateOne {
	uuo.mutation.ResetCredit4()
	uuo.mutation.SetCredit4(f)
	return uuo
}

// SetNillableCredit4 sets the "credit_4" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCredit4(f *float64) *UserUpdateOne {
	if f != nil {
		uuo.SetCredit4(*f)
	}
	return uuo
}

// AddCredit4 adds f to the "credit_4" field.
func (uuo *UserUpdateOne) AddCredit4(f float64) *UserUpdateOne {
	uuo.mutation.AddCredit4(f)
	return uuo
}

// SetCredit5 sets the "credit_5" field.
func (uuo *UserUpdateOne) SetCredit5(f float64) *UserUpdateOne {
	uuo.mutation.ResetCredit5()
	uuo.mutation.SetCredit5(f)
	return uuo
}

// SetNillableCredit5 sets the "credit_5" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCredit5(f *float64) *UserUpdateOne {
	if f != nil {
		uuo.SetCredit5(*f)
	}
	return uuo
}

// AddCredit5 adds f to the "credit_5" field.
func (uuo *UserUpdateOne) AddCredit5(f float64) *UserUpdateOne {
	uuo.mutation.AddCredit5(f)
	return uuo
}

// SetBankID sets the "bank_id" field.
func (uuo *UserUpdateOne) SetBankID(u uint64) *UserUpdateOne {
	uuo.mutation.SetBankID(u)
	return uuo
}

// SetNillableBankID sets the "bank_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBankID(u *uint64) *UserUpdateOne {
	if u != nil {
		uuo.SetBankID(*u)
	}
	return uuo
}

// ClearBankID clears the value of the "bank_id" field.
func (uuo *UserUpdateOne) ClearBankID() *UserUpdateOne {
	uuo.mutation.ClearBankID()
	return uuo
}

// SetBankAccountName sets the "bank_account_name" field.
func (uuo *UserUpdateOne) SetBankAccountName(s string) *UserUpdateOne {
	uuo.mutation.SetBankAccountName(s)
	return uuo
}

// SetNillableBankAccountName sets the "bank_account_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBankAccountName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetBankAccountName(*s)
	}
	return uuo
}

// ClearBankAccountName clears the value of the "bank_account_name" field.
func (uuo *UserUpdateOne) ClearBankAccountName() *UserUpdateOne {
	uuo.mutation.ClearBankAccountName()
	return uuo
}

// SetBankAccountNumber sets the "bank_account_number" field.
func (uuo *UserUpdateOne) SetBankAccountNumber(s string) *UserUpdateOne {
	uuo.mutation.SetBankAccountNumber(s)
	return uuo
}

// SetNillableBankAccountNumber sets the "bank_account_number" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBankAccountNumber(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetBankAccountNumber(*s)
	}
	return uuo
}

// ClearBankAccountNumber clears the value of the "bank_account_number" field.
func (uuo *UserUpdateOne) ClearBankAccountNumber() *UserUpdateOne {
	uuo.mutation.ClearBankAccountNumber()
	return uuo
}

// SetNationalID sets the "national_id" field.
func (uuo *UserUpdateOne) SetNationalID(s string) *UserUpdateOne {
	uuo.mutation.SetNationalID(s)
	return uuo
}

// SetNillableNationalID sets the "national_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNationalID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNationalID(*s)
	}
	return uuo
}

// ClearNationalID clears the value of the "national_id" field.
func (uuo *UserUpdateOne) ClearNationalID() *UserUpdateOne {
	uuo.mutation.ClearNationalID()
	return uuo
}

// SetFirstLogin sets the "first_login" field.
func (uuo *UserUpdateOne) SetFirstLogin(b bool) *UserUpdateOne {
	uuo.mutation.SetFirstLogin(b)
	return uuo
}

// SetNillableFirstLogin sets the "first_login" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFirstLogin(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetFirstLogin(*b)
	}
	return uuo
}

// SetBanUntil sets the "ban_until" field.
func (uuo *UserUpdateOne) SetBanUntil(t time.Time) *UserUpdateOne {
	uuo.mutation.SetBanUntil(t)
	return uuo
}

// SetNillableBanUntil sets the "ban_until" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBanUntil(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetBanUntil(*t)
	}
	return uuo
}

// ClearBanUntil clears the value of the "ban_until" field.
func (uuo *UserUpdateOne) ClearBanUntil() *UserUpdateOne {
	uuo.mutation.ClearBanUntil()
	return uuo
}

// SetNewLoginAt sets the "new_login_at" field.
func (uuo *UserUpdateOne) SetNewLoginAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetNewLoginAt(t)
	return uuo
}

// SetNillableNewLoginAt sets the "new_login_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNewLoginAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetNewLoginAt(*t)
	}
	return uuo
}

// ClearNewLoginAt clears the value of the "new_login_at" field.
func (uuo *UserUpdateOne) ClearNewLoginAt() *UserUpdateOne {
	uuo.mutation.ClearNewLoginAt()
	return uuo
}

// SetLastLoginAt sets the "last_login_at" field.
func (uuo *UserUpdateOne) SetLastLoginAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastLoginAt(t)
	return uuo
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLoginAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastLoginAt(*t)
	}
	return uuo
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (uuo *UserUpdateOne) ClearLastLoginAt() *UserUpdateOne {
	uuo.mutation.ClearLastLoginAt()
	return uuo
}

// SetUnilevel sets the "unilevel" field.
func (uuo *UserUpdateOne) SetUnilevel(u uint64) *UserUpdateOne {
	uuo.mutation.ResetUnilevel()
	uuo.mutation.SetUnilevel(u)
	return uuo
}

// SetNillableUnilevel sets the "unilevel" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUnilevel(u *uint64) *UserUpdateOne {
	if u != nil {
		uuo.SetUnilevel(*u)
	}
	return uuo
}

// AddUnilevel adds u to the "unilevel" field.
func (uuo *UserUpdateOne) AddUnilevel(u int64) *UserUpdateOne {
	uuo.mutation.AddUnilevel(u)
	return uuo
}

// ClearUnilevel clears the value of the "unilevel" field.
func (uuo *UserUpdateOne) ClearUnilevel() *UserUpdateOne {
	uuo.mutation.ClearUnilevel()
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uuo *UserUpdateOne) SetDeletedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDeletedAt(t)
	return uuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDeletedAt(*t)
	}
	return uuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uuo *UserUpdateOne) ClearDeletedAt() *UserUpdateOne {
	uuo.mutation.ClearDeletedAt()
	return uuo
}

// SetCountry sets the "country" edge to the Country entity.
func (uuo *UserUpdateOne) SetCountry(c *Country) *UserUpdateOne {
	return uuo.SetCountryID(c.ID)
}

// SetContactCountry sets the "contact_country" edge to the Country entity.
func (uuo *UserUpdateOne) SetContactCountry(c *Country) *UserUpdateOne {
	return uuo.SetContactCountryID(c.ID)
}

// SetIntroducerID sets the "introducer" edge to the User entity by ID.
func (uuo *UserUpdateOne) SetIntroducerID(id uint64) *UserUpdateOne {
	uuo.mutation.SetIntroducerID(id)
	return uuo
}

// SetNillableIntroducerID sets the "introducer" edge to the User entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIntroducerID(id *uint64) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetIntroducerID(*id)
	}
	return uuo
}

// SetIntroducer sets the "introducer" edge to the User entity.
func (uuo *UserUpdateOne) SetIntroducer(u *User) *UserUpdateOne {
	return uuo.SetIntroducerID(u.ID)
}

// SetBank sets the "bank" edge to the Bank entity.
func (uuo *UserUpdateOne) SetBank(b *Bank) *UserUpdateOne {
	return uuo.SetBankID(b.ID)
}

// AddIntroducedUserIDs adds the "introduced_users" edge to the User entity by IDs.
func (uuo *UserUpdateOne) AddIntroducedUserIDs(ids ...uint64) *UserUpdateOne {
	uuo.mutation.AddIntroducedUserIDs(ids...)
	return uuo
}

// AddIntroducedUsers adds the "introduced_users" edges to the User entity.
func (uuo *UserUpdateOne) AddIntroducedUsers(u ...*User) *UserUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddIntroducedUserIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearCountry clears the "country" edge to the Country entity.
func (uuo *UserUpdateOne) ClearCountry() *UserUpdateOne {
	uuo.mutation.ClearCountry()
	return uuo
}

// ClearContactCountry clears the "contact_country" edge to the Country entity.
func (uuo *UserUpdateOne) ClearContactCountry() *UserUpdateOne {
	uuo.mutation.ClearContactCountry()
	return uuo
}

// ClearIntroducer clears the "introducer" edge to the User entity.
func (uuo *UserUpdateOne) ClearIntroducer() *UserUpdateOne {
	uuo.mutation.ClearIntroducer()
	return uuo
}

// ClearBank clears the "bank" edge to the Bank entity.
func (uuo *UserUpdateOne) ClearBank() *UserUpdateOne {
	uuo.mutation.ClearBank()
	return uuo
}

// ClearIntroducedUsers clears all "introduced_users" edges to the User entity.
func (uuo *UserUpdateOne) ClearIntroducedUsers() *UserUpdateOne {
	uuo.mutation.ClearIntroducedUsers()
	return uuo
}

// RemoveIntroducedUserIDs removes the "introduced_users" edge to User entities by IDs.
func (uuo *UserUpdateOne) RemoveIntroducedUserIDs(ids ...uint64) *UserUpdateOne {
	uuo.mutation.RemoveIntroducedUserIDs(ids...)
	return uuo
}

// RemoveIntroducedUsers removes "introduced_users" edges to User entities.
func (uuo *UserUpdateOne) RemoveIntroducedUsers(u ...*User) *UserUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveIntroducedUserIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Password2(); ok {
		if err := user.Password2Validator(v); err != nil {
			return &ValidationError{Name: "password2", err: fmt.Errorf(`ent: validator failed for field "User.password2": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if uuo.mutation.UsernameCleared() {
		_spec.ClearField(user.FieldUsername, field.TypeString)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if uuo.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uuo.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uuo.mutation.EmailVerifiedAt(); ok {
		_spec.SetField(user.FieldEmailVerifiedAt, field.TypeTime, value)
	}
	if uuo.mutation.EmailVerifiedAtCleared() {
		_spec.ClearField(user.FieldEmailVerifiedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password2(); ok {
		_spec.SetField(user.FieldPassword2, field.TypeString, value)
	}
	if value, ok := uuo.mutation.ContactNumber(); ok {
		_spec.SetField(user.FieldContactNumber, field.TypeString, value)
	}
	if uuo.mutation.ContactNumberCleared() {
		_spec.ClearField(user.FieldContactNumber, field.TypeString)
	}
	if value, ok := uuo.mutation.FullContactNumber(); ok {
		_spec.SetField(user.FieldFullContactNumber, field.TypeString, value)
	}
	if uuo.mutation.FullContactNumberCleared() {
		_spec.ClearField(user.FieldFullContactNumber, field.TypeString)
	}
	if value, ok := uuo.mutation.Lang(); ok {
		_spec.SetField(user.FieldLang, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if uuo.mutation.AvatarCleared() {
		_spec.ClearField(user.FieldAvatar, field.TypeString)
	}
	if value, ok := uuo.mutation.Credit1(); ok {
		_spec.SetField(user.FieldCredit1, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.AddedCredit1(); ok {
		_spec.AddField(user.FieldCredit1, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.Credit2(); ok {
		_spec.SetField(user.FieldCredit2, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.AddedCredit2(); ok {
		_spec.AddField(user.FieldCredit2, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.Credit3(); ok {
		_spec.SetField(user.FieldCredit3, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.AddedCredit3(); ok {
		_spec.AddField(user.FieldCredit3, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.Credit4(); ok {
		_spec.SetField(user.FieldCredit4, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.AddedCredit4(); ok {
		_spec.AddField(user.FieldCredit4, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.Credit5(); ok {
		_spec.SetField(user.FieldCredit5, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.AddedCredit5(); ok {
		_spec.AddField(user.FieldCredit5, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.BankAccountName(); ok {
		_spec.SetField(user.FieldBankAccountName, field.TypeString, value)
	}
	if uuo.mutation.BankAccountNameCleared() {
		_spec.ClearField(user.FieldBankAccountName, field.TypeString)
	}
	if value, ok := uuo.mutation.BankAccountNumber(); ok {
		_spec.SetField(user.FieldBankAccountNumber, field.TypeString, value)
	}
	if uuo.mutation.BankAccountNumberCleared() {
		_spec.ClearField(user.FieldBankAccountNumber, field.TypeString)
	}
	if value, ok := uuo.mutation.NationalID(); ok {
		_spec.SetField(user.FieldNationalID, field.TypeString, value)
	}
	if uuo.mutation.NationalIDCleared() {
		_spec.ClearField(user.FieldNationalID, field.TypeString)
	}
	if value, ok := uuo.mutation.FirstLogin(); ok {
		_spec.SetField(user.FieldFirstLogin, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.BanUntil(); ok {
		_spec.SetField(user.FieldBanUntil, field.TypeTime, value)
	}
	if uuo.mutation.BanUntilCleared() {
		_spec.ClearField(user.FieldBanUntil, field.TypeTime)
	}
	if value, ok := uuo.mutation.NewLoginAt(); ok {
		_spec.SetField(user.FieldNewLoginAt, field.TypeTime, value)
	}
	if uuo.mutation.NewLoginAtCleared() {
		_spec.ClearField(user.FieldNewLoginAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
	}
	if uuo.mutation.LastLoginAtCleared() {
		_spec.ClearField(user.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.Unilevel(); ok {
		_spec.SetField(user.FieldUnilevel, field.TypeUint64, value)
	}
	if value, ok := uuo.mutation.AddedUnilevel(); ok {
		_spec.AddField(user.FieldUnilevel, field.TypeUint64, value)
	}
	if uuo.mutation.UnilevelCleared() {
		_spec.ClearField(user.FieldUnilevel, field.TypeUint64)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uuo.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if uuo.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.CountryTable,
			Columns: []string{user.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.CountryTable,
			Columns: []string{user.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ContactCountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ContactCountryTable,
			Columns: []string{user.ContactCountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ContactCountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ContactCountryTable,
			Columns: []string{user.ContactCountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.IntroducerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.IntroducerTable,
			Columns: []string{user.IntroducerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.IntroducerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.IntroducerTable,
			Columns: []string{user.IntroducerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.BankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BankTable,
			Columns: []string{user.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BankTable,
			Columns: []string{user.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.IntroducedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IntroducedUsersTable,
			Columns: []string{user.IntroducedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedIntroducedUsersIDs(); len(nodes) > 0 && !uuo.mutation.IntroducedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IntroducedUsersTable,
			Columns: []string{user.IntroducedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.IntroducedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IntroducedUsersTable,
			Columns: []string{user.IntroducedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
