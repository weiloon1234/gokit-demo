// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gokit-demo/ent/admin"
	"gokit-demo/ent/bank"
	"gokit-demo/ent/country"
	"gokit-demo/ent/countrylocation"
	"gokit-demo/ent/predicate"
	"gokit-demo/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAdmin           = "Admin"
	TypeBank            = "Bank"
	TypeCountry         = "Country"
	TypeCountryLocation = "CountryLocation"
	TypeUser            = "User"
)

// AdminMutation represents an operation that mutates the Admin nodes in the graph.
type AdminMutation struct {
	config
	op                Op
	typ               string
	id                *uint64
	username          *string
	name              *string
	email             *string
	email_verified_at *time.Time
	password          *string
	password2         *string
	lang              *string
	avatar            *string
	_type             *uint8
	add_type          *int8
	created_at        *time.Time
	updated_at        *time.Time
	deleted_at        *time.Time
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Admin, error)
	predicates        []predicate.Admin
}

var _ ent.Mutation = (*AdminMutation)(nil)

// adminOption allows management of the mutation configuration using functional options.
type adminOption func(*AdminMutation)

// newAdminMutation creates new mutation for the Admin entity.
func newAdminMutation(c config, op Op, opts ...adminOption) *AdminMutation {
	m := &AdminMutation{
		config:        c,
		op:            op,
		typ:           TypeAdmin,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdminID sets the ID field of the mutation.
func withAdminID(id uint64) adminOption {
	return func(m *AdminMutation) {
		var (
			err   error
			once  sync.Once
			value *Admin
		)
		m.oldValue = func(ctx context.Context) (*Admin, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Admin.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdmin sets the old Admin of the mutation.
func withAdmin(node *Admin) adminOption {
	return func(m *AdminMutation) {
		m.oldValue = func(context.Context) (*Admin, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdminMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdminMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Admin entities.
func (m *AdminMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AdminMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AdminMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Admin.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *AdminMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *AdminMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ClearUsername clears the value of the "username" field.
func (m *AdminMutation) ClearUsername() {
	m.username = nil
	m.clearedFields[admin.FieldUsername] = struct{}{}
}

// UsernameCleared returns if the "username" field was cleared in this mutation.
func (m *AdminMutation) UsernameCleared() bool {
	_, ok := m.clearedFields[admin.FieldUsername]
	return ok
}

// ResetUsername resets all changes to the "username" field.
func (m *AdminMutation) ResetUsername() {
	m.username = nil
	delete(m.clearedFields, admin.FieldUsername)
}

// SetName sets the "name" field.
func (m *AdminMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AdminMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *AdminMutation) ClearName() {
	m.name = nil
	m.clearedFields[admin.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *AdminMutation) NameCleared() bool {
	_, ok := m.clearedFields[admin.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *AdminMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, admin.FieldName)
}

// SetEmail sets the "email" field.
func (m *AdminMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *AdminMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *AdminMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[admin.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *AdminMutation) EmailCleared() bool {
	_, ok := m.clearedFields[admin.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *AdminMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, admin.FieldEmail)
}

// SetEmailVerifiedAt sets the "email_verified_at" field.
func (m *AdminMutation) SetEmailVerifiedAt(t time.Time) {
	m.email_verified_at = &t
}

// EmailVerifiedAt returns the value of the "email_verified_at" field in the mutation.
func (m *AdminMutation) EmailVerifiedAt() (r time.Time, exists bool) {
	v := m.email_verified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailVerifiedAt returns the old "email_verified_at" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldEmailVerifiedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailVerifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailVerifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailVerifiedAt: %w", err)
	}
	return oldValue.EmailVerifiedAt, nil
}

// ClearEmailVerifiedAt clears the value of the "email_verified_at" field.
func (m *AdminMutation) ClearEmailVerifiedAt() {
	m.email_verified_at = nil
	m.clearedFields[admin.FieldEmailVerifiedAt] = struct{}{}
}

// EmailVerifiedAtCleared returns if the "email_verified_at" field was cleared in this mutation.
func (m *AdminMutation) EmailVerifiedAtCleared() bool {
	_, ok := m.clearedFields[admin.FieldEmailVerifiedAt]
	return ok
}

// ResetEmailVerifiedAt resets all changes to the "email_verified_at" field.
func (m *AdminMutation) ResetEmailVerifiedAt() {
	m.email_verified_at = nil
	delete(m.clearedFields, admin.FieldEmailVerifiedAt)
}

// SetPassword sets the "password" field.
func (m *AdminMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *AdminMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *AdminMutation) ResetPassword() {
	m.password = nil
}

// SetPassword2 sets the "password2" field.
func (m *AdminMutation) SetPassword2(s string) {
	m.password2 = &s
}

// Password2 returns the value of the "password2" field in the mutation.
func (m *AdminMutation) Password2() (r string, exists bool) {
	v := m.password2
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword2 returns the old "password2" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldPassword2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword2: %w", err)
	}
	return oldValue.Password2, nil
}

// ResetPassword2 resets all changes to the "password2" field.
func (m *AdminMutation) ResetPassword2() {
	m.password2 = nil
}

// SetLang sets the "lang" field.
func (m *AdminMutation) SetLang(s string) {
	m.lang = &s
}

// Lang returns the value of the "lang" field in the mutation.
func (m *AdminMutation) Lang() (r string, exists bool) {
	v := m.lang
	if v == nil {
		return
	}
	return *v, true
}

// OldLang returns the old "lang" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldLang(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLang is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLang requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLang: %w", err)
	}
	return oldValue.Lang, nil
}

// ResetLang resets all changes to the "lang" field.
func (m *AdminMutation) ResetLang() {
	m.lang = nil
}

// SetAvatar sets the "avatar" field.
func (m *AdminMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *AdminMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldAvatar(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ClearAvatar clears the value of the "avatar" field.
func (m *AdminMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[admin.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the "avatar" field was cleared in this mutation.
func (m *AdminMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[admin.FieldAvatar]
	return ok
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *AdminMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, admin.FieldAvatar)
}

// SetType sets the "type" field.
func (m *AdminMutation) SetType(u uint8) {
	m._type = &u
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *AdminMutation) GetType() (r uint8, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldType(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds u to the "type" field.
func (m *AdminMutation) AddType(u int8) {
	if m.add_type != nil {
		*m.add_type += u
	} else {
		m.add_type = &u
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *AdminMutation) AddedType() (r int8, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *AdminMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *AdminMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AdminMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AdminMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AdminMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AdminMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AdminMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AdminMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AdminMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *AdminMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[admin.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *AdminMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[admin.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AdminMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, admin.FieldDeletedAt)
}

// Where appends a list predicates to the AdminMutation builder.
func (m *AdminMutation) Where(ps ...predicate.Admin) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AdminMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AdminMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Admin, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AdminMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AdminMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Admin).
func (m *AdminMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdminMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.username != nil {
		fields = append(fields, admin.FieldUsername)
	}
	if m.name != nil {
		fields = append(fields, admin.FieldName)
	}
	if m.email != nil {
		fields = append(fields, admin.FieldEmail)
	}
	if m.email_verified_at != nil {
		fields = append(fields, admin.FieldEmailVerifiedAt)
	}
	if m.password != nil {
		fields = append(fields, admin.FieldPassword)
	}
	if m.password2 != nil {
		fields = append(fields, admin.FieldPassword2)
	}
	if m.lang != nil {
		fields = append(fields, admin.FieldLang)
	}
	if m.avatar != nil {
		fields = append(fields, admin.FieldAvatar)
	}
	if m._type != nil {
		fields = append(fields, admin.FieldType)
	}
	if m.created_at != nil {
		fields = append(fields, admin.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, admin.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, admin.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdminMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case admin.FieldUsername:
		return m.Username()
	case admin.FieldName:
		return m.Name()
	case admin.FieldEmail:
		return m.Email()
	case admin.FieldEmailVerifiedAt:
		return m.EmailVerifiedAt()
	case admin.FieldPassword:
		return m.Password()
	case admin.FieldPassword2:
		return m.Password2()
	case admin.FieldLang:
		return m.Lang()
	case admin.FieldAvatar:
		return m.Avatar()
	case admin.FieldType:
		return m.GetType()
	case admin.FieldCreatedAt:
		return m.CreatedAt()
	case admin.FieldUpdatedAt:
		return m.UpdatedAt()
	case admin.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdminMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case admin.FieldUsername:
		return m.OldUsername(ctx)
	case admin.FieldName:
		return m.OldName(ctx)
	case admin.FieldEmail:
		return m.OldEmail(ctx)
	case admin.FieldEmailVerifiedAt:
		return m.OldEmailVerifiedAt(ctx)
	case admin.FieldPassword:
		return m.OldPassword(ctx)
	case admin.FieldPassword2:
		return m.OldPassword2(ctx)
	case admin.FieldLang:
		return m.OldLang(ctx)
	case admin.FieldAvatar:
		return m.OldAvatar(ctx)
	case admin.FieldType:
		return m.OldType(ctx)
	case admin.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case admin.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case admin.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Admin field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminMutation) SetField(name string, value ent.Value) error {
	switch name {
	case admin.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case admin.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case admin.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case admin.FieldEmailVerifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailVerifiedAt(v)
		return nil
	case admin.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case admin.FieldPassword2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword2(v)
		return nil
	case admin.FieldLang:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLang(v)
		return nil
	case admin.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case admin.FieldType:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case admin.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case admin.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case admin.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Admin field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdminMutation) AddedFields() []string {
	var fields []string
	if m.add_type != nil {
		fields = append(fields, admin.FieldType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdminMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case admin.FieldType:
		return m.AddedType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminMutation) AddField(name string, value ent.Value) error {
	switch name {
	case admin.FieldType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	}
	return fmt.Errorf("unknown Admin numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdminMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(admin.FieldUsername) {
		fields = append(fields, admin.FieldUsername)
	}
	if m.FieldCleared(admin.FieldName) {
		fields = append(fields, admin.FieldName)
	}
	if m.FieldCleared(admin.FieldEmail) {
		fields = append(fields, admin.FieldEmail)
	}
	if m.FieldCleared(admin.FieldEmailVerifiedAt) {
		fields = append(fields, admin.FieldEmailVerifiedAt)
	}
	if m.FieldCleared(admin.FieldAvatar) {
		fields = append(fields, admin.FieldAvatar)
	}
	if m.FieldCleared(admin.FieldDeletedAt) {
		fields = append(fields, admin.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdminMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdminMutation) ClearField(name string) error {
	switch name {
	case admin.FieldUsername:
		m.ClearUsername()
		return nil
	case admin.FieldName:
		m.ClearName()
		return nil
	case admin.FieldEmail:
		m.ClearEmail()
		return nil
	case admin.FieldEmailVerifiedAt:
		m.ClearEmailVerifiedAt()
		return nil
	case admin.FieldAvatar:
		m.ClearAvatar()
		return nil
	case admin.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Admin nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdminMutation) ResetField(name string) error {
	switch name {
	case admin.FieldUsername:
		m.ResetUsername()
		return nil
	case admin.FieldName:
		m.ResetName()
		return nil
	case admin.FieldEmail:
		m.ResetEmail()
		return nil
	case admin.FieldEmailVerifiedAt:
		m.ResetEmailVerifiedAt()
		return nil
	case admin.FieldPassword:
		m.ResetPassword()
		return nil
	case admin.FieldPassword2:
		m.ResetPassword2()
		return nil
	case admin.FieldLang:
		m.ResetLang()
		return nil
	case admin.FieldAvatar:
		m.ResetAvatar()
		return nil
	case admin.FieldType:
		m.ResetType()
		return nil
	case admin.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case admin.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case admin.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Admin field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdminMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdminMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdminMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdminMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdminMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdminMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdminMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Admin unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdminMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Admin edge %s", name)
}

// BankMutation represents an operation that mutates the Bank nodes in the graph.
type BankMutation struct {
	config
	op             Op
	typ            string
	id             *uint64
	name_en        *string
	name_zh        *string
	created_at     *time.Time
	updated_at     *time.Time
	deleted_at     *time.Time
	clearedFields  map[string]struct{}
	country        *uint64
	clearedcountry bool
	users          map[uint64]struct{}
	removedusers   map[uint64]struct{}
	clearedusers   bool
	done           bool
	oldValue       func(context.Context) (*Bank, error)
	predicates     []predicate.Bank
}

var _ ent.Mutation = (*BankMutation)(nil)

// bankOption allows management of the mutation configuration using functional options.
type bankOption func(*BankMutation)

// newBankMutation creates new mutation for the Bank entity.
func newBankMutation(c config, op Op, opts ...bankOption) *BankMutation {
	m := &BankMutation{
		config:        c,
		op:            op,
		typ:           TypeBank,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBankID sets the ID field of the mutation.
func withBankID(id uint64) bankOption {
	return func(m *BankMutation) {
		var (
			err   error
			once  sync.Once
			value *Bank
		)
		m.oldValue = func(ctx context.Context) (*Bank, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Bank.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBank sets the old Bank of the mutation.
func withBank(node *Bank) bankOption {
	return func(m *BankMutation) {
		m.oldValue = func(context.Context) (*Bank, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BankMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BankMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Bank entities.
func (m *BankMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BankMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BankMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Bank.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNameEn sets the "name_en" field.
func (m *BankMutation) SetNameEn(s string) {
	m.name_en = &s
}

// NameEn returns the value of the "name_en" field in the mutation.
func (m *BankMutation) NameEn() (r string, exists bool) {
	v := m.name_en
	if v == nil {
		return
	}
	return *v, true
}

// OldNameEn returns the old "name_en" field's value of the Bank entity.
// If the Bank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankMutation) OldNameEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameEn: %w", err)
	}
	return oldValue.NameEn, nil
}

// ResetNameEn resets all changes to the "name_en" field.
func (m *BankMutation) ResetNameEn() {
	m.name_en = nil
}

// SetNameZh sets the "name_zh" field.
func (m *BankMutation) SetNameZh(s string) {
	m.name_zh = &s
}

// NameZh returns the value of the "name_zh" field in the mutation.
func (m *BankMutation) NameZh() (r string, exists bool) {
	v := m.name_zh
	if v == nil {
		return
	}
	return *v, true
}

// OldNameZh returns the old "name_zh" field's value of the Bank entity.
// If the Bank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankMutation) OldNameZh(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameZh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameZh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameZh: %w", err)
	}
	return oldValue.NameZh, nil
}

// ResetNameZh resets all changes to the "name_zh" field.
func (m *BankMutation) ResetNameZh() {
	m.name_zh = nil
}

// SetCountryID sets the "country_id" field.
func (m *BankMutation) SetCountryID(u uint64) {
	m.country = &u
}

// CountryID returns the value of the "country_id" field in the mutation.
func (m *BankMutation) CountryID() (r uint64, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountryID returns the old "country_id" field's value of the Bank entity.
// If the Bank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankMutation) OldCountryID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountryID: %w", err)
	}
	return oldValue.CountryID, nil
}

// ClearCountryID clears the value of the "country_id" field.
func (m *BankMutation) ClearCountryID() {
	m.country = nil
	m.clearedFields[bank.FieldCountryID] = struct{}{}
}

// CountryIDCleared returns if the "country_id" field was cleared in this mutation.
func (m *BankMutation) CountryIDCleared() bool {
	_, ok := m.clearedFields[bank.FieldCountryID]
	return ok
}

// ResetCountryID resets all changes to the "country_id" field.
func (m *BankMutation) ResetCountryID() {
	m.country = nil
	delete(m.clearedFields, bank.FieldCountryID)
}

// SetCreatedAt sets the "created_at" field.
func (m *BankMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BankMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Bank entity.
// If the Bank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BankMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BankMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BankMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Bank entity.
// If the Bank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BankMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *BankMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *BankMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Bank entity.
// If the Bank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *BankMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[bank.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *BankMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[bank.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *BankMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, bank.FieldDeletedAt)
}

// ClearCountry clears the "country" edge to the Country entity.
func (m *BankMutation) ClearCountry() {
	m.clearedcountry = true
	m.clearedFields[bank.FieldCountryID] = struct{}{}
}

// CountryCleared reports if the "country" edge to the Country entity was cleared.
func (m *BankMutation) CountryCleared() bool {
	return m.CountryIDCleared() || m.clearedcountry
}

// CountryIDs returns the "country" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CountryID instead. It exists only for internal usage by the builders.
func (m *BankMutation) CountryIDs() (ids []uint64) {
	if id := m.country; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCountry resets all changes to the "country" edge.
func (m *BankMutation) ResetCountry() {
	m.country = nil
	m.clearedcountry = false
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *BankMutation) AddUserIDs(ids ...uint64) {
	if m.users == nil {
		m.users = make(map[uint64]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *BankMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *BankMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *BankMutation) RemoveUserIDs(ids ...uint64) {
	if m.removedusers == nil {
		m.removedusers = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *BankMutation) RemovedUsersIDs() (ids []uint64) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *BankMutation) UsersIDs() (ids []uint64) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *BankMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// Where appends a list predicates to the BankMutation builder.
func (m *BankMutation) Where(ps ...predicate.Bank) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BankMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BankMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Bank, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BankMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BankMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Bank).
func (m *BankMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BankMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name_en != nil {
		fields = append(fields, bank.FieldNameEn)
	}
	if m.name_zh != nil {
		fields = append(fields, bank.FieldNameZh)
	}
	if m.country != nil {
		fields = append(fields, bank.FieldCountryID)
	}
	if m.created_at != nil {
		fields = append(fields, bank.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, bank.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, bank.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BankMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bank.FieldNameEn:
		return m.NameEn()
	case bank.FieldNameZh:
		return m.NameZh()
	case bank.FieldCountryID:
		return m.CountryID()
	case bank.FieldCreatedAt:
		return m.CreatedAt()
	case bank.FieldUpdatedAt:
		return m.UpdatedAt()
	case bank.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BankMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bank.FieldNameEn:
		return m.OldNameEn(ctx)
	case bank.FieldNameZh:
		return m.OldNameZh(ctx)
	case bank.FieldCountryID:
		return m.OldCountryID(ctx)
	case bank.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case bank.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case bank.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Bank field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BankMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bank.FieldNameEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameEn(v)
		return nil
	case bank.FieldNameZh:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameZh(v)
		return nil
	case bank.FieldCountryID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountryID(v)
		return nil
	case bank.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case bank.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case bank.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Bank field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BankMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BankMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BankMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Bank numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BankMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(bank.FieldCountryID) {
		fields = append(fields, bank.FieldCountryID)
	}
	if m.FieldCleared(bank.FieldDeletedAt) {
		fields = append(fields, bank.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BankMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BankMutation) ClearField(name string) error {
	switch name {
	case bank.FieldCountryID:
		m.ClearCountryID()
		return nil
	case bank.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Bank nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BankMutation) ResetField(name string) error {
	switch name {
	case bank.FieldNameEn:
		m.ResetNameEn()
		return nil
	case bank.FieldNameZh:
		m.ResetNameZh()
		return nil
	case bank.FieldCountryID:
		m.ResetCountryID()
		return nil
	case bank.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case bank.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case bank.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Bank field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BankMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.country != nil {
		edges = append(edges, bank.EdgeCountry)
	}
	if m.users != nil {
		edges = append(edges, bank.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BankMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bank.EdgeCountry:
		if id := m.country; id != nil {
			return []ent.Value{*id}
		}
	case bank.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BankMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedusers != nil {
		edges = append(edges, bank.EdgeUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BankMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case bank.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BankMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcountry {
		edges = append(edges, bank.EdgeCountry)
	}
	if m.clearedusers {
		edges = append(edges, bank.EdgeUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BankMutation) EdgeCleared(name string) bool {
	switch name {
	case bank.EdgeCountry:
		return m.clearedcountry
	case bank.EdgeUsers:
		return m.clearedusers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BankMutation) ClearEdge(name string) error {
	switch name {
	case bank.EdgeCountry:
		m.ClearCountry()
		return nil
	}
	return fmt.Errorf("unknown Bank unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BankMutation) ResetEdge(name string) error {
	switch name {
	case bank.EdgeCountry:
		m.ResetCountry()
		return nil
	case bank.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown Bank edge %s", name)
}

// CountryMutation represents an operation that mutates the Country nodes in the graph.
type CountryMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uint64
	iso2                 *string
	iso3                 *string
	name                 *string
	official_name        *string
	numeric_code         *string
	phone_code           *string
	capital              *string
	currency_name        *string
	currency_code        *string
	currency_symbol      *string
	conversion_rate      *float64
	addconversion_rate   *float64
	status               *uint8
	addstatus            *int8
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	locations            map[uint64]struct{}
	removedlocations     map[uint64]struct{}
	clearedlocations     bool
	banks                map[uint64]struct{}
	removedbanks         map[uint64]struct{}
	clearedbanks         bool
	users                map[uint64]struct{}
	removedusers         map[uint64]struct{}
	clearedusers         bool
	contact_users        map[uint64]struct{}
	removedcontact_users map[uint64]struct{}
	clearedcontact_users bool
	done                 bool
	oldValue             func(context.Context) (*Country, error)
	predicates           []predicate.Country
}

var _ ent.Mutation = (*CountryMutation)(nil)

// countryOption allows management of the mutation configuration using functional options.
type countryOption func(*CountryMutation)

// newCountryMutation creates new mutation for the Country entity.
func newCountryMutation(c config, op Op, opts ...countryOption) *CountryMutation {
	m := &CountryMutation{
		config:        c,
		op:            op,
		typ:           TypeCountry,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCountryID sets the ID field of the mutation.
func withCountryID(id uint64) countryOption {
	return func(m *CountryMutation) {
		var (
			err   error
			once  sync.Once
			value *Country
		)
		m.oldValue = func(ctx context.Context) (*Country, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Country.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCountry sets the old Country of the mutation.
func withCountry(node *Country) countryOption {
	return func(m *CountryMutation) {
		m.oldValue = func(context.Context) (*Country, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CountryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CountryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Country entities.
func (m *CountryMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CountryMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CountryMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Country.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIso2 sets the "iso2" field.
func (m *CountryMutation) SetIso2(s string) {
	m.iso2 = &s
}

// Iso2 returns the value of the "iso2" field in the mutation.
func (m *CountryMutation) Iso2() (r string, exists bool) {
	v := m.iso2
	if v == nil {
		return
	}
	return *v, true
}

// OldIso2 returns the old "iso2" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldIso2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIso2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIso2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIso2: %w", err)
	}
	return oldValue.Iso2, nil
}

// ResetIso2 resets all changes to the "iso2" field.
func (m *CountryMutation) ResetIso2() {
	m.iso2 = nil
}

// SetIso3 sets the "iso3" field.
func (m *CountryMutation) SetIso3(s string) {
	m.iso3 = &s
}

// Iso3 returns the value of the "iso3" field in the mutation.
func (m *CountryMutation) Iso3() (r string, exists bool) {
	v := m.iso3
	if v == nil {
		return
	}
	return *v, true
}

// OldIso3 returns the old "iso3" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldIso3(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIso3 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIso3 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIso3: %w", err)
	}
	return oldValue.Iso3, nil
}

// ResetIso3 resets all changes to the "iso3" field.
func (m *CountryMutation) ResetIso3() {
	m.iso3 = nil
}

// SetName sets the "name" field.
func (m *CountryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CountryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CountryMutation) ResetName() {
	m.name = nil
}

// SetOfficialName sets the "official_name" field.
func (m *CountryMutation) SetOfficialName(s string) {
	m.official_name = &s
}

// OfficialName returns the value of the "official_name" field in the mutation.
func (m *CountryMutation) OfficialName() (r string, exists bool) {
	v := m.official_name
	if v == nil {
		return
	}
	return *v, true
}

// OldOfficialName returns the old "official_name" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldOfficialName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOfficialName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOfficialName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOfficialName: %w", err)
	}
	return oldValue.OfficialName, nil
}

// ClearOfficialName clears the value of the "official_name" field.
func (m *CountryMutation) ClearOfficialName() {
	m.official_name = nil
	m.clearedFields[country.FieldOfficialName] = struct{}{}
}

// OfficialNameCleared returns if the "official_name" field was cleared in this mutation.
func (m *CountryMutation) OfficialNameCleared() bool {
	_, ok := m.clearedFields[country.FieldOfficialName]
	return ok
}

// ResetOfficialName resets all changes to the "official_name" field.
func (m *CountryMutation) ResetOfficialName() {
	m.official_name = nil
	delete(m.clearedFields, country.FieldOfficialName)
}

// SetNumericCode sets the "numeric_code" field.
func (m *CountryMutation) SetNumericCode(s string) {
	m.numeric_code = &s
}

// NumericCode returns the value of the "numeric_code" field in the mutation.
func (m *CountryMutation) NumericCode() (r string, exists bool) {
	v := m.numeric_code
	if v == nil {
		return
	}
	return *v, true
}

// OldNumericCode returns the old "numeric_code" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldNumericCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumericCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumericCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumericCode: %w", err)
	}
	return oldValue.NumericCode, nil
}

// ClearNumericCode clears the value of the "numeric_code" field.
func (m *CountryMutation) ClearNumericCode() {
	m.numeric_code = nil
	m.clearedFields[country.FieldNumericCode] = struct{}{}
}

// NumericCodeCleared returns if the "numeric_code" field was cleared in this mutation.
func (m *CountryMutation) NumericCodeCleared() bool {
	_, ok := m.clearedFields[country.FieldNumericCode]
	return ok
}

// ResetNumericCode resets all changes to the "numeric_code" field.
func (m *CountryMutation) ResetNumericCode() {
	m.numeric_code = nil
	delete(m.clearedFields, country.FieldNumericCode)
}

// SetPhoneCode sets the "phone_code" field.
func (m *CountryMutation) SetPhoneCode(s string) {
	m.phone_code = &s
}

// PhoneCode returns the value of the "phone_code" field in the mutation.
func (m *CountryMutation) PhoneCode() (r string, exists bool) {
	v := m.phone_code
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneCode returns the old "phone_code" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldPhoneCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneCode: %w", err)
	}
	return oldValue.PhoneCode, nil
}

// ClearPhoneCode clears the value of the "phone_code" field.
func (m *CountryMutation) ClearPhoneCode() {
	m.phone_code = nil
	m.clearedFields[country.FieldPhoneCode] = struct{}{}
}

// PhoneCodeCleared returns if the "phone_code" field was cleared in this mutation.
func (m *CountryMutation) PhoneCodeCleared() bool {
	_, ok := m.clearedFields[country.FieldPhoneCode]
	return ok
}

// ResetPhoneCode resets all changes to the "phone_code" field.
func (m *CountryMutation) ResetPhoneCode() {
	m.phone_code = nil
	delete(m.clearedFields, country.FieldPhoneCode)
}

// SetCapital sets the "capital" field.
func (m *CountryMutation) SetCapital(s string) {
	m.capital = &s
}

// Capital returns the value of the "capital" field in the mutation.
func (m *CountryMutation) Capital() (r string, exists bool) {
	v := m.capital
	if v == nil {
		return
	}
	return *v, true
}

// OldCapital returns the old "capital" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldCapital(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCapital is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCapital requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCapital: %w", err)
	}
	return oldValue.Capital, nil
}

// ClearCapital clears the value of the "capital" field.
func (m *CountryMutation) ClearCapital() {
	m.capital = nil
	m.clearedFields[country.FieldCapital] = struct{}{}
}

// CapitalCleared returns if the "capital" field was cleared in this mutation.
func (m *CountryMutation) CapitalCleared() bool {
	_, ok := m.clearedFields[country.FieldCapital]
	return ok
}

// ResetCapital resets all changes to the "capital" field.
func (m *CountryMutation) ResetCapital() {
	m.capital = nil
	delete(m.clearedFields, country.FieldCapital)
}

// SetCurrencyName sets the "currency_name" field.
func (m *CountryMutation) SetCurrencyName(s string) {
	m.currency_name = &s
}

// CurrencyName returns the value of the "currency_name" field in the mutation.
func (m *CountryMutation) CurrencyName() (r string, exists bool) {
	v := m.currency_name
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrencyName returns the old "currency_name" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldCurrencyName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrencyName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrencyName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrencyName: %w", err)
	}
	return oldValue.CurrencyName, nil
}

// ClearCurrencyName clears the value of the "currency_name" field.
func (m *CountryMutation) ClearCurrencyName() {
	m.currency_name = nil
	m.clearedFields[country.FieldCurrencyName] = struct{}{}
}

// CurrencyNameCleared returns if the "currency_name" field was cleared in this mutation.
func (m *CountryMutation) CurrencyNameCleared() bool {
	_, ok := m.clearedFields[country.FieldCurrencyName]
	return ok
}

// ResetCurrencyName resets all changes to the "currency_name" field.
func (m *CountryMutation) ResetCurrencyName() {
	m.currency_name = nil
	delete(m.clearedFields, country.FieldCurrencyName)
}

// SetCurrencyCode sets the "currency_code" field.
func (m *CountryMutation) SetCurrencyCode(s string) {
	m.currency_code = &s
}

// CurrencyCode returns the value of the "currency_code" field in the mutation.
func (m *CountryMutation) CurrencyCode() (r string, exists bool) {
	v := m.currency_code
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrencyCode returns the old "currency_code" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldCurrencyCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrencyCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrencyCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrencyCode: %w", err)
	}
	return oldValue.CurrencyCode, nil
}

// ClearCurrencyCode clears the value of the "currency_code" field.
func (m *CountryMutation) ClearCurrencyCode() {
	m.currency_code = nil
	m.clearedFields[country.FieldCurrencyCode] = struct{}{}
}

// CurrencyCodeCleared returns if the "currency_code" field was cleared in this mutation.
func (m *CountryMutation) CurrencyCodeCleared() bool {
	_, ok := m.clearedFields[country.FieldCurrencyCode]
	return ok
}

// ResetCurrencyCode resets all changes to the "currency_code" field.
func (m *CountryMutation) ResetCurrencyCode() {
	m.currency_code = nil
	delete(m.clearedFields, country.FieldCurrencyCode)
}

// SetCurrencySymbol sets the "currency_symbol" field.
func (m *CountryMutation) SetCurrencySymbol(s string) {
	m.currency_symbol = &s
}

// CurrencySymbol returns the value of the "currency_symbol" field in the mutation.
func (m *CountryMutation) CurrencySymbol() (r string, exists bool) {
	v := m.currency_symbol
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrencySymbol returns the old "currency_symbol" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldCurrencySymbol(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrencySymbol is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrencySymbol requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrencySymbol: %w", err)
	}
	return oldValue.CurrencySymbol, nil
}

// ClearCurrencySymbol clears the value of the "currency_symbol" field.
func (m *CountryMutation) ClearCurrencySymbol() {
	m.currency_symbol = nil
	m.clearedFields[country.FieldCurrencySymbol] = struct{}{}
}

// CurrencySymbolCleared returns if the "currency_symbol" field was cleared in this mutation.
func (m *CountryMutation) CurrencySymbolCleared() bool {
	_, ok := m.clearedFields[country.FieldCurrencySymbol]
	return ok
}

// ResetCurrencySymbol resets all changes to the "currency_symbol" field.
func (m *CountryMutation) ResetCurrencySymbol() {
	m.currency_symbol = nil
	delete(m.clearedFields, country.FieldCurrencySymbol)
}

// SetConversionRate sets the "conversion_rate" field.
func (m *CountryMutation) SetConversionRate(f float64) {
	m.conversion_rate = &f
	m.addconversion_rate = nil
}

// ConversionRate returns the value of the "conversion_rate" field in the mutation.
func (m *CountryMutation) ConversionRate() (r float64, exists bool) {
	v := m.conversion_rate
	if v == nil {
		return
	}
	return *v, true
}

// OldConversionRate returns the old "conversion_rate" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldConversionRate(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConversionRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConversionRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConversionRate: %w", err)
	}
	return oldValue.ConversionRate, nil
}

// AddConversionRate adds f to the "conversion_rate" field.
func (m *CountryMutation) AddConversionRate(f float64) {
	if m.addconversion_rate != nil {
		*m.addconversion_rate += f
	} else {
		m.addconversion_rate = &f
	}
}

// AddedConversionRate returns the value that was added to the "conversion_rate" field in this mutation.
func (m *CountryMutation) AddedConversionRate() (r float64, exists bool) {
	v := m.addconversion_rate
	if v == nil {
		return
	}
	return *v, true
}

// ResetConversionRate resets all changes to the "conversion_rate" field.
func (m *CountryMutation) ResetConversionRate() {
	m.conversion_rate = nil
	m.addconversion_rate = nil
}

// SetStatus sets the "status" field.
func (m *CountryMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *CountryMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *CountryMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *CountryMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *CountryMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CountryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CountryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CountryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CountryMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CountryMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CountryMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddLocationIDs adds the "locations" edge to the CountryLocation entity by ids.
func (m *CountryMutation) AddLocationIDs(ids ...uint64) {
	if m.locations == nil {
		m.locations = make(map[uint64]struct{})
	}
	for i := range ids {
		m.locations[ids[i]] = struct{}{}
	}
}

// ClearLocations clears the "locations" edge to the CountryLocation entity.
func (m *CountryMutation) ClearLocations() {
	m.clearedlocations = true
}

// LocationsCleared reports if the "locations" edge to the CountryLocation entity was cleared.
func (m *CountryMutation) LocationsCleared() bool {
	return m.clearedlocations
}

// RemoveLocationIDs removes the "locations" edge to the CountryLocation entity by IDs.
func (m *CountryMutation) RemoveLocationIDs(ids ...uint64) {
	if m.removedlocations == nil {
		m.removedlocations = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.locations, ids[i])
		m.removedlocations[ids[i]] = struct{}{}
	}
}

// RemovedLocations returns the removed IDs of the "locations" edge to the CountryLocation entity.
func (m *CountryMutation) RemovedLocationsIDs() (ids []uint64) {
	for id := range m.removedlocations {
		ids = append(ids, id)
	}
	return
}

// LocationsIDs returns the "locations" edge IDs in the mutation.
func (m *CountryMutation) LocationsIDs() (ids []uint64) {
	for id := range m.locations {
		ids = append(ids, id)
	}
	return
}

// ResetLocations resets all changes to the "locations" edge.
func (m *CountryMutation) ResetLocations() {
	m.locations = nil
	m.clearedlocations = false
	m.removedlocations = nil
}

// AddBankIDs adds the "banks" edge to the Bank entity by ids.
func (m *CountryMutation) AddBankIDs(ids ...uint64) {
	if m.banks == nil {
		m.banks = make(map[uint64]struct{})
	}
	for i := range ids {
		m.banks[ids[i]] = struct{}{}
	}
}

// ClearBanks clears the "banks" edge to the Bank entity.
func (m *CountryMutation) ClearBanks() {
	m.clearedbanks = true
}

// BanksCleared reports if the "banks" edge to the Bank entity was cleared.
func (m *CountryMutation) BanksCleared() bool {
	return m.clearedbanks
}

// RemoveBankIDs removes the "banks" edge to the Bank entity by IDs.
func (m *CountryMutation) RemoveBankIDs(ids ...uint64) {
	if m.removedbanks == nil {
		m.removedbanks = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.banks, ids[i])
		m.removedbanks[ids[i]] = struct{}{}
	}
}

// RemovedBanks returns the removed IDs of the "banks" edge to the Bank entity.
func (m *CountryMutation) RemovedBanksIDs() (ids []uint64) {
	for id := range m.removedbanks {
		ids = append(ids, id)
	}
	return
}

// BanksIDs returns the "banks" edge IDs in the mutation.
func (m *CountryMutation) BanksIDs() (ids []uint64) {
	for id := range m.banks {
		ids = append(ids, id)
	}
	return
}

// ResetBanks resets all changes to the "banks" edge.
func (m *CountryMutation) ResetBanks() {
	m.banks = nil
	m.clearedbanks = false
	m.removedbanks = nil
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *CountryMutation) AddUserIDs(ids ...uint64) {
	if m.users == nil {
		m.users = make(map[uint64]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *CountryMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *CountryMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *CountryMutation) RemoveUserIDs(ids ...uint64) {
	if m.removedusers == nil {
		m.removedusers = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *CountryMutation) RemovedUsersIDs() (ids []uint64) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *CountryMutation) UsersIDs() (ids []uint64) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *CountryMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// AddContactUserIDs adds the "contact_users" edge to the User entity by ids.
func (m *CountryMutation) AddContactUserIDs(ids ...uint64) {
	if m.contact_users == nil {
		m.contact_users = make(map[uint64]struct{})
	}
	for i := range ids {
		m.contact_users[ids[i]] = struct{}{}
	}
}

// ClearContactUsers clears the "contact_users" edge to the User entity.
func (m *CountryMutation) ClearContactUsers() {
	m.clearedcontact_users = true
}

// ContactUsersCleared reports if the "contact_users" edge to the User entity was cleared.
func (m *CountryMutation) ContactUsersCleared() bool {
	return m.clearedcontact_users
}

// RemoveContactUserIDs removes the "contact_users" edge to the User entity by IDs.
func (m *CountryMutation) RemoveContactUserIDs(ids ...uint64) {
	if m.removedcontact_users == nil {
		m.removedcontact_users = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.contact_users, ids[i])
		m.removedcontact_users[ids[i]] = struct{}{}
	}
}

// RemovedContactUsers returns the removed IDs of the "contact_users" edge to the User entity.
func (m *CountryMutation) RemovedContactUsersIDs() (ids []uint64) {
	for id := range m.removedcontact_users {
		ids = append(ids, id)
	}
	return
}

// ContactUsersIDs returns the "contact_users" edge IDs in the mutation.
func (m *CountryMutation) ContactUsersIDs() (ids []uint64) {
	for id := range m.contact_users {
		ids = append(ids, id)
	}
	return
}

// ResetContactUsers resets all changes to the "contact_users" edge.
func (m *CountryMutation) ResetContactUsers() {
	m.contact_users = nil
	m.clearedcontact_users = false
	m.removedcontact_users = nil
}

// Where appends a list predicates to the CountryMutation builder.
func (m *CountryMutation) Where(ps ...predicate.Country) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CountryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CountryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Country, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CountryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CountryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Country).
func (m *CountryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CountryMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.iso2 != nil {
		fields = append(fields, country.FieldIso2)
	}
	if m.iso3 != nil {
		fields = append(fields, country.FieldIso3)
	}
	if m.name != nil {
		fields = append(fields, country.FieldName)
	}
	if m.official_name != nil {
		fields = append(fields, country.FieldOfficialName)
	}
	if m.numeric_code != nil {
		fields = append(fields, country.FieldNumericCode)
	}
	if m.phone_code != nil {
		fields = append(fields, country.FieldPhoneCode)
	}
	if m.capital != nil {
		fields = append(fields, country.FieldCapital)
	}
	if m.currency_name != nil {
		fields = append(fields, country.FieldCurrencyName)
	}
	if m.currency_code != nil {
		fields = append(fields, country.FieldCurrencyCode)
	}
	if m.currency_symbol != nil {
		fields = append(fields, country.FieldCurrencySymbol)
	}
	if m.conversion_rate != nil {
		fields = append(fields, country.FieldConversionRate)
	}
	if m.status != nil {
		fields = append(fields, country.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, country.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, country.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CountryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case country.FieldIso2:
		return m.Iso2()
	case country.FieldIso3:
		return m.Iso3()
	case country.FieldName:
		return m.Name()
	case country.FieldOfficialName:
		return m.OfficialName()
	case country.FieldNumericCode:
		return m.NumericCode()
	case country.FieldPhoneCode:
		return m.PhoneCode()
	case country.FieldCapital:
		return m.Capital()
	case country.FieldCurrencyName:
		return m.CurrencyName()
	case country.FieldCurrencyCode:
		return m.CurrencyCode()
	case country.FieldCurrencySymbol:
		return m.CurrencySymbol()
	case country.FieldConversionRate:
		return m.ConversionRate()
	case country.FieldStatus:
		return m.Status()
	case country.FieldCreatedAt:
		return m.CreatedAt()
	case country.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CountryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case country.FieldIso2:
		return m.OldIso2(ctx)
	case country.FieldIso3:
		return m.OldIso3(ctx)
	case country.FieldName:
		return m.OldName(ctx)
	case country.FieldOfficialName:
		return m.OldOfficialName(ctx)
	case country.FieldNumericCode:
		return m.OldNumericCode(ctx)
	case country.FieldPhoneCode:
		return m.OldPhoneCode(ctx)
	case country.FieldCapital:
		return m.OldCapital(ctx)
	case country.FieldCurrencyName:
		return m.OldCurrencyName(ctx)
	case country.FieldCurrencyCode:
		return m.OldCurrencyCode(ctx)
	case country.FieldCurrencySymbol:
		return m.OldCurrencySymbol(ctx)
	case country.FieldConversionRate:
		return m.OldConversionRate(ctx)
	case country.FieldStatus:
		return m.OldStatus(ctx)
	case country.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case country.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Country field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CountryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case country.FieldIso2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIso2(v)
		return nil
	case country.FieldIso3:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIso3(v)
		return nil
	case country.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case country.FieldOfficialName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOfficialName(v)
		return nil
	case country.FieldNumericCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumericCode(v)
		return nil
	case country.FieldPhoneCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneCode(v)
		return nil
	case country.FieldCapital:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCapital(v)
		return nil
	case country.FieldCurrencyName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrencyName(v)
		return nil
	case country.FieldCurrencyCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrencyCode(v)
		return nil
	case country.FieldCurrencySymbol:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrencySymbol(v)
		return nil
	case country.FieldConversionRate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConversionRate(v)
		return nil
	case country.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case country.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case country.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Country field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CountryMutation) AddedFields() []string {
	var fields []string
	if m.addconversion_rate != nil {
		fields = append(fields, country.FieldConversionRate)
	}
	if m.addstatus != nil {
		fields = append(fields, country.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CountryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case country.FieldConversionRate:
		return m.AddedConversionRate()
	case country.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CountryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case country.FieldConversionRate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddConversionRate(v)
		return nil
	case country.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Country numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CountryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(country.FieldOfficialName) {
		fields = append(fields, country.FieldOfficialName)
	}
	if m.FieldCleared(country.FieldNumericCode) {
		fields = append(fields, country.FieldNumericCode)
	}
	if m.FieldCleared(country.FieldPhoneCode) {
		fields = append(fields, country.FieldPhoneCode)
	}
	if m.FieldCleared(country.FieldCapital) {
		fields = append(fields, country.FieldCapital)
	}
	if m.FieldCleared(country.FieldCurrencyName) {
		fields = append(fields, country.FieldCurrencyName)
	}
	if m.FieldCleared(country.FieldCurrencyCode) {
		fields = append(fields, country.FieldCurrencyCode)
	}
	if m.FieldCleared(country.FieldCurrencySymbol) {
		fields = append(fields, country.FieldCurrencySymbol)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CountryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CountryMutation) ClearField(name string) error {
	switch name {
	case country.FieldOfficialName:
		m.ClearOfficialName()
		return nil
	case country.FieldNumericCode:
		m.ClearNumericCode()
		return nil
	case country.FieldPhoneCode:
		m.ClearPhoneCode()
		return nil
	case country.FieldCapital:
		m.ClearCapital()
		return nil
	case country.FieldCurrencyName:
		m.ClearCurrencyName()
		return nil
	case country.FieldCurrencyCode:
		m.ClearCurrencyCode()
		return nil
	case country.FieldCurrencySymbol:
		m.ClearCurrencySymbol()
		return nil
	}
	return fmt.Errorf("unknown Country nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CountryMutation) ResetField(name string) error {
	switch name {
	case country.FieldIso2:
		m.ResetIso2()
		return nil
	case country.FieldIso3:
		m.ResetIso3()
		return nil
	case country.FieldName:
		m.ResetName()
		return nil
	case country.FieldOfficialName:
		m.ResetOfficialName()
		return nil
	case country.FieldNumericCode:
		m.ResetNumericCode()
		return nil
	case country.FieldPhoneCode:
		m.ResetPhoneCode()
		return nil
	case country.FieldCapital:
		m.ResetCapital()
		return nil
	case country.FieldCurrencyName:
		m.ResetCurrencyName()
		return nil
	case country.FieldCurrencyCode:
		m.ResetCurrencyCode()
		return nil
	case country.FieldCurrencySymbol:
		m.ResetCurrencySymbol()
		return nil
	case country.FieldConversionRate:
		m.ResetConversionRate()
		return nil
	case country.FieldStatus:
		m.ResetStatus()
		return nil
	case country.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case country.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Country field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CountryMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.locations != nil {
		edges = append(edges, country.EdgeLocations)
	}
	if m.banks != nil {
		edges = append(edges, country.EdgeBanks)
	}
	if m.users != nil {
		edges = append(edges, country.EdgeUsers)
	}
	if m.contact_users != nil {
		edges = append(edges, country.EdgeContactUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CountryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case country.EdgeLocations:
		ids := make([]ent.Value, 0, len(m.locations))
		for id := range m.locations {
			ids = append(ids, id)
		}
		return ids
	case country.EdgeBanks:
		ids := make([]ent.Value, 0, len(m.banks))
		for id := range m.banks {
			ids = append(ids, id)
		}
		return ids
	case country.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case country.EdgeContactUsers:
		ids := make([]ent.Value, 0, len(m.contact_users))
		for id := range m.contact_users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CountryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedlocations != nil {
		edges = append(edges, country.EdgeLocations)
	}
	if m.removedbanks != nil {
		edges = append(edges, country.EdgeBanks)
	}
	if m.removedusers != nil {
		edges = append(edges, country.EdgeUsers)
	}
	if m.removedcontact_users != nil {
		edges = append(edges, country.EdgeContactUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CountryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case country.EdgeLocations:
		ids := make([]ent.Value, 0, len(m.removedlocations))
		for id := range m.removedlocations {
			ids = append(ids, id)
		}
		return ids
	case country.EdgeBanks:
		ids := make([]ent.Value, 0, len(m.removedbanks))
		for id := range m.removedbanks {
			ids = append(ids, id)
		}
		return ids
	case country.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case country.EdgeContactUsers:
		ids := make([]ent.Value, 0, len(m.removedcontact_users))
		for id := range m.removedcontact_users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CountryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedlocations {
		edges = append(edges, country.EdgeLocations)
	}
	if m.clearedbanks {
		edges = append(edges, country.EdgeBanks)
	}
	if m.clearedusers {
		edges = append(edges, country.EdgeUsers)
	}
	if m.clearedcontact_users {
		edges = append(edges, country.EdgeContactUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CountryMutation) EdgeCleared(name string) bool {
	switch name {
	case country.EdgeLocations:
		return m.clearedlocations
	case country.EdgeBanks:
		return m.clearedbanks
	case country.EdgeUsers:
		return m.clearedusers
	case country.EdgeContactUsers:
		return m.clearedcontact_users
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CountryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Country unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CountryMutation) ResetEdge(name string) error {
	switch name {
	case country.EdgeLocations:
		m.ResetLocations()
		return nil
	case country.EdgeBanks:
		m.ResetBanks()
		return nil
	case country.EdgeUsers:
		m.ResetUsers()
		return nil
	case country.EdgeContactUsers:
		m.ResetContactUsers()
		return nil
	}
	return fmt.Errorf("unknown Country edge %s", name)
}

// CountryLocationMutation represents an operation that mutates the CountryLocation nodes in the graph.
type CountryLocationMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uint64
	sorting                *uint64
	addsorting             *int64
	name_en                *string
	name_zh                *string
	created_at             *time.Time
	updated_at             *time.Time
	deleted_at             *time.Time
	clearedFields          map[string]struct{}
	country                *uint64
	clearedcountry         bool
	parent                 *uint64
	clearedparent          bool
	child_locations        map[uint64]struct{}
	removedchild_locations map[uint64]struct{}
	clearedchild_locations bool
	done                   bool
	oldValue               func(context.Context) (*CountryLocation, error)
	predicates             []predicate.CountryLocation
}

var _ ent.Mutation = (*CountryLocationMutation)(nil)

// countrylocationOption allows management of the mutation configuration using functional options.
type countrylocationOption func(*CountryLocationMutation)

// newCountryLocationMutation creates new mutation for the CountryLocation entity.
func newCountryLocationMutation(c config, op Op, opts ...countrylocationOption) *CountryLocationMutation {
	m := &CountryLocationMutation{
		config:        c,
		op:            op,
		typ:           TypeCountryLocation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCountryLocationID sets the ID field of the mutation.
func withCountryLocationID(id uint64) countrylocationOption {
	return func(m *CountryLocationMutation) {
		var (
			err   error
			once  sync.Once
			value *CountryLocation
		)
		m.oldValue = func(ctx context.Context) (*CountryLocation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CountryLocation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCountryLocation sets the old CountryLocation of the mutation.
func withCountryLocation(node *CountryLocation) countrylocationOption {
	return func(m *CountryLocationMutation) {
		m.oldValue = func(context.Context) (*CountryLocation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CountryLocationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CountryLocationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CountryLocation entities.
func (m *CountryLocationMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CountryLocationMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CountryLocationMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CountryLocation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCountryID sets the "country_id" field.
func (m *CountryLocationMutation) SetCountryID(u uint64) {
	m.country = &u
}

// CountryID returns the value of the "country_id" field in the mutation.
func (m *CountryLocationMutation) CountryID() (r uint64, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountryID returns the old "country_id" field's value of the CountryLocation entity.
// If the CountryLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryLocationMutation) OldCountryID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountryID: %w", err)
	}
	return oldValue.CountryID, nil
}

// ClearCountryID clears the value of the "country_id" field.
func (m *CountryLocationMutation) ClearCountryID() {
	m.country = nil
	m.clearedFields[countrylocation.FieldCountryID] = struct{}{}
}

// CountryIDCleared returns if the "country_id" field was cleared in this mutation.
func (m *CountryLocationMutation) CountryIDCleared() bool {
	_, ok := m.clearedFields[countrylocation.FieldCountryID]
	return ok
}

// ResetCountryID resets all changes to the "country_id" field.
func (m *CountryLocationMutation) ResetCountryID() {
	m.country = nil
	delete(m.clearedFields, countrylocation.FieldCountryID)
}

// SetParentID sets the "parent_id" field.
func (m *CountryLocationMutation) SetParentID(u uint64) {
	m.parent = &u
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *CountryLocationMutation) ParentID() (r uint64, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the CountryLocation entity.
// If the CountryLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryLocationMutation) OldParentID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *CountryLocationMutation) ClearParentID() {
	m.parent = nil
	m.clearedFields[countrylocation.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *CountryLocationMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[countrylocation.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *CountryLocationMutation) ResetParentID() {
	m.parent = nil
	delete(m.clearedFields, countrylocation.FieldParentID)
}

// SetSorting sets the "sorting" field.
func (m *CountryLocationMutation) SetSorting(u uint64) {
	m.sorting = &u
	m.addsorting = nil
}

// Sorting returns the value of the "sorting" field in the mutation.
func (m *CountryLocationMutation) Sorting() (r uint64, exists bool) {
	v := m.sorting
	if v == nil {
		return
	}
	return *v, true
}

// OldSorting returns the old "sorting" field's value of the CountryLocation entity.
// If the CountryLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryLocationMutation) OldSorting(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSorting is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSorting requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSorting: %w", err)
	}
	return oldValue.Sorting, nil
}

// AddSorting adds u to the "sorting" field.
func (m *CountryLocationMutation) AddSorting(u int64) {
	if m.addsorting != nil {
		*m.addsorting += u
	} else {
		m.addsorting = &u
	}
}

// AddedSorting returns the value that was added to the "sorting" field in this mutation.
func (m *CountryLocationMutation) AddedSorting() (r int64, exists bool) {
	v := m.addsorting
	if v == nil {
		return
	}
	return *v, true
}

// ResetSorting resets all changes to the "sorting" field.
func (m *CountryLocationMutation) ResetSorting() {
	m.sorting = nil
	m.addsorting = nil
}

// SetNameEn sets the "name_en" field.
func (m *CountryLocationMutation) SetNameEn(s string) {
	m.name_en = &s
}

// NameEn returns the value of the "name_en" field in the mutation.
func (m *CountryLocationMutation) NameEn() (r string, exists bool) {
	v := m.name_en
	if v == nil {
		return
	}
	return *v, true
}

// OldNameEn returns the old "name_en" field's value of the CountryLocation entity.
// If the CountryLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryLocationMutation) OldNameEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameEn: %w", err)
	}
	return oldValue.NameEn, nil
}

// ResetNameEn resets all changes to the "name_en" field.
func (m *CountryLocationMutation) ResetNameEn() {
	m.name_en = nil
}

// SetNameZh sets the "name_zh" field.
func (m *CountryLocationMutation) SetNameZh(s string) {
	m.name_zh = &s
}

// NameZh returns the value of the "name_zh" field in the mutation.
func (m *CountryLocationMutation) NameZh() (r string, exists bool) {
	v := m.name_zh
	if v == nil {
		return
	}
	return *v, true
}

// OldNameZh returns the old "name_zh" field's value of the CountryLocation entity.
// If the CountryLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryLocationMutation) OldNameZh(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameZh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameZh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameZh: %w", err)
	}
	return oldValue.NameZh, nil
}

// ResetNameZh resets all changes to the "name_zh" field.
func (m *CountryLocationMutation) ResetNameZh() {
	m.name_zh = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CountryLocationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CountryLocationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CountryLocation entity.
// If the CountryLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryLocationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CountryLocationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CountryLocationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CountryLocationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CountryLocation entity.
// If the CountryLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryLocationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CountryLocationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CountryLocationMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CountryLocationMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the CountryLocation entity.
// If the CountryLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryLocationMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *CountryLocationMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[countrylocation.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *CountryLocationMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[countrylocation.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CountryLocationMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, countrylocation.FieldDeletedAt)
}

// ClearCountry clears the "country" edge to the Country entity.
func (m *CountryLocationMutation) ClearCountry() {
	m.clearedcountry = true
	m.clearedFields[countrylocation.FieldCountryID] = struct{}{}
}

// CountryCleared reports if the "country" edge to the Country entity was cleared.
func (m *CountryLocationMutation) CountryCleared() bool {
	return m.CountryIDCleared() || m.clearedcountry
}

// CountryIDs returns the "country" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CountryID instead. It exists only for internal usage by the builders.
func (m *CountryLocationMutation) CountryIDs() (ids []uint64) {
	if id := m.country; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCountry resets all changes to the "country" edge.
func (m *CountryLocationMutation) ResetCountry() {
	m.country = nil
	m.clearedcountry = false
}

// ClearParent clears the "parent" edge to the CountryLocation entity.
func (m *CountryLocationMutation) ClearParent() {
	m.clearedparent = true
	m.clearedFields[countrylocation.FieldParentID] = struct{}{}
}

// ParentCleared reports if the "parent" edge to the CountryLocation entity was cleared.
func (m *CountryLocationMutation) ParentCleared() bool {
	return m.ParentIDCleared() || m.clearedparent
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *CountryLocationMutation) ParentIDs() (ids []uint64) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *CountryLocationMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildLocationIDs adds the "child_locations" edge to the CountryLocation entity by ids.
func (m *CountryLocationMutation) AddChildLocationIDs(ids ...uint64) {
	if m.child_locations == nil {
		m.child_locations = make(map[uint64]struct{})
	}
	for i := range ids {
		m.child_locations[ids[i]] = struct{}{}
	}
}

// ClearChildLocations clears the "child_locations" edge to the CountryLocation entity.
func (m *CountryLocationMutation) ClearChildLocations() {
	m.clearedchild_locations = true
}

// ChildLocationsCleared reports if the "child_locations" edge to the CountryLocation entity was cleared.
func (m *CountryLocationMutation) ChildLocationsCleared() bool {
	return m.clearedchild_locations
}

// RemoveChildLocationIDs removes the "child_locations" edge to the CountryLocation entity by IDs.
func (m *CountryLocationMutation) RemoveChildLocationIDs(ids ...uint64) {
	if m.removedchild_locations == nil {
		m.removedchild_locations = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.child_locations, ids[i])
		m.removedchild_locations[ids[i]] = struct{}{}
	}
}

// RemovedChildLocations returns the removed IDs of the "child_locations" edge to the CountryLocation entity.
func (m *CountryLocationMutation) RemovedChildLocationsIDs() (ids []uint64) {
	for id := range m.removedchild_locations {
		ids = append(ids, id)
	}
	return
}

// ChildLocationsIDs returns the "child_locations" edge IDs in the mutation.
func (m *CountryLocationMutation) ChildLocationsIDs() (ids []uint64) {
	for id := range m.child_locations {
		ids = append(ids, id)
	}
	return
}

// ResetChildLocations resets all changes to the "child_locations" edge.
func (m *CountryLocationMutation) ResetChildLocations() {
	m.child_locations = nil
	m.clearedchild_locations = false
	m.removedchild_locations = nil
}

// Where appends a list predicates to the CountryLocationMutation builder.
func (m *CountryLocationMutation) Where(ps ...predicate.CountryLocation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CountryLocationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CountryLocationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CountryLocation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CountryLocationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CountryLocationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CountryLocation).
func (m *CountryLocationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CountryLocationMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.country != nil {
		fields = append(fields, countrylocation.FieldCountryID)
	}
	if m.parent != nil {
		fields = append(fields, countrylocation.FieldParentID)
	}
	if m.sorting != nil {
		fields = append(fields, countrylocation.FieldSorting)
	}
	if m.name_en != nil {
		fields = append(fields, countrylocation.FieldNameEn)
	}
	if m.name_zh != nil {
		fields = append(fields, countrylocation.FieldNameZh)
	}
	if m.created_at != nil {
		fields = append(fields, countrylocation.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, countrylocation.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, countrylocation.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CountryLocationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case countrylocation.FieldCountryID:
		return m.CountryID()
	case countrylocation.FieldParentID:
		return m.ParentID()
	case countrylocation.FieldSorting:
		return m.Sorting()
	case countrylocation.FieldNameEn:
		return m.NameEn()
	case countrylocation.FieldNameZh:
		return m.NameZh()
	case countrylocation.FieldCreatedAt:
		return m.CreatedAt()
	case countrylocation.FieldUpdatedAt:
		return m.UpdatedAt()
	case countrylocation.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CountryLocationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case countrylocation.FieldCountryID:
		return m.OldCountryID(ctx)
	case countrylocation.FieldParentID:
		return m.OldParentID(ctx)
	case countrylocation.FieldSorting:
		return m.OldSorting(ctx)
	case countrylocation.FieldNameEn:
		return m.OldNameEn(ctx)
	case countrylocation.FieldNameZh:
		return m.OldNameZh(ctx)
	case countrylocation.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case countrylocation.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case countrylocation.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CountryLocation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CountryLocationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case countrylocation.FieldCountryID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountryID(v)
		return nil
	case countrylocation.FieldParentID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case countrylocation.FieldSorting:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSorting(v)
		return nil
	case countrylocation.FieldNameEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameEn(v)
		return nil
	case countrylocation.FieldNameZh:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameZh(v)
		return nil
	case countrylocation.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case countrylocation.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case countrylocation.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CountryLocation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CountryLocationMutation) AddedFields() []string {
	var fields []string
	if m.addsorting != nil {
		fields = append(fields, countrylocation.FieldSorting)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CountryLocationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case countrylocation.FieldSorting:
		return m.AddedSorting()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CountryLocationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case countrylocation.FieldSorting:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSorting(v)
		return nil
	}
	return fmt.Errorf("unknown CountryLocation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CountryLocationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(countrylocation.FieldCountryID) {
		fields = append(fields, countrylocation.FieldCountryID)
	}
	if m.FieldCleared(countrylocation.FieldParentID) {
		fields = append(fields, countrylocation.FieldParentID)
	}
	if m.FieldCleared(countrylocation.FieldDeletedAt) {
		fields = append(fields, countrylocation.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CountryLocationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CountryLocationMutation) ClearField(name string) error {
	switch name {
	case countrylocation.FieldCountryID:
		m.ClearCountryID()
		return nil
	case countrylocation.FieldParentID:
		m.ClearParentID()
		return nil
	case countrylocation.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown CountryLocation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CountryLocationMutation) ResetField(name string) error {
	switch name {
	case countrylocation.FieldCountryID:
		m.ResetCountryID()
		return nil
	case countrylocation.FieldParentID:
		m.ResetParentID()
		return nil
	case countrylocation.FieldSorting:
		m.ResetSorting()
		return nil
	case countrylocation.FieldNameEn:
		m.ResetNameEn()
		return nil
	case countrylocation.FieldNameZh:
		m.ResetNameZh()
		return nil
	case countrylocation.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case countrylocation.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case countrylocation.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown CountryLocation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CountryLocationMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.country != nil {
		edges = append(edges, countrylocation.EdgeCountry)
	}
	if m.parent != nil {
		edges = append(edges, countrylocation.EdgeParent)
	}
	if m.child_locations != nil {
		edges = append(edges, countrylocation.EdgeChildLocations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CountryLocationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case countrylocation.EdgeCountry:
		if id := m.country; id != nil {
			return []ent.Value{*id}
		}
	case countrylocation.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case countrylocation.EdgeChildLocations:
		ids := make([]ent.Value, 0, len(m.child_locations))
		for id := range m.child_locations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CountryLocationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedchild_locations != nil {
		edges = append(edges, countrylocation.EdgeChildLocations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CountryLocationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case countrylocation.EdgeChildLocations:
		ids := make([]ent.Value, 0, len(m.removedchild_locations))
		for id := range m.removedchild_locations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CountryLocationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedcountry {
		edges = append(edges, countrylocation.EdgeCountry)
	}
	if m.clearedparent {
		edges = append(edges, countrylocation.EdgeParent)
	}
	if m.clearedchild_locations {
		edges = append(edges, countrylocation.EdgeChildLocations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CountryLocationMutation) EdgeCleared(name string) bool {
	switch name {
	case countrylocation.EdgeCountry:
		return m.clearedcountry
	case countrylocation.EdgeParent:
		return m.clearedparent
	case countrylocation.EdgeChildLocations:
		return m.clearedchild_locations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CountryLocationMutation) ClearEdge(name string) error {
	switch name {
	case countrylocation.EdgeCountry:
		m.ClearCountry()
		return nil
	case countrylocation.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown CountryLocation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CountryLocationMutation) ResetEdge(name string) error {
	switch name {
	case countrylocation.EdgeCountry:
		m.ResetCountry()
		return nil
	case countrylocation.EdgeParent:
		m.ResetParent()
		return nil
	case countrylocation.EdgeChildLocations:
		m.ResetChildLocations()
		return nil
	}
	return fmt.Errorf("unknown CountryLocation edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uint64
	username                *string
	name                    *string
	email                   *string
	email_verified_at       *time.Time
	password                *string
	password2               *string
	contact_number          *string
	full_contact_number     *string
	lang                    *string
	avatar                  *string
	credit_1                *float64
	addcredit_1             *float64
	credit_2                *float64
	addcredit_2             *float64
	credit_3                *float64
	addcredit_3             *float64
	credit_4                *float64
	addcredit_4             *float64
	credit_5                *float64
	addcredit_5             *float64
	bank_account_name       *string
	bank_account_number     *string
	national_id             *string
	first_login             *bool
	ban_until               *time.Time
	new_login_at            *time.Time
	last_login_at           *time.Time
	unilevel                *uint64
	addunilevel             *int64
	created_at              *time.Time
	updated_at              *time.Time
	deleted_at              *time.Time
	clearedFields           map[string]struct{}
	country                 *uint64
	clearedcountry          bool
	contact_country         *uint64
	clearedcontact_country  bool
	introducer              *uint64
	clearedintroducer       bool
	bank                    *uint64
	clearedbank             bool
	introduced_users        map[uint64]struct{}
	removedintroduced_users map[uint64]struct{}
	clearedintroduced_users bool
	done                    bool
	oldValue                func(context.Context) (*User, error)
	predicates              []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uint64) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ClearUsername clears the value of the "username" field.
func (m *UserMutation) ClearUsername() {
	m.username = nil
	m.clearedFields[user.FieldUsername] = struct{}{}
}

// UsernameCleared returns if the "username" field was cleared in this mutation.
func (m *UserMutation) UsernameCleared() bool {
	_, ok := m.clearedFields[user.FieldUsername]
	return ok
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
	delete(m.clearedFields, user.FieldUsername)
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *UserMutation) ClearName() {
	m.name = nil
	m.clearedFields[user.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *UserMutation) NameCleared() bool {
	_, ok := m.clearedFields[user.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, user.FieldName)
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *UserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[user.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *UserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[user.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, user.FieldEmail)
}

// SetEmailVerifiedAt sets the "email_verified_at" field.
func (m *UserMutation) SetEmailVerifiedAt(t time.Time) {
	m.email_verified_at = &t
}

// EmailVerifiedAt returns the value of the "email_verified_at" field in the mutation.
func (m *UserMutation) EmailVerifiedAt() (r time.Time, exists bool) {
	v := m.email_verified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailVerifiedAt returns the old "email_verified_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmailVerifiedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailVerifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailVerifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailVerifiedAt: %w", err)
	}
	return oldValue.EmailVerifiedAt, nil
}

// ClearEmailVerifiedAt clears the value of the "email_verified_at" field.
func (m *UserMutation) ClearEmailVerifiedAt() {
	m.email_verified_at = nil
	m.clearedFields[user.FieldEmailVerifiedAt] = struct{}{}
}

// EmailVerifiedAtCleared returns if the "email_verified_at" field was cleared in this mutation.
func (m *UserMutation) EmailVerifiedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldEmailVerifiedAt]
	return ok
}

// ResetEmailVerifiedAt resets all changes to the "email_verified_at" field.
func (m *UserMutation) ResetEmailVerifiedAt() {
	m.email_verified_at = nil
	delete(m.clearedFields, user.FieldEmailVerifiedAt)
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetPassword2 sets the "password2" field.
func (m *UserMutation) SetPassword2(s string) {
	m.password2 = &s
}

// Password2 returns the value of the "password2" field in the mutation.
func (m *UserMutation) Password2() (r string, exists bool) {
	v := m.password2
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword2 returns the old "password2" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword2: %w", err)
	}
	return oldValue.Password2, nil
}

// ResetPassword2 resets all changes to the "password2" field.
func (m *UserMutation) ResetPassword2() {
	m.password2 = nil
}

// SetCountryID sets the "country_id" field.
func (m *UserMutation) SetCountryID(u uint64) {
	m.country = &u
}

// CountryID returns the value of the "country_id" field in the mutation.
func (m *UserMutation) CountryID() (r uint64, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountryID returns the old "country_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCountryID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountryID: %w", err)
	}
	return oldValue.CountryID, nil
}

// ClearCountryID clears the value of the "country_id" field.
func (m *UserMutation) ClearCountryID() {
	m.country = nil
	m.clearedFields[user.FieldCountryID] = struct{}{}
}

// CountryIDCleared returns if the "country_id" field was cleared in this mutation.
func (m *UserMutation) CountryIDCleared() bool {
	_, ok := m.clearedFields[user.FieldCountryID]
	return ok
}

// ResetCountryID resets all changes to the "country_id" field.
func (m *UserMutation) ResetCountryID() {
	m.country = nil
	delete(m.clearedFields, user.FieldCountryID)
}

// SetContactCountryID sets the "contact_country_id" field.
func (m *UserMutation) SetContactCountryID(u uint64) {
	m.contact_country = &u
}

// ContactCountryID returns the value of the "contact_country_id" field in the mutation.
func (m *UserMutation) ContactCountryID() (r uint64, exists bool) {
	v := m.contact_country
	if v == nil {
		return
	}
	return *v, true
}

// OldContactCountryID returns the old "contact_country_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldContactCountryID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactCountryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactCountryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactCountryID: %w", err)
	}
	return oldValue.ContactCountryID, nil
}

// ClearContactCountryID clears the value of the "contact_country_id" field.
func (m *UserMutation) ClearContactCountryID() {
	m.contact_country = nil
	m.clearedFields[user.FieldContactCountryID] = struct{}{}
}

// ContactCountryIDCleared returns if the "contact_country_id" field was cleared in this mutation.
func (m *UserMutation) ContactCountryIDCleared() bool {
	_, ok := m.clearedFields[user.FieldContactCountryID]
	return ok
}

// ResetContactCountryID resets all changes to the "contact_country_id" field.
func (m *UserMutation) ResetContactCountryID() {
	m.contact_country = nil
	delete(m.clearedFields, user.FieldContactCountryID)
}

// SetContactNumber sets the "contact_number" field.
func (m *UserMutation) SetContactNumber(s string) {
	m.contact_number = &s
}

// ContactNumber returns the value of the "contact_number" field in the mutation.
func (m *UserMutation) ContactNumber() (r string, exists bool) {
	v := m.contact_number
	if v == nil {
		return
	}
	return *v, true
}

// OldContactNumber returns the old "contact_number" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldContactNumber(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactNumber: %w", err)
	}
	return oldValue.ContactNumber, nil
}

// ClearContactNumber clears the value of the "contact_number" field.
func (m *UserMutation) ClearContactNumber() {
	m.contact_number = nil
	m.clearedFields[user.FieldContactNumber] = struct{}{}
}

// ContactNumberCleared returns if the "contact_number" field was cleared in this mutation.
func (m *UserMutation) ContactNumberCleared() bool {
	_, ok := m.clearedFields[user.FieldContactNumber]
	return ok
}

// ResetContactNumber resets all changes to the "contact_number" field.
func (m *UserMutation) ResetContactNumber() {
	m.contact_number = nil
	delete(m.clearedFields, user.FieldContactNumber)
}

// SetFullContactNumber sets the "full_contact_number" field.
func (m *UserMutation) SetFullContactNumber(s string) {
	m.full_contact_number = &s
}

// FullContactNumber returns the value of the "full_contact_number" field in the mutation.
func (m *UserMutation) FullContactNumber() (r string, exists bool) {
	v := m.full_contact_number
	if v == nil {
		return
	}
	return *v, true
}

// OldFullContactNumber returns the old "full_contact_number" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFullContactNumber(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullContactNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullContactNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullContactNumber: %w", err)
	}
	return oldValue.FullContactNumber, nil
}

// ClearFullContactNumber clears the value of the "full_contact_number" field.
func (m *UserMutation) ClearFullContactNumber() {
	m.full_contact_number = nil
	m.clearedFields[user.FieldFullContactNumber] = struct{}{}
}

// FullContactNumberCleared returns if the "full_contact_number" field was cleared in this mutation.
func (m *UserMutation) FullContactNumberCleared() bool {
	_, ok := m.clearedFields[user.FieldFullContactNumber]
	return ok
}

// ResetFullContactNumber resets all changes to the "full_contact_number" field.
func (m *UserMutation) ResetFullContactNumber() {
	m.full_contact_number = nil
	delete(m.clearedFields, user.FieldFullContactNumber)
}

// SetIntroducerUserID sets the "introducer_user_id" field.
func (m *UserMutation) SetIntroducerUserID(u uint64) {
	m.introducer = &u
}

// IntroducerUserID returns the value of the "introducer_user_id" field in the mutation.
func (m *UserMutation) IntroducerUserID() (r uint64, exists bool) {
	v := m.introducer
	if v == nil {
		return
	}
	return *v, true
}

// OldIntroducerUserID returns the old "introducer_user_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIntroducerUserID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIntroducerUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIntroducerUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIntroducerUserID: %w", err)
	}
	return oldValue.IntroducerUserID, nil
}

// ClearIntroducerUserID clears the value of the "introducer_user_id" field.
func (m *UserMutation) ClearIntroducerUserID() {
	m.introducer = nil
	m.clearedFields[user.FieldIntroducerUserID] = struct{}{}
}

// IntroducerUserIDCleared returns if the "introducer_user_id" field was cleared in this mutation.
func (m *UserMutation) IntroducerUserIDCleared() bool {
	_, ok := m.clearedFields[user.FieldIntroducerUserID]
	return ok
}

// ResetIntroducerUserID resets all changes to the "introducer_user_id" field.
func (m *UserMutation) ResetIntroducerUserID() {
	m.introducer = nil
	delete(m.clearedFields, user.FieldIntroducerUserID)
}

// SetLang sets the "lang" field.
func (m *UserMutation) SetLang(s string) {
	m.lang = &s
}

// Lang returns the value of the "lang" field in the mutation.
func (m *UserMutation) Lang() (r string, exists bool) {
	v := m.lang
	if v == nil {
		return
	}
	return *v, true
}

// OldLang returns the old "lang" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLang(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLang is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLang requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLang: %w", err)
	}
	return oldValue.Lang, nil
}

// ResetLang resets all changes to the "lang" field.
func (m *UserMutation) ResetLang() {
	m.lang = nil
}

// SetAvatar sets the "avatar" field.
func (m *UserMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *UserMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatar(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ClearAvatar clears the value of the "avatar" field.
func (m *UserMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[user.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the "avatar" field was cleared in this mutation.
func (m *UserMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[user.FieldAvatar]
	return ok
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *UserMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, user.FieldAvatar)
}

// SetCredit1 sets the "credit_1" field.
func (m *UserMutation) SetCredit1(f float64) {
	m.credit_1 = &f
	m.addcredit_1 = nil
}

// Credit1 returns the value of the "credit_1" field in the mutation.
func (m *UserMutation) Credit1() (r float64, exists bool) {
	v := m.credit_1
	if v == nil {
		return
	}
	return *v, true
}

// OldCredit1 returns the old "credit_1" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCredit1(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCredit1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCredit1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCredit1: %w", err)
	}
	return oldValue.Credit1, nil
}

// AddCredit1 adds f to the "credit_1" field.
func (m *UserMutation) AddCredit1(f float64) {
	if m.addcredit_1 != nil {
		*m.addcredit_1 += f
	} else {
		m.addcredit_1 = &f
	}
}

// AddedCredit1 returns the value that was added to the "credit_1" field in this mutation.
func (m *UserMutation) AddedCredit1() (r float64, exists bool) {
	v := m.addcredit_1
	if v == nil {
		return
	}
	return *v, true
}

// ResetCredit1 resets all changes to the "credit_1" field.
func (m *UserMutation) ResetCredit1() {
	m.credit_1 = nil
	m.addcredit_1 = nil
}

// SetCredit2 sets the "credit_2" field.
func (m *UserMutation) SetCredit2(f float64) {
	m.credit_2 = &f
	m.addcredit_2 = nil
}

// Credit2 returns the value of the "credit_2" field in the mutation.
func (m *UserMutation) Credit2() (r float64, exists bool) {
	v := m.credit_2
	if v == nil {
		return
	}
	return *v, true
}

// OldCredit2 returns the old "credit_2" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCredit2(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCredit2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCredit2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCredit2: %w", err)
	}
	return oldValue.Credit2, nil
}

// AddCredit2 adds f to the "credit_2" field.
func (m *UserMutation) AddCredit2(f float64) {
	if m.addcredit_2 != nil {
		*m.addcredit_2 += f
	} else {
		m.addcredit_2 = &f
	}
}

// AddedCredit2 returns the value that was added to the "credit_2" field in this mutation.
func (m *UserMutation) AddedCredit2() (r float64, exists bool) {
	v := m.addcredit_2
	if v == nil {
		return
	}
	return *v, true
}

// ResetCredit2 resets all changes to the "credit_2" field.
func (m *UserMutation) ResetCredit2() {
	m.credit_2 = nil
	m.addcredit_2 = nil
}

// SetCredit3 sets the "credit_3" field.
func (m *UserMutation) SetCredit3(f float64) {
	m.credit_3 = &f
	m.addcredit_3 = nil
}

// Credit3 returns the value of the "credit_3" field in the mutation.
func (m *UserMutation) Credit3() (r float64, exists bool) {
	v := m.credit_3
	if v == nil {
		return
	}
	return *v, true
}

// OldCredit3 returns the old "credit_3" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCredit3(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCredit3 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCredit3 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCredit3: %w", err)
	}
	return oldValue.Credit3, nil
}

// AddCredit3 adds f to the "credit_3" field.
func (m *UserMutation) AddCredit3(f float64) {
	if m.addcredit_3 != nil {
		*m.addcredit_3 += f
	} else {
		m.addcredit_3 = &f
	}
}

// AddedCredit3 returns the value that was added to the "credit_3" field in this mutation.
func (m *UserMutation) AddedCredit3() (r float64, exists bool) {
	v := m.addcredit_3
	if v == nil {
		return
	}
	return *v, true
}

// ResetCredit3 resets all changes to the "credit_3" field.
func (m *UserMutation) ResetCredit3() {
	m.credit_3 = nil
	m.addcredit_3 = nil
}

// SetCredit4 sets the "credit_4" field.
func (m *UserMutation) SetCredit4(f float64) {
	m.credit_4 = &f
	m.addcredit_4 = nil
}

// Credit4 returns the value of the "credit_4" field in the mutation.
func (m *UserMutation) Credit4() (r float64, exists bool) {
	v := m.credit_4
	if v == nil {
		return
	}
	return *v, true
}

// OldCredit4 returns the old "credit_4" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCredit4(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCredit4 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCredit4 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCredit4: %w", err)
	}
	return oldValue.Credit4, nil
}

// AddCredit4 adds f to the "credit_4" field.
func (m *UserMutation) AddCredit4(f float64) {
	if m.addcredit_4 != nil {
		*m.addcredit_4 += f
	} else {
		m.addcredit_4 = &f
	}
}

// AddedCredit4 returns the value that was added to the "credit_4" field in this mutation.
func (m *UserMutation) AddedCredit4() (r float64, exists bool) {
	v := m.addcredit_4
	if v == nil {
		return
	}
	return *v, true
}

// ResetCredit4 resets all changes to the "credit_4" field.
func (m *UserMutation) ResetCredit4() {
	m.credit_4 = nil
	m.addcredit_4 = nil
}

// SetCredit5 sets the "credit_5" field.
func (m *UserMutation) SetCredit5(f float64) {
	m.credit_5 = &f
	m.addcredit_5 = nil
}

// Credit5 returns the value of the "credit_5" field in the mutation.
func (m *UserMutation) Credit5() (r float64, exists bool) {
	v := m.credit_5
	if v == nil {
		return
	}
	return *v, true
}

// OldCredit5 returns the old "credit_5" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCredit5(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCredit5 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCredit5 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCredit5: %w", err)
	}
	return oldValue.Credit5, nil
}

// AddCredit5 adds f to the "credit_5" field.
func (m *UserMutation) AddCredit5(f float64) {
	if m.addcredit_5 != nil {
		*m.addcredit_5 += f
	} else {
		m.addcredit_5 = &f
	}
}

// AddedCredit5 returns the value that was added to the "credit_5" field in this mutation.
func (m *UserMutation) AddedCredit5() (r float64, exists bool) {
	v := m.addcredit_5
	if v == nil {
		return
	}
	return *v, true
}

// ResetCredit5 resets all changes to the "credit_5" field.
func (m *UserMutation) ResetCredit5() {
	m.credit_5 = nil
	m.addcredit_5 = nil
}

// SetBankID sets the "bank_id" field.
func (m *UserMutation) SetBankID(u uint64) {
	m.bank = &u
}

// BankID returns the value of the "bank_id" field in the mutation.
func (m *UserMutation) BankID() (r uint64, exists bool) {
	v := m.bank
	if v == nil {
		return
	}
	return *v, true
}

// OldBankID returns the old "bank_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBankID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBankID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBankID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBankID: %w", err)
	}
	return oldValue.BankID, nil
}

// ClearBankID clears the value of the "bank_id" field.
func (m *UserMutation) ClearBankID() {
	m.bank = nil
	m.clearedFields[user.FieldBankID] = struct{}{}
}

// BankIDCleared returns if the "bank_id" field was cleared in this mutation.
func (m *UserMutation) BankIDCleared() bool {
	_, ok := m.clearedFields[user.FieldBankID]
	return ok
}

// ResetBankID resets all changes to the "bank_id" field.
func (m *UserMutation) ResetBankID() {
	m.bank = nil
	delete(m.clearedFields, user.FieldBankID)
}

// SetBankAccountName sets the "bank_account_name" field.
func (m *UserMutation) SetBankAccountName(s string) {
	m.bank_account_name = &s
}

// BankAccountName returns the value of the "bank_account_name" field in the mutation.
func (m *UserMutation) BankAccountName() (r string, exists bool) {
	v := m.bank_account_name
	if v == nil {
		return
	}
	return *v, true
}

// OldBankAccountName returns the old "bank_account_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBankAccountName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBankAccountName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBankAccountName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBankAccountName: %w", err)
	}
	return oldValue.BankAccountName, nil
}

// ClearBankAccountName clears the value of the "bank_account_name" field.
func (m *UserMutation) ClearBankAccountName() {
	m.bank_account_name = nil
	m.clearedFields[user.FieldBankAccountName] = struct{}{}
}

// BankAccountNameCleared returns if the "bank_account_name" field was cleared in this mutation.
func (m *UserMutation) BankAccountNameCleared() bool {
	_, ok := m.clearedFields[user.FieldBankAccountName]
	return ok
}

// ResetBankAccountName resets all changes to the "bank_account_name" field.
func (m *UserMutation) ResetBankAccountName() {
	m.bank_account_name = nil
	delete(m.clearedFields, user.FieldBankAccountName)
}

// SetBankAccountNumber sets the "bank_account_number" field.
func (m *UserMutation) SetBankAccountNumber(s string) {
	m.bank_account_number = &s
}

// BankAccountNumber returns the value of the "bank_account_number" field in the mutation.
func (m *UserMutation) BankAccountNumber() (r string, exists bool) {
	v := m.bank_account_number
	if v == nil {
		return
	}
	return *v, true
}

// OldBankAccountNumber returns the old "bank_account_number" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBankAccountNumber(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBankAccountNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBankAccountNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBankAccountNumber: %w", err)
	}
	return oldValue.BankAccountNumber, nil
}

// ClearBankAccountNumber clears the value of the "bank_account_number" field.
func (m *UserMutation) ClearBankAccountNumber() {
	m.bank_account_number = nil
	m.clearedFields[user.FieldBankAccountNumber] = struct{}{}
}

// BankAccountNumberCleared returns if the "bank_account_number" field was cleared in this mutation.
func (m *UserMutation) BankAccountNumberCleared() bool {
	_, ok := m.clearedFields[user.FieldBankAccountNumber]
	return ok
}

// ResetBankAccountNumber resets all changes to the "bank_account_number" field.
func (m *UserMutation) ResetBankAccountNumber() {
	m.bank_account_number = nil
	delete(m.clearedFields, user.FieldBankAccountNumber)
}

// SetNationalID sets the "national_id" field.
func (m *UserMutation) SetNationalID(s string) {
	m.national_id = &s
}

// NationalID returns the value of the "national_id" field in the mutation.
func (m *UserMutation) NationalID() (r string, exists bool) {
	v := m.national_id
	if v == nil {
		return
	}
	return *v, true
}

// OldNationalID returns the old "national_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldNationalID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNationalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNationalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNationalID: %w", err)
	}
	return oldValue.NationalID, nil
}

// ClearNationalID clears the value of the "national_id" field.
func (m *UserMutation) ClearNationalID() {
	m.national_id = nil
	m.clearedFields[user.FieldNationalID] = struct{}{}
}

// NationalIDCleared returns if the "national_id" field was cleared in this mutation.
func (m *UserMutation) NationalIDCleared() bool {
	_, ok := m.clearedFields[user.FieldNationalID]
	return ok
}

// ResetNationalID resets all changes to the "national_id" field.
func (m *UserMutation) ResetNationalID() {
	m.national_id = nil
	delete(m.clearedFields, user.FieldNationalID)
}

// SetFirstLogin sets the "first_login" field.
func (m *UserMutation) SetFirstLogin(b bool) {
	m.first_login = &b
}

// FirstLogin returns the value of the "first_login" field in the mutation.
func (m *UserMutation) FirstLogin() (r bool, exists bool) {
	v := m.first_login
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstLogin returns the old "first_login" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstLogin(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstLogin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstLogin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstLogin: %w", err)
	}
	return oldValue.FirstLogin, nil
}

// ResetFirstLogin resets all changes to the "first_login" field.
func (m *UserMutation) ResetFirstLogin() {
	m.first_login = nil
}

// SetBanUntil sets the "ban_until" field.
func (m *UserMutation) SetBanUntil(t time.Time) {
	m.ban_until = &t
}

// BanUntil returns the value of the "ban_until" field in the mutation.
func (m *UserMutation) BanUntil() (r time.Time, exists bool) {
	v := m.ban_until
	if v == nil {
		return
	}
	return *v, true
}

// OldBanUntil returns the old "ban_until" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBanUntil(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBanUntil is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBanUntil requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBanUntil: %w", err)
	}
	return oldValue.BanUntil, nil
}

// ClearBanUntil clears the value of the "ban_until" field.
func (m *UserMutation) ClearBanUntil() {
	m.ban_until = nil
	m.clearedFields[user.FieldBanUntil] = struct{}{}
}

// BanUntilCleared returns if the "ban_until" field was cleared in this mutation.
func (m *UserMutation) BanUntilCleared() bool {
	_, ok := m.clearedFields[user.FieldBanUntil]
	return ok
}

// ResetBanUntil resets all changes to the "ban_until" field.
func (m *UserMutation) ResetBanUntil() {
	m.ban_until = nil
	delete(m.clearedFields, user.FieldBanUntil)
}

// SetNewLoginAt sets the "new_login_at" field.
func (m *UserMutation) SetNewLoginAt(t time.Time) {
	m.new_login_at = &t
}

// NewLoginAt returns the value of the "new_login_at" field in the mutation.
func (m *UserMutation) NewLoginAt() (r time.Time, exists bool) {
	v := m.new_login_at
	if v == nil {
		return
	}
	return *v, true
}

// OldNewLoginAt returns the old "new_login_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldNewLoginAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNewLoginAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNewLoginAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNewLoginAt: %w", err)
	}
	return oldValue.NewLoginAt, nil
}

// ClearNewLoginAt clears the value of the "new_login_at" field.
func (m *UserMutation) ClearNewLoginAt() {
	m.new_login_at = nil
	m.clearedFields[user.FieldNewLoginAt] = struct{}{}
}

// NewLoginAtCleared returns if the "new_login_at" field was cleared in this mutation.
func (m *UserMutation) NewLoginAtCleared() bool {
	_, ok := m.clearedFields[user.FieldNewLoginAt]
	return ok
}

// ResetNewLoginAt resets all changes to the "new_login_at" field.
func (m *UserMutation) ResetNewLoginAt() {
	m.new_login_at = nil
	delete(m.clearedFields, user.FieldNewLoginAt)
}

// SetLastLoginAt sets the "last_login_at" field.
func (m *UserMutation) SetLastLoginAt(t time.Time) {
	m.last_login_at = &t
}

// LastLoginAt returns the value of the "last_login_at" field in the mutation.
func (m *UserMutation) LastLoginAt() (r time.Time, exists bool) {
	v := m.last_login_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginAt returns the old "last_login_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastLoginAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginAt: %w", err)
	}
	return oldValue.LastLoginAt, nil
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (m *UserMutation) ClearLastLoginAt() {
	m.last_login_at = nil
	m.clearedFields[user.FieldLastLoginAt] = struct{}{}
}

// LastLoginAtCleared returns if the "last_login_at" field was cleared in this mutation.
func (m *UserMutation) LastLoginAtCleared() bool {
	_, ok := m.clearedFields[user.FieldLastLoginAt]
	return ok
}

// ResetLastLoginAt resets all changes to the "last_login_at" field.
func (m *UserMutation) ResetLastLoginAt() {
	m.last_login_at = nil
	delete(m.clearedFields, user.FieldLastLoginAt)
}

// SetUnilevel sets the "unilevel" field.
func (m *UserMutation) SetUnilevel(u uint64) {
	m.unilevel = &u
	m.addunilevel = nil
}

// Unilevel returns the value of the "unilevel" field in the mutation.
func (m *UserMutation) Unilevel() (r uint64, exists bool) {
	v := m.unilevel
	if v == nil {
		return
	}
	return *v, true
}

// OldUnilevel returns the old "unilevel" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUnilevel(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnilevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnilevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnilevel: %w", err)
	}
	return oldValue.Unilevel, nil
}

// AddUnilevel adds u to the "unilevel" field.
func (m *UserMutation) AddUnilevel(u int64) {
	if m.addunilevel != nil {
		*m.addunilevel += u
	} else {
		m.addunilevel = &u
	}
}

// AddedUnilevel returns the value that was added to the "unilevel" field in this mutation.
func (m *UserMutation) AddedUnilevel() (r int64, exists bool) {
	v := m.addunilevel
	if v == nil {
		return
	}
	return *v, true
}

// ClearUnilevel clears the value of the "unilevel" field.
func (m *UserMutation) ClearUnilevel() {
	m.unilevel = nil
	m.addunilevel = nil
	m.clearedFields[user.FieldUnilevel] = struct{}{}
}

// UnilevelCleared returns if the "unilevel" field was cleared in this mutation.
func (m *UserMutation) UnilevelCleared() bool {
	_, ok := m.clearedFields[user.FieldUnilevel]
	return ok
}

// ResetUnilevel resets all changes to the "unilevel" field.
func (m *UserMutation) ResetUnilevel() {
	m.unilevel = nil
	m.addunilevel = nil
	delete(m.clearedFields, user.FieldUnilevel)
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[user.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, user.FieldDeletedAt)
}

// ClearCountry clears the "country" edge to the Country entity.
func (m *UserMutation) ClearCountry() {
	m.clearedcountry = true
	m.clearedFields[user.FieldCountryID] = struct{}{}
}

// CountryCleared reports if the "country" edge to the Country entity was cleared.
func (m *UserMutation) CountryCleared() bool {
	return m.CountryIDCleared() || m.clearedcountry
}

// CountryIDs returns the "country" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CountryID instead. It exists only for internal usage by the builders.
func (m *UserMutation) CountryIDs() (ids []uint64) {
	if id := m.country; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCountry resets all changes to the "country" edge.
func (m *UserMutation) ResetCountry() {
	m.country = nil
	m.clearedcountry = false
}

// ClearContactCountry clears the "contact_country" edge to the Country entity.
func (m *UserMutation) ClearContactCountry() {
	m.clearedcontact_country = true
	m.clearedFields[user.FieldContactCountryID] = struct{}{}
}

// ContactCountryCleared reports if the "contact_country" edge to the Country entity was cleared.
func (m *UserMutation) ContactCountryCleared() bool {
	return m.ContactCountryIDCleared() || m.clearedcontact_country
}

// ContactCountryIDs returns the "contact_country" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ContactCountryID instead. It exists only for internal usage by the builders.
func (m *UserMutation) ContactCountryIDs() (ids []uint64) {
	if id := m.contact_country; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetContactCountry resets all changes to the "contact_country" edge.
func (m *UserMutation) ResetContactCountry() {
	m.contact_country = nil
	m.clearedcontact_country = false
}

// SetIntroducerID sets the "introducer" edge to the User entity by id.
func (m *UserMutation) SetIntroducerID(id uint64) {
	m.introducer = &id
}

// ClearIntroducer clears the "introducer" edge to the User entity.
func (m *UserMutation) ClearIntroducer() {
	m.clearedintroducer = true
	m.clearedFields[user.FieldIntroducerUserID] = struct{}{}
}

// IntroducerCleared reports if the "introducer" edge to the User entity was cleared.
func (m *UserMutation) IntroducerCleared() bool {
	return m.IntroducerUserIDCleared() || m.clearedintroducer
}

// IntroducerID returns the "introducer" edge ID in the mutation.
func (m *UserMutation) IntroducerID() (id uint64, exists bool) {
	if m.introducer != nil {
		return *m.introducer, true
	}
	return
}

// IntroducerIDs returns the "introducer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// IntroducerID instead. It exists only for internal usage by the builders.
func (m *UserMutation) IntroducerIDs() (ids []uint64) {
	if id := m.introducer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIntroducer resets all changes to the "introducer" edge.
func (m *UserMutation) ResetIntroducer() {
	m.introducer = nil
	m.clearedintroducer = false
}

// ClearBank clears the "bank" edge to the Bank entity.
func (m *UserMutation) ClearBank() {
	m.clearedbank = true
	m.clearedFields[user.FieldBankID] = struct{}{}
}

// BankCleared reports if the "bank" edge to the Bank entity was cleared.
func (m *UserMutation) BankCleared() bool {
	return m.BankIDCleared() || m.clearedbank
}

// BankIDs returns the "bank" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BankID instead. It exists only for internal usage by the builders.
func (m *UserMutation) BankIDs() (ids []uint64) {
	if id := m.bank; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBank resets all changes to the "bank" edge.
func (m *UserMutation) ResetBank() {
	m.bank = nil
	m.clearedbank = false
}

// AddIntroducedUserIDs adds the "introduced_users" edge to the User entity by ids.
func (m *UserMutation) AddIntroducedUserIDs(ids ...uint64) {
	if m.introduced_users == nil {
		m.introduced_users = make(map[uint64]struct{})
	}
	for i := range ids {
		m.introduced_users[ids[i]] = struct{}{}
	}
}

// ClearIntroducedUsers clears the "introduced_users" edge to the User entity.
func (m *UserMutation) ClearIntroducedUsers() {
	m.clearedintroduced_users = true
}

// IntroducedUsersCleared reports if the "introduced_users" edge to the User entity was cleared.
func (m *UserMutation) IntroducedUsersCleared() bool {
	return m.clearedintroduced_users
}

// RemoveIntroducedUserIDs removes the "introduced_users" edge to the User entity by IDs.
func (m *UserMutation) RemoveIntroducedUserIDs(ids ...uint64) {
	if m.removedintroduced_users == nil {
		m.removedintroduced_users = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.introduced_users, ids[i])
		m.removedintroduced_users[ids[i]] = struct{}{}
	}
}

// RemovedIntroducedUsers returns the removed IDs of the "introduced_users" edge to the User entity.
func (m *UserMutation) RemovedIntroducedUsersIDs() (ids []uint64) {
	for id := range m.removedintroduced_users {
		ids = append(ids, id)
	}
	return
}

// IntroducedUsersIDs returns the "introduced_users" edge IDs in the mutation.
func (m *UserMutation) IntroducedUsersIDs() (ids []uint64) {
	for id := range m.introduced_users {
		ids = append(ids, id)
	}
	return
}

// ResetIntroducedUsers resets all changes to the "introduced_users" edge.
func (m *UserMutation) ResetIntroducedUsers() {
	m.introduced_users = nil
	m.clearedintroduced_users = false
	m.removedintroduced_users = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 30)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.email_verified_at != nil {
		fields = append(fields, user.FieldEmailVerifiedAt)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.password2 != nil {
		fields = append(fields, user.FieldPassword2)
	}
	if m.country != nil {
		fields = append(fields, user.FieldCountryID)
	}
	if m.contact_country != nil {
		fields = append(fields, user.FieldContactCountryID)
	}
	if m.contact_number != nil {
		fields = append(fields, user.FieldContactNumber)
	}
	if m.full_contact_number != nil {
		fields = append(fields, user.FieldFullContactNumber)
	}
	if m.introducer != nil {
		fields = append(fields, user.FieldIntroducerUserID)
	}
	if m.lang != nil {
		fields = append(fields, user.FieldLang)
	}
	if m.avatar != nil {
		fields = append(fields, user.FieldAvatar)
	}
	if m.credit_1 != nil {
		fields = append(fields, user.FieldCredit1)
	}
	if m.credit_2 != nil {
		fields = append(fields, user.FieldCredit2)
	}
	if m.credit_3 != nil {
		fields = append(fields, user.FieldCredit3)
	}
	if m.credit_4 != nil {
		fields = append(fields, user.FieldCredit4)
	}
	if m.credit_5 != nil {
		fields = append(fields, user.FieldCredit5)
	}
	if m.bank != nil {
		fields = append(fields, user.FieldBankID)
	}
	if m.bank_account_name != nil {
		fields = append(fields, user.FieldBankAccountName)
	}
	if m.bank_account_number != nil {
		fields = append(fields, user.FieldBankAccountNumber)
	}
	if m.national_id != nil {
		fields = append(fields, user.FieldNationalID)
	}
	if m.first_login != nil {
		fields = append(fields, user.FieldFirstLogin)
	}
	if m.ban_until != nil {
		fields = append(fields, user.FieldBanUntil)
	}
	if m.new_login_at != nil {
		fields = append(fields, user.FieldNewLoginAt)
	}
	if m.last_login_at != nil {
		fields = append(fields, user.FieldLastLoginAt)
	}
	if m.unilevel != nil {
		fields = append(fields, user.FieldUnilevel)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, user.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldEmailVerifiedAt:
		return m.EmailVerifiedAt()
	case user.FieldPassword:
		return m.Password()
	case user.FieldPassword2:
		return m.Password2()
	case user.FieldCountryID:
		return m.CountryID()
	case user.FieldContactCountryID:
		return m.ContactCountryID()
	case user.FieldContactNumber:
		return m.ContactNumber()
	case user.FieldFullContactNumber:
		return m.FullContactNumber()
	case user.FieldIntroducerUserID:
		return m.IntroducerUserID()
	case user.FieldLang:
		return m.Lang()
	case user.FieldAvatar:
		return m.Avatar()
	case user.FieldCredit1:
		return m.Credit1()
	case user.FieldCredit2:
		return m.Credit2()
	case user.FieldCredit3:
		return m.Credit3()
	case user.FieldCredit4:
		return m.Credit4()
	case user.FieldCredit5:
		return m.Credit5()
	case user.FieldBankID:
		return m.BankID()
	case user.FieldBankAccountName:
		return m.BankAccountName()
	case user.FieldBankAccountNumber:
		return m.BankAccountNumber()
	case user.FieldNationalID:
		return m.NationalID()
	case user.FieldFirstLogin:
		return m.FirstLogin()
	case user.FieldBanUntil:
		return m.BanUntil()
	case user.FieldNewLoginAt:
		return m.NewLoginAt()
	case user.FieldLastLoginAt:
		return m.LastLoginAt()
	case user.FieldUnilevel:
		return m.Unilevel()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldEmailVerifiedAt:
		return m.OldEmailVerifiedAt(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldPassword2:
		return m.OldPassword2(ctx)
	case user.FieldCountryID:
		return m.OldCountryID(ctx)
	case user.FieldContactCountryID:
		return m.OldContactCountryID(ctx)
	case user.FieldContactNumber:
		return m.OldContactNumber(ctx)
	case user.FieldFullContactNumber:
		return m.OldFullContactNumber(ctx)
	case user.FieldIntroducerUserID:
		return m.OldIntroducerUserID(ctx)
	case user.FieldLang:
		return m.OldLang(ctx)
	case user.FieldAvatar:
		return m.OldAvatar(ctx)
	case user.FieldCredit1:
		return m.OldCredit1(ctx)
	case user.FieldCredit2:
		return m.OldCredit2(ctx)
	case user.FieldCredit3:
		return m.OldCredit3(ctx)
	case user.FieldCredit4:
		return m.OldCredit4(ctx)
	case user.FieldCredit5:
		return m.OldCredit5(ctx)
	case user.FieldBankID:
		return m.OldBankID(ctx)
	case user.FieldBankAccountName:
		return m.OldBankAccountName(ctx)
	case user.FieldBankAccountNumber:
		return m.OldBankAccountNumber(ctx)
	case user.FieldNationalID:
		return m.OldNationalID(ctx)
	case user.FieldFirstLogin:
		return m.OldFirstLogin(ctx)
	case user.FieldBanUntil:
		return m.OldBanUntil(ctx)
	case user.FieldNewLoginAt:
		return m.OldNewLoginAt(ctx)
	case user.FieldLastLoginAt:
		return m.OldLastLoginAt(ctx)
	case user.FieldUnilevel:
		return m.OldUnilevel(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldEmailVerifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailVerifiedAt(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldPassword2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword2(v)
		return nil
	case user.FieldCountryID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountryID(v)
		return nil
	case user.FieldContactCountryID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactCountryID(v)
		return nil
	case user.FieldContactNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactNumber(v)
		return nil
	case user.FieldFullContactNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullContactNumber(v)
		return nil
	case user.FieldIntroducerUserID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIntroducerUserID(v)
		return nil
	case user.FieldLang:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLang(v)
		return nil
	case user.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case user.FieldCredit1:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCredit1(v)
		return nil
	case user.FieldCredit2:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCredit2(v)
		return nil
	case user.FieldCredit3:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCredit3(v)
		return nil
	case user.FieldCredit4:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCredit4(v)
		return nil
	case user.FieldCredit5:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCredit5(v)
		return nil
	case user.FieldBankID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBankID(v)
		return nil
	case user.FieldBankAccountName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBankAccountName(v)
		return nil
	case user.FieldBankAccountNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBankAccountNumber(v)
		return nil
	case user.FieldNationalID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNationalID(v)
		return nil
	case user.FieldFirstLogin:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstLogin(v)
		return nil
	case user.FieldBanUntil:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBanUntil(v)
		return nil
	case user.FieldNewLoginAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNewLoginAt(v)
		return nil
	case user.FieldLastLoginAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginAt(v)
		return nil
	case user.FieldUnilevel:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnilevel(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addcredit_1 != nil {
		fields = append(fields, user.FieldCredit1)
	}
	if m.addcredit_2 != nil {
		fields = append(fields, user.FieldCredit2)
	}
	if m.addcredit_3 != nil {
		fields = append(fields, user.FieldCredit3)
	}
	if m.addcredit_4 != nil {
		fields = append(fields, user.FieldCredit4)
	}
	if m.addcredit_5 != nil {
		fields = append(fields, user.FieldCredit5)
	}
	if m.addunilevel != nil {
		fields = append(fields, user.FieldUnilevel)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCredit1:
		return m.AddedCredit1()
	case user.FieldCredit2:
		return m.AddedCredit2()
	case user.FieldCredit3:
		return m.AddedCredit3()
	case user.FieldCredit4:
		return m.AddedCredit4()
	case user.FieldCredit5:
		return m.AddedCredit5()
	case user.FieldUnilevel:
		return m.AddedUnilevel()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldCredit1:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCredit1(v)
		return nil
	case user.FieldCredit2:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCredit2(v)
		return nil
	case user.FieldCredit3:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCredit3(v)
		return nil
	case user.FieldCredit4:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCredit4(v)
		return nil
	case user.FieldCredit5:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCredit5(v)
		return nil
	case user.FieldUnilevel:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUnilevel(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldUsername) {
		fields = append(fields, user.FieldUsername)
	}
	if m.FieldCleared(user.FieldName) {
		fields = append(fields, user.FieldName)
	}
	if m.FieldCleared(user.FieldEmail) {
		fields = append(fields, user.FieldEmail)
	}
	if m.FieldCleared(user.FieldEmailVerifiedAt) {
		fields = append(fields, user.FieldEmailVerifiedAt)
	}
	if m.FieldCleared(user.FieldCountryID) {
		fields = append(fields, user.FieldCountryID)
	}
	if m.FieldCleared(user.FieldContactCountryID) {
		fields = append(fields, user.FieldContactCountryID)
	}
	if m.FieldCleared(user.FieldContactNumber) {
		fields = append(fields, user.FieldContactNumber)
	}
	if m.FieldCleared(user.FieldFullContactNumber) {
		fields = append(fields, user.FieldFullContactNumber)
	}
	if m.FieldCleared(user.FieldIntroducerUserID) {
		fields = append(fields, user.FieldIntroducerUserID)
	}
	if m.FieldCleared(user.FieldAvatar) {
		fields = append(fields, user.FieldAvatar)
	}
	if m.FieldCleared(user.FieldBankID) {
		fields = append(fields, user.FieldBankID)
	}
	if m.FieldCleared(user.FieldBankAccountName) {
		fields = append(fields, user.FieldBankAccountName)
	}
	if m.FieldCleared(user.FieldBankAccountNumber) {
		fields = append(fields, user.FieldBankAccountNumber)
	}
	if m.FieldCleared(user.FieldNationalID) {
		fields = append(fields, user.FieldNationalID)
	}
	if m.FieldCleared(user.FieldBanUntil) {
		fields = append(fields, user.FieldBanUntil)
	}
	if m.FieldCleared(user.FieldNewLoginAt) {
		fields = append(fields, user.FieldNewLoginAt)
	}
	if m.FieldCleared(user.FieldLastLoginAt) {
		fields = append(fields, user.FieldLastLoginAt)
	}
	if m.FieldCleared(user.FieldUnilevel) {
		fields = append(fields, user.FieldUnilevel)
	}
	if m.FieldCleared(user.FieldDeletedAt) {
		fields = append(fields, user.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ClearUsername()
		return nil
	case user.FieldName:
		m.ClearName()
		return nil
	case user.FieldEmail:
		m.ClearEmail()
		return nil
	case user.FieldEmailVerifiedAt:
		m.ClearEmailVerifiedAt()
		return nil
	case user.FieldCountryID:
		m.ClearCountryID()
		return nil
	case user.FieldContactCountryID:
		m.ClearContactCountryID()
		return nil
	case user.FieldContactNumber:
		m.ClearContactNumber()
		return nil
	case user.FieldFullContactNumber:
		m.ClearFullContactNumber()
		return nil
	case user.FieldIntroducerUserID:
		m.ClearIntroducerUserID()
		return nil
	case user.FieldAvatar:
		m.ClearAvatar()
		return nil
	case user.FieldBankID:
		m.ClearBankID()
		return nil
	case user.FieldBankAccountName:
		m.ClearBankAccountName()
		return nil
	case user.FieldBankAccountNumber:
		m.ClearBankAccountNumber()
		return nil
	case user.FieldNationalID:
		m.ClearNationalID()
		return nil
	case user.FieldBanUntil:
		m.ClearBanUntil()
		return nil
	case user.FieldNewLoginAt:
		m.ClearNewLoginAt()
		return nil
	case user.FieldLastLoginAt:
		m.ClearLastLoginAt()
		return nil
	case user.FieldUnilevel:
		m.ClearUnilevel()
		return nil
	case user.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldEmailVerifiedAt:
		m.ResetEmailVerifiedAt()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldPassword2:
		m.ResetPassword2()
		return nil
	case user.FieldCountryID:
		m.ResetCountryID()
		return nil
	case user.FieldContactCountryID:
		m.ResetContactCountryID()
		return nil
	case user.FieldContactNumber:
		m.ResetContactNumber()
		return nil
	case user.FieldFullContactNumber:
		m.ResetFullContactNumber()
		return nil
	case user.FieldIntroducerUserID:
		m.ResetIntroducerUserID()
		return nil
	case user.FieldLang:
		m.ResetLang()
		return nil
	case user.FieldAvatar:
		m.ResetAvatar()
		return nil
	case user.FieldCredit1:
		m.ResetCredit1()
		return nil
	case user.FieldCredit2:
		m.ResetCredit2()
		return nil
	case user.FieldCredit3:
		m.ResetCredit3()
		return nil
	case user.FieldCredit4:
		m.ResetCredit4()
		return nil
	case user.FieldCredit5:
		m.ResetCredit5()
		return nil
	case user.FieldBankID:
		m.ResetBankID()
		return nil
	case user.FieldBankAccountName:
		m.ResetBankAccountName()
		return nil
	case user.FieldBankAccountNumber:
		m.ResetBankAccountNumber()
		return nil
	case user.FieldNationalID:
		m.ResetNationalID()
		return nil
	case user.FieldFirstLogin:
		m.ResetFirstLogin()
		return nil
	case user.FieldBanUntil:
		m.ResetBanUntil()
		return nil
	case user.FieldNewLoginAt:
		m.ResetNewLoginAt()
		return nil
	case user.FieldLastLoginAt:
		m.ResetLastLoginAt()
		return nil
	case user.FieldUnilevel:
		m.ResetUnilevel()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.country != nil {
		edges = append(edges, user.EdgeCountry)
	}
	if m.contact_country != nil {
		edges = append(edges, user.EdgeContactCountry)
	}
	if m.introducer != nil {
		edges = append(edges, user.EdgeIntroducer)
	}
	if m.bank != nil {
		edges = append(edges, user.EdgeBank)
	}
	if m.introduced_users != nil {
		edges = append(edges, user.EdgeIntroducedUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCountry:
		if id := m.country; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeContactCountry:
		if id := m.contact_country; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeIntroducer:
		if id := m.introducer; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeBank:
		if id := m.bank; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeIntroducedUsers:
		ids := make([]ent.Value, 0, len(m.introduced_users))
		for id := range m.introduced_users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedintroduced_users != nil {
		edges = append(edges, user.EdgeIntroducedUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeIntroducedUsers:
		ids := make([]ent.Value, 0, len(m.removedintroduced_users))
		for id := range m.removedintroduced_users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedcountry {
		edges = append(edges, user.EdgeCountry)
	}
	if m.clearedcontact_country {
		edges = append(edges, user.EdgeContactCountry)
	}
	if m.clearedintroducer {
		edges = append(edges, user.EdgeIntroducer)
	}
	if m.clearedbank {
		edges = append(edges, user.EdgeBank)
	}
	if m.clearedintroduced_users {
		edges = append(edges, user.EdgeIntroducedUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeCountry:
		return m.clearedcountry
	case user.EdgeContactCountry:
		return m.clearedcontact_country
	case user.EdgeIntroducer:
		return m.clearedintroducer
	case user.EdgeBank:
		return m.clearedbank
	case user.EdgeIntroducedUsers:
		return m.clearedintroduced_users
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeCountry:
		m.ClearCountry()
		return nil
	case user.EdgeContactCountry:
		m.ClearContactCountry()
		return nil
	case user.EdgeIntroducer:
		m.ClearIntroducer()
		return nil
	case user.EdgeBank:
		m.ClearBank()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeCountry:
		m.ResetCountry()
		return nil
	case user.EdgeContactCountry:
		m.ResetContactCountry()
		return nil
	case user.EdgeIntroducer:
		m.ResetIntroducer()
		return nil
	case user.EdgeBank:
		m.ResetBank()
		return nil
	case user.EdgeIntroducedUsers:
		m.ResetIntroducedUsers()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
