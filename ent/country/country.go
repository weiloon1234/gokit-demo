// Code generated by ent, DO NOT EDIT.

package country

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the country type in the database.
	Label = "country"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIso2 holds the string denoting the iso2 field in the database.
	FieldIso2 = "iso2"
	// FieldIso3 holds the string denoting the iso3 field in the database.
	FieldIso3 = "iso3"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldOfficialName holds the string denoting the official_name field in the database.
	FieldOfficialName = "official_name"
	// FieldNumericCode holds the string denoting the numeric_code field in the database.
	FieldNumericCode = "numeric_code"
	// FieldPhoneCode holds the string denoting the phone_code field in the database.
	FieldPhoneCode = "phone_code"
	// FieldCapital holds the string denoting the capital field in the database.
	FieldCapital = "capital"
	// FieldCurrencyName holds the string denoting the currency_name field in the database.
	FieldCurrencyName = "currency_name"
	// FieldCurrencyCode holds the string denoting the currency_code field in the database.
	FieldCurrencyCode = "currency_code"
	// FieldCurrencySymbol holds the string denoting the currency_symbol field in the database.
	FieldCurrencySymbol = "currency_symbol"
	// FieldConversionRate holds the string denoting the conversion_rate field in the database.
	FieldConversionRate = "conversion_rate"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeLocations holds the string denoting the locations edge name in mutations.
	EdgeLocations = "locations"
	// EdgeBanks holds the string denoting the banks edge name in mutations.
	EdgeBanks = "banks"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeContactUsers holds the string denoting the contact_users edge name in mutations.
	EdgeContactUsers = "contact_users"
	// Table holds the table name of the country in the database.
	Table = "countries"
	// LocationsTable is the table that holds the locations relation/edge.
	LocationsTable = "country_locations"
	// LocationsInverseTable is the table name for the CountryLocation entity.
	// It exists in this package in order to avoid circular dependency with the "countrylocation" package.
	LocationsInverseTable = "country_locations"
	// LocationsColumn is the table column denoting the locations relation/edge.
	LocationsColumn = "country_id"
	// BanksTable is the table that holds the banks relation/edge.
	BanksTable = "banks"
	// BanksInverseTable is the table name for the Bank entity.
	// It exists in this package in order to avoid circular dependency with the "bank" package.
	BanksInverseTable = "banks"
	// BanksColumn is the table column denoting the banks relation/edge.
	BanksColumn = "country_id"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "country_id"
	// ContactUsersTable is the table that holds the contact_users relation/edge.
	ContactUsersTable = "users"
	// ContactUsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ContactUsersInverseTable = "users"
	// ContactUsersColumn is the table column denoting the contact_users relation/edge.
	ContactUsersColumn = "contact_country_id"
)

// Columns holds all SQL columns for country fields.
var Columns = []string{
	FieldID,
	FieldIso2,
	FieldIso3,
	FieldName,
	FieldOfficialName,
	FieldNumericCode,
	FieldPhoneCode,
	FieldCapital,
	FieldCurrencyName,
	FieldCurrencyCode,
	FieldCurrencySymbol,
	FieldConversionRate,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// Iso2Validator is a validator for the "iso2" field. It is called by the builders before save.
	Iso2Validator func(string) error
	// Iso3Validator is a validator for the "iso3" field. It is called by the builders before save.
	Iso3Validator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultConversionRate holds the default value on creation for the "conversion_rate" field.
	DefaultConversionRate float64
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Country queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIso2 orders the results by the iso2 field.
func ByIso2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIso2, opts...).ToFunc()
}

// ByIso3 orders the results by the iso3 field.
func ByIso3(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIso3, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByOfficialName orders the results by the official_name field.
func ByOfficialName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOfficialName, opts...).ToFunc()
}

// ByNumericCode orders the results by the numeric_code field.
func ByNumericCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumericCode, opts...).ToFunc()
}

// ByPhoneCode orders the results by the phone_code field.
func ByPhoneCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneCode, opts...).ToFunc()
}

// ByCapital orders the results by the capital field.
func ByCapital(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCapital, opts...).ToFunc()
}

// ByCurrencyName orders the results by the currency_name field.
func ByCurrencyName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrencyName, opts...).ToFunc()
}

// ByCurrencyCode orders the results by the currency_code field.
func ByCurrencyCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrencyCode, opts...).ToFunc()
}

// ByCurrencySymbol orders the results by the currency_symbol field.
func ByCurrencySymbol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrencySymbol, opts...).ToFunc()
}

// ByConversionRate orders the results by the conversion_rate field.
func ByConversionRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConversionRate, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByLocationsCount orders the results by locations count.
func ByLocationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLocationsStep(), opts...)
	}
}

// ByLocations orders the results by locations terms.
func ByLocations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLocationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBanksCount orders the results by banks count.
func ByBanksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBanksStep(), opts...)
	}
}

// ByBanks orders the results by banks terms.
func ByBanks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBanksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByContactUsersCount orders the results by contact_users count.
func ByContactUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newContactUsersStep(), opts...)
	}
}

// ByContactUsers orders the results by contact_users terms.
func ByContactUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContactUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLocationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LocationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LocationsTable, LocationsColumn),
	)
}
func newBanksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BanksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BanksTable, BanksColumn),
	)
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
	)
}
func newContactUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContactUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ContactUsersTable, ContactUsersColumn),
	)
}
