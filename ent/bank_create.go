// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gokit-demo/ent/bank"
	"gokit-demo/ent/country"
	"gokit-demo/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BankCreate is the builder for creating a Bank entity.
type BankCreate struct {
	config
	mutation *BankMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNameEn sets the "name_en" field.
func (bc *BankCreate) SetNameEn(s string) *BankCreate {
	bc.mutation.SetNameEn(s)
	return bc
}

// SetNameZh sets the "name_zh" field.
func (bc *BankCreate) SetNameZh(s string) *BankCreate {
	bc.mutation.SetNameZh(s)
	return bc
}

// SetCountryID sets the "country_id" field.
func (bc *BankCreate) SetCountryID(u uint64) *BankCreate {
	bc.mutation.SetCountryID(u)
	return bc
}

// SetNillableCountryID sets the "country_id" field if the given value is not nil.
func (bc *BankCreate) SetNillableCountryID(u *uint64) *BankCreate {
	if u != nil {
		bc.SetCountryID(*u)
	}
	return bc
}

// SetCreatedAt sets the "created_at" field.
func (bc *BankCreate) SetCreatedAt(t time.Time) *BankCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BankCreate) SetNillableCreatedAt(t *time.Time) *BankCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BankCreate) SetUpdatedAt(t time.Time) *BankCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BankCreate) SetNillableUpdatedAt(t *time.Time) *BankCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetDeletedAt sets the "deleted_at" field.
func (bc *BankCreate) SetDeletedAt(t time.Time) *BankCreate {
	bc.mutation.SetDeletedAt(t)
	return bc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bc *BankCreate) SetNillableDeletedAt(t *time.Time) *BankCreate {
	if t != nil {
		bc.SetDeletedAt(*t)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BankCreate) SetID(u uint64) *BankCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetCountry sets the "country" edge to the Country entity.
func (bc *BankCreate) SetCountry(c *Country) *BankCreate {
	return bc.SetCountryID(c.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (bc *BankCreate) AddUserIDs(ids ...uint64) *BankCreate {
	bc.mutation.AddUserIDs(ids...)
	return bc
}

// AddUsers adds the "users" edges to the User entity.
func (bc *BankCreate) AddUsers(u ...*User) *BankCreate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return bc.AddUserIDs(ids...)
}

// Mutation returns the BankMutation object of the builder.
func (bc *BankCreate) Mutation() *BankMutation {
	return bc.mutation
}

// Save creates the Bank in the database.
func (bc *BankCreate) Save(ctx context.Context) (*Bank, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BankCreate) SaveX(ctx context.Context) *Bank {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BankCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BankCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BankCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := bank.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := bank.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BankCreate) check() error {
	if _, ok := bc.mutation.NameEn(); !ok {
		return &ValidationError{Name: "name_en", err: errors.New(`ent: missing required field "Bank.name_en"`)}
	}
	if v, ok := bc.mutation.NameEn(); ok {
		if err := bank.NameEnValidator(v); err != nil {
			return &ValidationError{Name: "name_en", err: fmt.Errorf(`ent: validator failed for field "Bank.name_en": %w`, err)}
		}
	}
	if _, ok := bc.mutation.NameZh(); !ok {
		return &ValidationError{Name: "name_zh", err: errors.New(`ent: missing required field "Bank.name_zh"`)}
	}
	if v, ok := bc.mutation.NameZh(); ok {
		if err := bank.NameZhValidator(v); err != nil {
			return &ValidationError{Name: "name_zh", err: fmt.Errorf(`ent: validator failed for field "Bank.name_zh": %w`, err)}
		}
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Bank.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Bank.updated_at"`)}
	}
	return nil
}

func (bc *BankCreate) sqlSave(ctx context.Context) (*Bank, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BankCreate) createSpec() (*Bank, *sqlgraph.CreateSpec) {
	var (
		_node = &Bank{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bank.Table, sqlgraph.NewFieldSpec(bank.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = bc.conflict
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.NameEn(); ok {
		_spec.SetField(bank.FieldNameEn, field.TypeString, value)
		_node.NameEn = value
	}
	if value, ok := bc.mutation.NameZh(); ok {
		_spec.SetField(bank.FieldNameZh, field.TypeString, value)
		_node.NameZh = value
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(bank.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(bank.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.DeletedAt(); ok {
		_spec.SetField(bank.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := bc.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bank.CountryTable,
			Columns: []string{bank.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CountryID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.UsersTable,
			Columns: []string{bank.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Bank.Create().
//		SetNameEn(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BankUpsert) {
//			SetNameEn(v+v).
//		}).
//		Exec(ctx)
func (bc *BankCreate) OnConflict(opts ...sql.ConflictOption) *BankUpsertOne {
	bc.conflict = opts
	return &BankUpsertOne{
		create: bc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Bank.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bc *BankCreate) OnConflictColumns(columns ...string) *BankUpsertOne {
	bc.conflict = append(bc.conflict, sql.ConflictColumns(columns...))
	return &BankUpsertOne{
		create: bc,
	}
}

type (
	// BankUpsertOne is the builder for "upsert"-ing
	//  one Bank node.
	BankUpsertOne struct {
		create *BankCreate
	}

	// BankUpsert is the "OnConflict" setter.
	BankUpsert struct {
		*sql.UpdateSet
	}
)

// SetNameEn sets the "name_en" field.
func (u *BankUpsert) SetNameEn(v string) *BankUpsert {
	u.Set(bank.FieldNameEn, v)
	return u
}

// UpdateNameEn sets the "name_en" field to the value that was provided on create.
func (u *BankUpsert) UpdateNameEn() *BankUpsert {
	u.SetExcluded(bank.FieldNameEn)
	return u
}

// SetNameZh sets the "name_zh" field.
func (u *BankUpsert) SetNameZh(v string) *BankUpsert {
	u.Set(bank.FieldNameZh, v)
	return u
}

// UpdateNameZh sets the "name_zh" field to the value that was provided on create.
func (u *BankUpsert) UpdateNameZh() *BankUpsert {
	u.SetExcluded(bank.FieldNameZh)
	return u
}

// SetCountryID sets the "country_id" field.
func (u *BankUpsert) SetCountryID(v uint64) *BankUpsert {
	u.Set(bank.FieldCountryID, v)
	return u
}

// UpdateCountryID sets the "country_id" field to the value that was provided on create.
func (u *BankUpsert) UpdateCountryID() *BankUpsert {
	u.SetExcluded(bank.FieldCountryID)
	return u
}

// ClearCountryID clears the value of the "country_id" field.
func (u *BankUpsert) ClearCountryID() *BankUpsert {
	u.SetNull(bank.FieldCountryID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *BankUpsert) SetCreatedAt(v time.Time) *BankUpsert {
	u.Set(bank.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BankUpsert) UpdateCreatedAt() *BankUpsert {
	u.SetExcluded(bank.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BankUpsert) SetUpdatedAt(v time.Time) *BankUpsert {
	u.Set(bank.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BankUpsert) UpdateUpdatedAt() *BankUpsert {
	u.SetExcluded(bank.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BankUpsert) SetDeletedAt(v time.Time) *BankUpsert {
	u.Set(bank.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BankUpsert) UpdateDeletedAt() *BankUpsert {
	u.SetExcluded(bank.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BankUpsert) ClearDeletedAt() *BankUpsert {
	u.SetNull(bank.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Bank.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(bank.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BankUpsertOne) UpdateNewValues() *BankUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(bank.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Bank.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BankUpsertOne) Ignore() *BankUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BankUpsertOne) DoNothing() *BankUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BankCreate.OnConflict
// documentation for more info.
func (u *BankUpsertOne) Update(set func(*BankUpsert)) *BankUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BankUpsert{UpdateSet: update})
	}))
	return u
}

// SetNameEn sets the "name_en" field.
func (u *BankUpsertOne) SetNameEn(v string) *BankUpsertOne {
	return u.Update(func(s *BankUpsert) {
		s.SetNameEn(v)
	})
}

// UpdateNameEn sets the "name_en" field to the value that was provided on create.
func (u *BankUpsertOne) UpdateNameEn() *BankUpsertOne {
	return u.Update(func(s *BankUpsert) {
		s.UpdateNameEn()
	})
}

// SetNameZh sets the "name_zh" field.
func (u *BankUpsertOne) SetNameZh(v string) *BankUpsertOne {
	return u.Update(func(s *BankUpsert) {
		s.SetNameZh(v)
	})
}

// UpdateNameZh sets the "name_zh" field to the value that was provided on create.
func (u *BankUpsertOne) UpdateNameZh() *BankUpsertOne {
	return u.Update(func(s *BankUpsert) {
		s.UpdateNameZh()
	})
}

// SetCountryID sets the "country_id" field.
func (u *BankUpsertOne) SetCountryID(v uint64) *BankUpsertOne {
	return u.Update(func(s *BankUpsert) {
		s.SetCountryID(v)
	})
}

// UpdateCountryID sets the "country_id" field to the value that was provided on create.
func (u *BankUpsertOne) UpdateCountryID() *BankUpsertOne {
	return u.Update(func(s *BankUpsert) {
		s.UpdateCountryID()
	})
}

// ClearCountryID clears the value of the "country_id" field.
func (u *BankUpsertOne) ClearCountryID() *BankUpsertOne {
	return u.Update(func(s *BankUpsert) {
		s.ClearCountryID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *BankUpsertOne) SetCreatedAt(v time.Time) *BankUpsertOne {
	return u.Update(func(s *BankUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BankUpsertOne) UpdateCreatedAt() *BankUpsertOne {
	return u.Update(func(s *BankUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BankUpsertOne) SetUpdatedAt(v time.Time) *BankUpsertOne {
	return u.Update(func(s *BankUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BankUpsertOne) UpdateUpdatedAt() *BankUpsertOne {
	return u.Update(func(s *BankUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BankUpsertOne) SetDeletedAt(v time.Time) *BankUpsertOne {
	return u.Update(func(s *BankUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BankUpsertOne) UpdateDeletedAt() *BankUpsertOne {
	return u.Update(func(s *BankUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BankUpsertOne) ClearDeletedAt() *BankUpsertOne {
	return u.Update(func(s *BankUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *BankUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BankCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BankUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BankUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BankUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BankCreateBulk is the builder for creating many Bank entities in bulk.
type BankCreateBulk struct {
	config
	err      error
	builders []*BankCreate
	conflict []sql.ConflictOption
}

// Save creates the Bank entities in the database.
func (bcb *BankCreateBulk) Save(ctx context.Context) ([]*Bank, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bank, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BankMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BankCreateBulk) SaveX(ctx context.Context) []*Bank {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BankCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BankCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Bank.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BankUpsert) {
//			SetNameEn(v+v).
//		}).
//		Exec(ctx)
func (bcb *BankCreateBulk) OnConflict(opts ...sql.ConflictOption) *BankUpsertBulk {
	bcb.conflict = opts
	return &BankUpsertBulk{
		create: bcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Bank.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcb *BankCreateBulk) OnConflictColumns(columns ...string) *BankUpsertBulk {
	bcb.conflict = append(bcb.conflict, sql.ConflictColumns(columns...))
	return &BankUpsertBulk{
		create: bcb,
	}
}

// BankUpsertBulk is the builder for "upsert"-ing
// a bulk of Bank nodes.
type BankUpsertBulk struct {
	create *BankCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Bank.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(bank.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BankUpsertBulk) UpdateNewValues() *BankUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(bank.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Bank.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BankUpsertBulk) Ignore() *BankUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BankUpsertBulk) DoNothing() *BankUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BankCreateBulk.OnConflict
// documentation for more info.
func (u *BankUpsertBulk) Update(set func(*BankUpsert)) *BankUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BankUpsert{UpdateSet: update})
	}))
	return u
}

// SetNameEn sets the "name_en" field.
func (u *BankUpsertBulk) SetNameEn(v string) *BankUpsertBulk {
	return u.Update(func(s *BankUpsert) {
		s.SetNameEn(v)
	})
}

// UpdateNameEn sets the "name_en" field to the value that was provided on create.
func (u *BankUpsertBulk) UpdateNameEn() *BankUpsertBulk {
	return u.Update(func(s *BankUpsert) {
		s.UpdateNameEn()
	})
}

// SetNameZh sets the "name_zh" field.
func (u *BankUpsertBulk) SetNameZh(v string) *BankUpsertBulk {
	return u.Update(func(s *BankUpsert) {
		s.SetNameZh(v)
	})
}

// UpdateNameZh sets the "name_zh" field to the value that was provided on create.
func (u *BankUpsertBulk) UpdateNameZh() *BankUpsertBulk {
	return u.Update(func(s *BankUpsert) {
		s.UpdateNameZh()
	})
}

// SetCountryID sets the "country_id" field.
func (u *BankUpsertBulk) SetCountryID(v uint64) *BankUpsertBulk {
	return u.Update(func(s *BankUpsert) {
		s.SetCountryID(v)
	})
}

// UpdateCountryID sets the "country_id" field to the value that was provided on create.
func (u *BankUpsertBulk) UpdateCountryID() *BankUpsertBulk {
	return u.Update(func(s *BankUpsert) {
		s.UpdateCountryID()
	})
}

// ClearCountryID clears the value of the "country_id" field.
func (u *BankUpsertBulk) ClearCountryID() *BankUpsertBulk {
	return u.Update(func(s *BankUpsert) {
		s.ClearCountryID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *BankUpsertBulk) SetCreatedAt(v time.Time) *BankUpsertBulk {
	return u.Update(func(s *BankUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BankUpsertBulk) UpdateCreatedAt() *BankUpsertBulk {
	return u.Update(func(s *BankUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BankUpsertBulk) SetUpdatedAt(v time.Time) *BankUpsertBulk {
	return u.Update(func(s *BankUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BankUpsertBulk) UpdateUpdatedAt() *BankUpsertBulk {
	return u.Update(func(s *BankUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BankUpsertBulk) SetDeletedAt(v time.Time) *BankUpsertBulk {
	return u.Update(func(s *BankUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BankUpsertBulk) UpdateDeletedAt() *BankUpsertBulk {
	return u.Update(func(s *BankUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BankUpsertBulk) ClearDeletedAt() *BankUpsertBulk {
	return u.Update(func(s *BankUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *BankUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BankCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BankCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BankUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
