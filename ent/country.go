// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gokit-demo/ent/country"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Country is the model entity for the Country schema.
type Country struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// ISO 3166-1 alpha-2 country code
	Iso2 string `json:"iso2,omitempty"`
	// ISO 3166-1 alpha-3 country code
	Iso3 string `json:"iso3,omitempty"`
	// Country name
	Name string `json:"name,omitempty"`
	// Official country name
	OfficialName *string `json:"official_name,omitempty"`
	// ISO 3166-1 numeric code
	NumericCode *string `json:"numeric_code,omitempty"`
	// Country calling code, e.g., +1 for US
	PhoneCode *string `json:"phone_code,omitempty"`
	// Capital city of the country
	Capital *string `json:"capital,omitempty"`
	// Currency name
	CurrencyName *string `json:"currency_name,omitempty"`
	// ISO 4217 currency code
	CurrencyCode *string `json:"currency_code,omitempty"`
	// Currency symbol
	CurrencySymbol *string `json:"currency_symbol,omitempty"`
	// Conversion rate
	ConversionRate float64 `json:"conversion_rate,omitempty"`
	// Status
	Status uint8 `json:"status,omitempty"`
	// Record creation timestamp
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Record update timestamp
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CountryQuery when eager-loading is set.
	Edges        CountryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CountryEdges holds the relations/edges for other nodes in the graph.
type CountryEdges struct {
	// Locations belonging to the country
	Locations []*CountryLocation `json:"locations,omitempty"`
	// Banks belonging to the country
	Banks []*Bank `json:"banks,omitempty"`
	// Users belonging to the country
	Users []*User `json:"users,omitempty"`
	// Contact country Users belonging to the country
	ContactUsers []*User `json:"contact_users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// LocationsOrErr returns the Locations value or an error if the edge
// was not loaded in eager-loading.
func (e CountryEdges) LocationsOrErr() ([]*CountryLocation, error) {
	if e.loadedTypes[0] {
		return e.Locations, nil
	}
	return nil, &NotLoadedError{edge: "locations"}
}

// BanksOrErr returns the Banks value or an error if the edge
// was not loaded in eager-loading.
func (e CountryEdges) BanksOrErr() ([]*Bank, error) {
	if e.loadedTypes[1] {
		return e.Banks, nil
	}
	return nil, &NotLoadedError{edge: "banks"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e CountryEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// ContactUsersOrErr returns the ContactUsers value or an error if the edge
// was not loaded in eager-loading.
func (e CountryEdges) ContactUsersOrErr() ([]*User, error) {
	if e.loadedTypes[3] {
		return e.ContactUsers, nil
	}
	return nil, &NotLoadedError{edge: "contact_users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Country) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case country.FieldConversionRate:
			values[i] = new(sql.NullFloat64)
		case country.FieldID, country.FieldStatus:
			values[i] = new(sql.NullInt64)
		case country.FieldIso2, country.FieldIso3, country.FieldName, country.FieldOfficialName, country.FieldNumericCode, country.FieldPhoneCode, country.FieldCapital, country.FieldCurrencyName, country.FieldCurrencyCode, country.FieldCurrencySymbol:
			values[i] = new(sql.NullString)
		case country.FieldCreatedAt, country.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Country fields.
func (c *Country) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case country.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = uint64(value.Int64)
		case country.FieldIso2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field iso2", values[i])
			} else if value.Valid {
				c.Iso2 = value.String
			}
		case country.FieldIso3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field iso3", values[i])
			} else if value.Valid {
				c.Iso3 = value.String
			}
		case country.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case country.FieldOfficialName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field official_name", values[i])
			} else if value.Valid {
				c.OfficialName = new(string)
				*c.OfficialName = value.String
			}
		case country.FieldNumericCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field numeric_code", values[i])
			} else if value.Valid {
				c.NumericCode = new(string)
				*c.NumericCode = value.String
			}
		case country.FieldPhoneCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_code", values[i])
			} else if value.Valid {
				c.PhoneCode = new(string)
				*c.PhoneCode = value.String
			}
		case country.FieldCapital:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field capital", values[i])
			} else if value.Valid {
				c.Capital = new(string)
				*c.Capital = value.String
			}
		case country.FieldCurrencyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency_name", values[i])
			} else if value.Valid {
				c.CurrencyName = new(string)
				*c.CurrencyName = value.String
			}
		case country.FieldCurrencyCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency_code", values[i])
			} else if value.Valid {
				c.CurrencyCode = new(string)
				*c.CurrencyCode = value.String
			}
		case country.FieldCurrencySymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency_symbol", values[i])
			} else if value.Valid {
				c.CurrencySymbol = new(string)
				*c.CurrencySymbol = value.String
			}
		case country.FieldConversionRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field conversion_rate", values[i])
			} else if value.Valid {
				c.ConversionRate = value.Float64
			}
		case country.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = uint8(value.Int64)
			}
		case country.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case country.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Country.
// This includes values selected through modifiers, order, etc.
func (c *Country) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryLocations queries the "locations" edge of the Country entity.
func (c *Country) QueryLocations() *CountryLocationQuery {
	return NewCountryClient(c.config).QueryLocations(c)
}

// QueryBanks queries the "banks" edge of the Country entity.
func (c *Country) QueryBanks() *BankQuery {
	return NewCountryClient(c.config).QueryBanks(c)
}

// QueryUsers queries the "users" edge of the Country entity.
func (c *Country) QueryUsers() *UserQuery {
	return NewCountryClient(c.config).QueryUsers(c)
}

// QueryContactUsers queries the "contact_users" edge of the Country entity.
func (c *Country) QueryContactUsers() *UserQuery {
	return NewCountryClient(c.config).QueryContactUsers(c)
}

// Update returns a builder for updating this Country.
// Note that you need to call Country.Unwrap() before calling this method if this Country
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Country) Update() *CountryUpdateOne {
	return NewCountryClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Country entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Country) Unwrap() *Country {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Country is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Country) String() string {
	var builder strings.Builder
	builder.WriteString("Country(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("iso2=")
	builder.WriteString(c.Iso2)
	builder.WriteString(", ")
	builder.WriteString("iso3=")
	builder.WriteString(c.Iso3)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	if v := c.OfficialName; v != nil {
		builder.WriteString("official_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.NumericCode; v != nil {
		builder.WriteString("numeric_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.PhoneCode; v != nil {
		builder.WriteString("phone_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.Capital; v != nil {
		builder.WriteString("capital=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.CurrencyName; v != nil {
		builder.WriteString("currency_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.CurrencyCode; v != nil {
		builder.WriteString("currency_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.CurrencySymbol; v != nil {
		builder.WriteString("currency_symbol=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("conversion_rate=")
	builder.WriteString(fmt.Sprintf("%v", c.ConversionRate))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Countries is a parsable slice of Country.
type Countries []*Country
