// Code generated by ent, DO NOT EDIT.

package countrylocation

import (
	"gokit-demo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldLTE(FieldID, id))
}

// CountryID applies equality check predicate on the "country_id" field. It's identical to CountryIDEQ.
func CountryID(v uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldEQ(FieldCountryID, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldEQ(FieldParentID, v))
}

// Sorting applies equality check predicate on the "sorting" field. It's identical to SortingEQ.
func Sorting(v uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldEQ(FieldSorting, v))
}

// NameEn applies equality check predicate on the "name_en" field. It's identical to NameEnEQ.
func NameEn(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldEQ(FieldNameEn, v))
}

// NameZh applies equality check predicate on the "name_zh" field. It's identical to NameZhEQ.
func NameZh(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldEQ(FieldNameZh, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldEQ(FieldDeletedAt, v))
}

// CountryIDEQ applies the EQ predicate on the "country_id" field.
func CountryIDEQ(v uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldEQ(FieldCountryID, v))
}

// CountryIDNEQ applies the NEQ predicate on the "country_id" field.
func CountryIDNEQ(v uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldNEQ(FieldCountryID, v))
}

// CountryIDIn applies the In predicate on the "country_id" field.
func CountryIDIn(vs ...uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldIn(FieldCountryID, vs...))
}

// CountryIDNotIn applies the NotIn predicate on the "country_id" field.
func CountryIDNotIn(vs ...uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldNotIn(FieldCountryID, vs...))
}

// CountryIDIsNil applies the IsNil predicate on the "country_id" field.
func CountryIDIsNil() predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldIsNull(FieldCountryID))
}

// CountryIDNotNil applies the NotNil predicate on the "country_id" field.
func CountryIDNotNil() predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldNotNull(FieldCountryID))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldIsNull(FieldParentID))
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldNotNull(FieldParentID))
}

// SortingEQ applies the EQ predicate on the "sorting" field.
func SortingEQ(v uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldEQ(FieldSorting, v))
}

// SortingNEQ applies the NEQ predicate on the "sorting" field.
func SortingNEQ(v uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldNEQ(FieldSorting, v))
}

// SortingIn applies the In predicate on the "sorting" field.
func SortingIn(vs ...uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldIn(FieldSorting, vs...))
}

// SortingNotIn applies the NotIn predicate on the "sorting" field.
func SortingNotIn(vs ...uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldNotIn(FieldSorting, vs...))
}

// SortingGT applies the GT predicate on the "sorting" field.
func SortingGT(v uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldGT(FieldSorting, v))
}

// SortingGTE applies the GTE predicate on the "sorting" field.
func SortingGTE(v uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldGTE(FieldSorting, v))
}

// SortingLT applies the LT predicate on the "sorting" field.
func SortingLT(v uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldLT(FieldSorting, v))
}

// SortingLTE applies the LTE predicate on the "sorting" field.
func SortingLTE(v uint64) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldLTE(FieldSorting, v))
}

// NameEnEQ applies the EQ predicate on the "name_en" field.
func NameEnEQ(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldEQ(FieldNameEn, v))
}

// NameEnNEQ applies the NEQ predicate on the "name_en" field.
func NameEnNEQ(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldNEQ(FieldNameEn, v))
}

// NameEnIn applies the In predicate on the "name_en" field.
func NameEnIn(vs ...string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldIn(FieldNameEn, vs...))
}

// NameEnNotIn applies the NotIn predicate on the "name_en" field.
func NameEnNotIn(vs ...string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldNotIn(FieldNameEn, vs...))
}

// NameEnGT applies the GT predicate on the "name_en" field.
func NameEnGT(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldGT(FieldNameEn, v))
}

// NameEnGTE applies the GTE predicate on the "name_en" field.
func NameEnGTE(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldGTE(FieldNameEn, v))
}

// NameEnLT applies the LT predicate on the "name_en" field.
func NameEnLT(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldLT(FieldNameEn, v))
}

// NameEnLTE applies the LTE predicate on the "name_en" field.
func NameEnLTE(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldLTE(FieldNameEn, v))
}

// NameEnContains applies the Contains predicate on the "name_en" field.
func NameEnContains(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldContains(FieldNameEn, v))
}

// NameEnHasPrefix applies the HasPrefix predicate on the "name_en" field.
func NameEnHasPrefix(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldHasPrefix(FieldNameEn, v))
}

// NameEnHasSuffix applies the HasSuffix predicate on the "name_en" field.
func NameEnHasSuffix(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldHasSuffix(FieldNameEn, v))
}

// NameEnEqualFold applies the EqualFold predicate on the "name_en" field.
func NameEnEqualFold(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldEqualFold(FieldNameEn, v))
}

// NameEnContainsFold applies the ContainsFold predicate on the "name_en" field.
func NameEnContainsFold(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldContainsFold(FieldNameEn, v))
}

// NameZhEQ applies the EQ predicate on the "name_zh" field.
func NameZhEQ(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldEQ(FieldNameZh, v))
}

// NameZhNEQ applies the NEQ predicate on the "name_zh" field.
func NameZhNEQ(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldNEQ(FieldNameZh, v))
}

// NameZhIn applies the In predicate on the "name_zh" field.
func NameZhIn(vs ...string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldIn(FieldNameZh, vs...))
}

// NameZhNotIn applies the NotIn predicate on the "name_zh" field.
func NameZhNotIn(vs ...string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldNotIn(FieldNameZh, vs...))
}

// NameZhGT applies the GT predicate on the "name_zh" field.
func NameZhGT(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldGT(FieldNameZh, v))
}

// NameZhGTE applies the GTE predicate on the "name_zh" field.
func NameZhGTE(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldGTE(FieldNameZh, v))
}

// NameZhLT applies the LT predicate on the "name_zh" field.
func NameZhLT(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldLT(FieldNameZh, v))
}

// NameZhLTE applies the LTE predicate on the "name_zh" field.
func NameZhLTE(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldLTE(FieldNameZh, v))
}

// NameZhContains applies the Contains predicate on the "name_zh" field.
func NameZhContains(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldContains(FieldNameZh, v))
}

// NameZhHasPrefix applies the HasPrefix predicate on the "name_zh" field.
func NameZhHasPrefix(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldHasPrefix(FieldNameZh, v))
}

// NameZhHasSuffix applies the HasSuffix predicate on the "name_zh" field.
func NameZhHasSuffix(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldHasSuffix(FieldNameZh, v))
}

// NameZhEqualFold applies the EqualFold predicate on the "name_zh" field.
func NameZhEqualFold(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldEqualFold(FieldNameZh, v))
}

// NameZhContainsFold applies the ContainsFold predicate on the "name_zh" field.
func NameZhContainsFold(v string) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldContainsFold(FieldNameZh, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.CountryLocation {
	return predicate.CountryLocation(sql.FieldNotNull(FieldDeletedAt))
}

// HasCountry applies the HasEdge predicate on the "country" edge.
func HasCountry() predicate.CountryLocation {
	return predicate.CountryLocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CountryTable, CountryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCountryWith applies the HasEdge predicate on the "country" edge with a given conditions (other predicates).
func HasCountryWith(preds ...predicate.Country) predicate.CountryLocation {
	return predicate.CountryLocation(func(s *sql.Selector) {
		step := newCountryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.CountryLocation {
	return predicate.CountryLocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.CountryLocation) predicate.CountryLocation {
	return predicate.CountryLocation(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildLocations applies the HasEdge predicate on the "child_locations" edge.
func HasChildLocations() predicate.CountryLocation {
	return predicate.CountryLocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildLocationsTable, ChildLocationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildLocationsWith applies the HasEdge predicate on the "child_locations" edge with a given conditions (other predicates).
func HasChildLocationsWith(preds ...predicate.CountryLocation) predicate.CountryLocation {
	return predicate.CountryLocation(func(s *sql.Selector) {
		step := newChildLocationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CountryLocation) predicate.CountryLocation {
	return predicate.CountryLocation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CountryLocation) predicate.CountryLocation {
	return predicate.CountryLocation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CountryLocation) predicate.CountryLocation {
	return predicate.CountryLocation(sql.NotPredicates(p))
}
