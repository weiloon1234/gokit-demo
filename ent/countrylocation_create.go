// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gokit-demo/ent/country"
	"gokit-demo/ent/countrylocation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CountryLocationCreate is the builder for creating a CountryLocation entity.
type CountryLocationCreate struct {
	config
	mutation *CountryLocationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCountryID sets the "country_id" field.
func (clc *CountryLocationCreate) SetCountryID(u uint64) *CountryLocationCreate {
	clc.mutation.SetCountryID(u)
	return clc
}

// SetNillableCountryID sets the "country_id" field if the given value is not nil.
func (clc *CountryLocationCreate) SetNillableCountryID(u *uint64) *CountryLocationCreate {
	if u != nil {
		clc.SetCountryID(*u)
	}
	return clc
}

// SetParentID sets the "parent_id" field.
func (clc *CountryLocationCreate) SetParentID(u uint64) *CountryLocationCreate {
	clc.mutation.SetParentID(u)
	return clc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (clc *CountryLocationCreate) SetNillableParentID(u *uint64) *CountryLocationCreate {
	if u != nil {
		clc.SetParentID(*u)
	}
	return clc
}

// SetSorting sets the "sorting" field.
func (clc *CountryLocationCreate) SetSorting(u uint64) *CountryLocationCreate {
	clc.mutation.SetSorting(u)
	return clc
}

// SetNillableSorting sets the "sorting" field if the given value is not nil.
func (clc *CountryLocationCreate) SetNillableSorting(u *uint64) *CountryLocationCreate {
	if u != nil {
		clc.SetSorting(*u)
	}
	return clc
}

// SetNameEn sets the "name_en" field.
func (clc *CountryLocationCreate) SetNameEn(s string) *CountryLocationCreate {
	clc.mutation.SetNameEn(s)
	return clc
}

// SetNameZh sets the "name_zh" field.
func (clc *CountryLocationCreate) SetNameZh(s string) *CountryLocationCreate {
	clc.mutation.SetNameZh(s)
	return clc
}

// SetCreatedAt sets the "created_at" field.
func (clc *CountryLocationCreate) SetCreatedAt(t time.Time) *CountryLocationCreate {
	clc.mutation.SetCreatedAt(t)
	return clc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (clc *CountryLocationCreate) SetNillableCreatedAt(t *time.Time) *CountryLocationCreate {
	if t != nil {
		clc.SetCreatedAt(*t)
	}
	return clc
}

// SetUpdatedAt sets the "updated_at" field.
func (clc *CountryLocationCreate) SetUpdatedAt(t time.Time) *CountryLocationCreate {
	clc.mutation.SetUpdatedAt(t)
	return clc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (clc *CountryLocationCreate) SetNillableUpdatedAt(t *time.Time) *CountryLocationCreate {
	if t != nil {
		clc.SetUpdatedAt(*t)
	}
	return clc
}

// SetDeletedAt sets the "deleted_at" field.
func (clc *CountryLocationCreate) SetDeletedAt(t time.Time) *CountryLocationCreate {
	clc.mutation.SetDeletedAt(t)
	return clc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (clc *CountryLocationCreate) SetNillableDeletedAt(t *time.Time) *CountryLocationCreate {
	if t != nil {
		clc.SetDeletedAt(*t)
	}
	return clc
}

// SetID sets the "id" field.
func (clc *CountryLocationCreate) SetID(u uint64) *CountryLocationCreate {
	clc.mutation.SetID(u)
	return clc
}

// SetCountry sets the "country" edge to the Country entity.
func (clc *CountryLocationCreate) SetCountry(c *Country) *CountryLocationCreate {
	return clc.SetCountryID(c.ID)
}

// SetParent sets the "parent" edge to the CountryLocation entity.
func (clc *CountryLocationCreate) SetParent(c *CountryLocation) *CountryLocationCreate {
	return clc.SetParentID(c.ID)
}

// AddChildLocationIDs adds the "child_locations" edge to the CountryLocation entity by IDs.
func (clc *CountryLocationCreate) AddChildLocationIDs(ids ...uint64) *CountryLocationCreate {
	clc.mutation.AddChildLocationIDs(ids...)
	return clc
}

// AddChildLocations adds the "child_locations" edges to the CountryLocation entity.
func (clc *CountryLocationCreate) AddChildLocations(c ...*CountryLocation) *CountryLocationCreate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return clc.AddChildLocationIDs(ids...)
}

// Mutation returns the CountryLocationMutation object of the builder.
func (clc *CountryLocationCreate) Mutation() *CountryLocationMutation {
	return clc.mutation
}

// Save creates the CountryLocation in the database.
func (clc *CountryLocationCreate) Save(ctx context.Context) (*CountryLocation, error) {
	clc.defaults()
	return withHooks(ctx, clc.sqlSave, clc.mutation, clc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (clc *CountryLocationCreate) SaveX(ctx context.Context) *CountryLocation {
	v, err := clc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clc *CountryLocationCreate) Exec(ctx context.Context) error {
	_, err := clc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clc *CountryLocationCreate) ExecX(ctx context.Context) {
	if err := clc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clc *CountryLocationCreate) defaults() {
	if _, ok := clc.mutation.Sorting(); !ok {
		v := countrylocation.DefaultSorting
		clc.mutation.SetSorting(v)
	}
	if _, ok := clc.mutation.CreatedAt(); !ok {
		v := countrylocation.DefaultCreatedAt()
		clc.mutation.SetCreatedAt(v)
	}
	if _, ok := clc.mutation.UpdatedAt(); !ok {
		v := countrylocation.DefaultUpdatedAt
		clc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clc *CountryLocationCreate) check() error {
	if _, ok := clc.mutation.Sorting(); !ok {
		return &ValidationError{Name: "sorting", err: errors.New(`ent: missing required field "CountryLocation.sorting"`)}
	}
	if _, ok := clc.mutation.NameEn(); !ok {
		return &ValidationError{Name: "name_en", err: errors.New(`ent: missing required field "CountryLocation.name_en"`)}
	}
	if v, ok := clc.mutation.NameEn(); ok {
		if err := countrylocation.NameEnValidator(v); err != nil {
			return &ValidationError{Name: "name_en", err: fmt.Errorf(`ent: validator failed for field "CountryLocation.name_en": %w`, err)}
		}
	}
	if _, ok := clc.mutation.NameZh(); !ok {
		return &ValidationError{Name: "name_zh", err: errors.New(`ent: missing required field "CountryLocation.name_zh"`)}
	}
	if v, ok := clc.mutation.NameZh(); ok {
		if err := countrylocation.NameZhValidator(v); err != nil {
			return &ValidationError{Name: "name_zh", err: fmt.Errorf(`ent: validator failed for field "CountryLocation.name_zh": %w`, err)}
		}
	}
	if _, ok := clc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CountryLocation.created_at"`)}
	}
	if _, ok := clc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CountryLocation.updated_at"`)}
	}
	return nil
}

func (clc *CountryLocationCreate) sqlSave(ctx context.Context) (*CountryLocation, error) {
	if err := clc.check(); err != nil {
		return nil, err
	}
	_node, _spec := clc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	clc.mutation.id = &_node.ID
	clc.mutation.done = true
	return _node, nil
}

func (clc *CountryLocationCreate) createSpec() (*CountryLocation, *sqlgraph.CreateSpec) {
	var (
		_node = &CountryLocation{config: clc.config}
		_spec = sqlgraph.NewCreateSpec(countrylocation.Table, sqlgraph.NewFieldSpec(countrylocation.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = clc.conflict
	if id, ok := clc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := clc.mutation.Sorting(); ok {
		_spec.SetField(countrylocation.FieldSorting, field.TypeUint64, value)
		_node.Sorting = value
	}
	if value, ok := clc.mutation.NameEn(); ok {
		_spec.SetField(countrylocation.FieldNameEn, field.TypeString, value)
		_node.NameEn = value
	}
	if value, ok := clc.mutation.NameZh(); ok {
		_spec.SetField(countrylocation.FieldNameZh, field.TypeString, value)
		_node.NameZh = value
	}
	if value, ok := clc.mutation.CreatedAt(); ok {
		_spec.SetField(countrylocation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := clc.mutation.UpdatedAt(); ok {
		_spec.SetField(countrylocation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := clc.mutation.DeletedAt(); ok {
		_spec.SetField(countrylocation.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := clc.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countrylocation.CountryTable,
			Columns: []string{countrylocation.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CountryID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := clc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countrylocation.ParentTable,
			Columns: []string{countrylocation.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(countrylocation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := clc.mutation.ChildLocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   countrylocation.ChildLocationsTable,
			Columns: []string{countrylocation.ChildLocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(countrylocation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CountryLocation.Create().
//		SetCountryID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CountryLocationUpsert) {
//			SetCountryID(v+v).
//		}).
//		Exec(ctx)
func (clc *CountryLocationCreate) OnConflict(opts ...sql.ConflictOption) *CountryLocationUpsertOne {
	clc.conflict = opts
	return &CountryLocationUpsertOne{
		create: clc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CountryLocation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (clc *CountryLocationCreate) OnConflictColumns(columns ...string) *CountryLocationUpsertOne {
	clc.conflict = append(clc.conflict, sql.ConflictColumns(columns...))
	return &CountryLocationUpsertOne{
		create: clc,
	}
}

type (
	// CountryLocationUpsertOne is the builder for "upsert"-ing
	//  one CountryLocation node.
	CountryLocationUpsertOne struct {
		create *CountryLocationCreate
	}

	// CountryLocationUpsert is the "OnConflict" setter.
	CountryLocationUpsert struct {
		*sql.UpdateSet
	}
)

// SetCountryID sets the "country_id" field.
func (u *CountryLocationUpsert) SetCountryID(v uint64) *CountryLocationUpsert {
	u.Set(countrylocation.FieldCountryID, v)
	return u
}

// UpdateCountryID sets the "country_id" field to the value that was provided on create.
func (u *CountryLocationUpsert) UpdateCountryID() *CountryLocationUpsert {
	u.SetExcluded(countrylocation.FieldCountryID)
	return u
}

// ClearCountryID clears the value of the "country_id" field.
func (u *CountryLocationUpsert) ClearCountryID() *CountryLocationUpsert {
	u.SetNull(countrylocation.FieldCountryID)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *CountryLocationUpsert) SetParentID(v uint64) *CountryLocationUpsert {
	u.Set(countrylocation.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CountryLocationUpsert) UpdateParentID() *CountryLocationUpsert {
	u.SetExcluded(countrylocation.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *CountryLocationUpsert) ClearParentID() *CountryLocationUpsert {
	u.SetNull(countrylocation.FieldParentID)
	return u
}

// SetSorting sets the "sorting" field.
func (u *CountryLocationUpsert) SetSorting(v uint64) *CountryLocationUpsert {
	u.Set(countrylocation.FieldSorting, v)
	return u
}

// UpdateSorting sets the "sorting" field to the value that was provided on create.
func (u *CountryLocationUpsert) UpdateSorting() *CountryLocationUpsert {
	u.SetExcluded(countrylocation.FieldSorting)
	return u
}

// AddSorting adds v to the "sorting" field.
func (u *CountryLocationUpsert) AddSorting(v uint64) *CountryLocationUpsert {
	u.Add(countrylocation.FieldSorting, v)
	return u
}

// SetNameEn sets the "name_en" field.
func (u *CountryLocationUpsert) SetNameEn(v string) *CountryLocationUpsert {
	u.Set(countrylocation.FieldNameEn, v)
	return u
}

// UpdateNameEn sets the "name_en" field to the value that was provided on create.
func (u *CountryLocationUpsert) UpdateNameEn() *CountryLocationUpsert {
	u.SetExcluded(countrylocation.FieldNameEn)
	return u
}

// SetNameZh sets the "name_zh" field.
func (u *CountryLocationUpsert) SetNameZh(v string) *CountryLocationUpsert {
	u.Set(countrylocation.FieldNameZh, v)
	return u
}

// UpdateNameZh sets the "name_zh" field to the value that was provided on create.
func (u *CountryLocationUpsert) UpdateNameZh() *CountryLocationUpsert {
	u.SetExcluded(countrylocation.FieldNameZh)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CountryLocationUpsert) SetCreatedAt(v time.Time) *CountryLocationUpsert {
	u.Set(countrylocation.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CountryLocationUpsert) UpdateCreatedAt() *CountryLocationUpsert {
	u.SetExcluded(countrylocation.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CountryLocationUpsert) SetUpdatedAt(v time.Time) *CountryLocationUpsert {
	u.Set(countrylocation.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CountryLocationUpsert) UpdateUpdatedAt() *CountryLocationUpsert {
	u.SetExcluded(countrylocation.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CountryLocationUpsert) SetDeletedAt(v time.Time) *CountryLocationUpsert {
	u.Set(countrylocation.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CountryLocationUpsert) UpdateDeletedAt() *CountryLocationUpsert {
	u.SetExcluded(countrylocation.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CountryLocationUpsert) ClearDeletedAt() *CountryLocationUpsert {
	u.SetNull(countrylocation.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CountryLocation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(countrylocation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CountryLocationUpsertOne) UpdateNewValues() *CountryLocationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(countrylocation.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CountryLocation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CountryLocationUpsertOne) Ignore() *CountryLocationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CountryLocationUpsertOne) DoNothing() *CountryLocationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CountryLocationCreate.OnConflict
// documentation for more info.
func (u *CountryLocationUpsertOne) Update(set func(*CountryLocationUpsert)) *CountryLocationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CountryLocationUpsert{UpdateSet: update})
	}))
	return u
}

// SetCountryID sets the "country_id" field.
func (u *CountryLocationUpsertOne) SetCountryID(v uint64) *CountryLocationUpsertOne {
	return u.Update(func(s *CountryLocationUpsert) {
		s.SetCountryID(v)
	})
}

// UpdateCountryID sets the "country_id" field to the value that was provided on create.
func (u *CountryLocationUpsertOne) UpdateCountryID() *CountryLocationUpsertOne {
	return u.Update(func(s *CountryLocationUpsert) {
		s.UpdateCountryID()
	})
}

// ClearCountryID clears the value of the "country_id" field.
func (u *CountryLocationUpsertOne) ClearCountryID() *CountryLocationUpsertOne {
	return u.Update(func(s *CountryLocationUpsert) {
		s.ClearCountryID()
	})
}

// SetParentID sets the "parent_id" field.
func (u *CountryLocationUpsertOne) SetParentID(v uint64) *CountryLocationUpsertOne {
	return u.Update(func(s *CountryLocationUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CountryLocationUpsertOne) UpdateParentID() *CountryLocationUpsertOne {
	return u.Update(func(s *CountryLocationUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *CountryLocationUpsertOne) ClearParentID() *CountryLocationUpsertOne {
	return u.Update(func(s *CountryLocationUpsert) {
		s.ClearParentID()
	})
}

// SetSorting sets the "sorting" field.
func (u *CountryLocationUpsertOne) SetSorting(v uint64) *CountryLocationUpsertOne {
	return u.Update(func(s *CountryLocationUpsert) {
		s.SetSorting(v)
	})
}

// AddSorting adds v to the "sorting" field.
func (u *CountryLocationUpsertOne) AddSorting(v uint64) *CountryLocationUpsertOne {
	return u.Update(func(s *CountryLocationUpsert) {
		s.AddSorting(v)
	})
}

// UpdateSorting sets the "sorting" field to the value that was provided on create.
func (u *CountryLocationUpsertOne) UpdateSorting() *CountryLocationUpsertOne {
	return u.Update(func(s *CountryLocationUpsert) {
		s.UpdateSorting()
	})
}

// SetNameEn sets the "name_en" field.
func (u *CountryLocationUpsertOne) SetNameEn(v string) *CountryLocationUpsertOne {
	return u.Update(func(s *CountryLocationUpsert) {
		s.SetNameEn(v)
	})
}

// UpdateNameEn sets the "name_en" field to the value that was provided on create.
func (u *CountryLocationUpsertOne) UpdateNameEn() *CountryLocationUpsertOne {
	return u.Update(func(s *CountryLocationUpsert) {
		s.UpdateNameEn()
	})
}

// SetNameZh sets the "name_zh" field.
func (u *CountryLocationUpsertOne) SetNameZh(v string) *CountryLocationUpsertOne {
	return u.Update(func(s *CountryLocationUpsert) {
		s.SetNameZh(v)
	})
}

// UpdateNameZh sets the "name_zh" field to the value that was provided on create.
func (u *CountryLocationUpsertOne) UpdateNameZh() *CountryLocationUpsertOne {
	return u.Update(func(s *CountryLocationUpsert) {
		s.UpdateNameZh()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *CountryLocationUpsertOne) SetCreatedAt(v time.Time) *CountryLocationUpsertOne {
	return u.Update(func(s *CountryLocationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CountryLocationUpsertOne) UpdateCreatedAt() *CountryLocationUpsertOne {
	return u.Update(func(s *CountryLocationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CountryLocationUpsertOne) SetUpdatedAt(v time.Time) *CountryLocationUpsertOne {
	return u.Update(func(s *CountryLocationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CountryLocationUpsertOne) UpdateUpdatedAt() *CountryLocationUpsertOne {
	return u.Update(func(s *CountryLocationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CountryLocationUpsertOne) SetDeletedAt(v time.Time) *CountryLocationUpsertOne {
	return u.Update(func(s *CountryLocationUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CountryLocationUpsertOne) UpdateDeletedAt() *CountryLocationUpsertOne {
	return u.Update(func(s *CountryLocationUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CountryLocationUpsertOne) ClearDeletedAt() *CountryLocationUpsertOne {
	return u.Update(func(s *CountryLocationUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *CountryLocationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CountryLocationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CountryLocationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CountryLocationUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CountryLocationUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CountryLocationCreateBulk is the builder for creating many CountryLocation entities in bulk.
type CountryLocationCreateBulk struct {
	config
	err      error
	builders []*CountryLocationCreate
	conflict []sql.ConflictOption
}

// Save creates the CountryLocation entities in the database.
func (clcb *CountryLocationCreateBulk) Save(ctx context.Context) ([]*CountryLocation, error) {
	if clcb.err != nil {
		return nil, clcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(clcb.builders))
	nodes := make([]*CountryLocation, len(clcb.builders))
	mutators := make([]Mutator, len(clcb.builders))
	for i := range clcb.builders {
		func(i int, root context.Context) {
			builder := clcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CountryLocationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = clcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clcb *CountryLocationCreateBulk) SaveX(ctx context.Context) []*CountryLocation {
	v, err := clcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clcb *CountryLocationCreateBulk) Exec(ctx context.Context) error {
	_, err := clcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clcb *CountryLocationCreateBulk) ExecX(ctx context.Context) {
	if err := clcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CountryLocation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CountryLocationUpsert) {
//			SetCountryID(v+v).
//		}).
//		Exec(ctx)
func (clcb *CountryLocationCreateBulk) OnConflict(opts ...sql.ConflictOption) *CountryLocationUpsertBulk {
	clcb.conflict = opts
	return &CountryLocationUpsertBulk{
		create: clcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CountryLocation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (clcb *CountryLocationCreateBulk) OnConflictColumns(columns ...string) *CountryLocationUpsertBulk {
	clcb.conflict = append(clcb.conflict, sql.ConflictColumns(columns...))
	return &CountryLocationUpsertBulk{
		create: clcb,
	}
}

// CountryLocationUpsertBulk is the builder for "upsert"-ing
// a bulk of CountryLocation nodes.
type CountryLocationUpsertBulk struct {
	create *CountryLocationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CountryLocation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(countrylocation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CountryLocationUpsertBulk) UpdateNewValues() *CountryLocationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(countrylocation.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CountryLocation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CountryLocationUpsertBulk) Ignore() *CountryLocationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CountryLocationUpsertBulk) DoNothing() *CountryLocationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CountryLocationCreateBulk.OnConflict
// documentation for more info.
func (u *CountryLocationUpsertBulk) Update(set func(*CountryLocationUpsert)) *CountryLocationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CountryLocationUpsert{UpdateSet: update})
	}))
	return u
}

// SetCountryID sets the "country_id" field.
func (u *CountryLocationUpsertBulk) SetCountryID(v uint64) *CountryLocationUpsertBulk {
	return u.Update(func(s *CountryLocationUpsert) {
		s.SetCountryID(v)
	})
}

// UpdateCountryID sets the "country_id" field to the value that was provided on create.
func (u *CountryLocationUpsertBulk) UpdateCountryID() *CountryLocationUpsertBulk {
	return u.Update(func(s *CountryLocationUpsert) {
		s.UpdateCountryID()
	})
}

// ClearCountryID clears the value of the "country_id" field.
func (u *CountryLocationUpsertBulk) ClearCountryID() *CountryLocationUpsertBulk {
	return u.Update(func(s *CountryLocationUpsert) {
		s.ClearCountryID()
	})
}

// SetParentID sets the "parent_id" field.
func (u *CountryLocationUpsertBulk) SetParentID(v uint64) *CountryLocationUpsertBulk {
	return u.Update(func(s *CountryLocationUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CountryLocationUpsertBulk) UpdateParentID() *CountryLocationUpsertBulk {
	return u.Update(func(s *CountryLocationUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *CountryLocationUpsertBulk) ClearParentID() *CountryLocationUpsertBulk {
	return u.Update(func(s *CountryLocationUpsert) {
		s.ClearParentID()
	})
}

// SetSorting sets the "sorting" field.
func (u *CountryLocationUpsertBulk) SetSorting(v uint64) *CountryLocationUpsertBulk {
	return u.Update(func(s *CountryLocationUpsert) {
		s.SetSorting(v)
	})
}

// AddSorting adds v to the "sorting" field.
func (u *CountryLocationUpsertBulk) AddSorting(v uint64) *CountryLocationUpsertBulk {
	return u.Update(func(s *CountryLocationUpsert) {
		s.AddSorting(v)
	})
}

// UpdateSorting sets the "sorting" field to the value that was provided on create.
func (u *CountryLocationUpsertBulk) UpdateSorting() *CountryLocationUpsertBulk {
	return u.Update(func(s *CountryLocationUpsert) {
		s.UpdateSorting()
	})
}

// SetNameEn sets the "name_en" field.
func (u *CountryLocationUpsertBulk) SetNameEn(v string) *CountryLocationUpsertBulk {
	return u.Update(func(s *CountryLocationUpsert) {
		s.SetNameEn(v)
	})
}

// UpdateNameEn sets the "name_en" field to the value that was provided on create.
func (u *CountryLocationUpsertBulk) UpdateNameEn() *CountryLocationUpsertBulk {
	return u.Update(func(s *CountryLocationUpsert) {
		s.UpdateNameEn()
	})
}

// SetNameZh sets the "name_zh" field.
func (u *CountryLocationUpsertBulk) SetNameZh(v string) *CountryLocationUpsertBulk {
	return u.Update(func(s *CountryLocationUpsert) {
		s.SetNameZh(v)
	})
}

// UpdateNameZh sets the "name_zh" field to the value that was provided on create.
func (u *CountryLocationUpsertBulk) UpdateNameZh() *CountryLocationUpsertBulk {
	return u.Update(func(s *CountryLocationUpsert) {
		s.UpdateNameZh()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *CountryLocationUpsertBulk) SetCreatedAt(v time.Time) *CountryLocationUpsertBulk {
	return u.Update(func(s *CountryLocationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CountryLocationUpsertBulk) UpdateCreatedAt() *CountryLocationUpsertBulk {
	return u.Update(func(s *CountryLocationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CountryLocationUpsertBulk) SetUpdatedAt(v time.Time) *CountryLocationUpsertBulk {
	return u.Update(func(s *CountryLocationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CountryLocationUpsertBulk) UpdateUpdatedAt() *CountryLocationUpsertBulk {
	return u.Update(func(s *CountryLocationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CountryLocationUpsertBulk) SetDeletedAt(v time.Time) *CountryLocationUpsertBulk {
	return u.Update(func(s *CountryLocationUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CountryLocationUpsertBulk) UpdateDeletedAt() *CountryLocationUpsertBulk {
	return u.Update(func(s *CountryLocationUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CountryLocationUpsertBulk) ClearDeletedAt() *CountryLocationUpsertBulk {
	return u.Update(func(s *CountryLocationUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *CountryLocationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CountryLocationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CountryLocationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CountryLocationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
